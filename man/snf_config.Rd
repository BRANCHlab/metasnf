% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/snf_config.R
\name{snf_config}
\alias{snf_config}
\title{Define configuration for generating a set of SNF-based cluster solutions}
\usage{
snf_config(
  dl,
  n_solutions,
  min_removed_inputs,
  max_removed_inputs,
  dropout_dist,
  min_alpha,
  max_alpha,
  min_k,
  max_k,
  min_t,
  max_t,
  alpha_values,
  k_values,
  t_values,
  possible_snf_schemes,
  clustering_algorithms,
  continuous_distances,
  discrete_distances,
  ordinal_distances,
  categorical_distances,
  mixed_distances,
  distance_metrics_list,
  snf_input_weights,
  snf_domain_weights,
  retry_limit,
  cnt_dist_fns,
  dsc_dist_fns,
  ord_dist_fns,
  cat_dist_fns,
  mix_dist_fns
)
}
\arguments{
\item{dl}{Parameter for the settings data frame. A \code{data_list} class object.
Used to establish data frame inclusion columns (feature selection).}

\item{n_solutions}{Parameter for the settings data frame. Number of cluster
solutions the settings data frame should store settings for.}

\item{min_removed_inputs}{Parameter for the settings data frame. The
minimum number of input data frames that may be randomly removed. By
default, 0.}

\item{max_removed_inputs}{The largest number of input data frames that may be
randomly removed. By default, this is 1 less than all the provided input
dataframes in the data list.}

\item{dropout_dist}{Parameter controlling how the random removal of input
dataframes should occur. Can be "none" (no input dataframes are randomly
removed), "uniform" (uniformly sample between min_removed_inputs and
max_removed_inputs to determine number of input dataframes to remove), or
"exponential" (pick number of input dataframes to remove by sampling from
min_removed_inputs to max_removed_inputs with an exponential distribution;
the default).}

\item{min_alpha}{The minimum value that the alpha hyperparameter can have.
Random assigned value of alpha for each row will be obtained by uniformly
sampling numbers between \code{min_alpha} and \code{max_alpha} at intervals of 0.1.
Cannot be used in conjunction with the \code{alpha_values} parameter.}

\item{max_alpha}{The maximum value that the alpha hyperparameter can have.
See \code{min_alpha} parameter. Cannot be used in conjunction with the
\code{alpha_values} parameter.}

\item{min_k}{The minimum value that the k hyperparameter can have.
Random assigned value of k for each row will be obtained by uniformly
sampling numbers between \code{min_k} and \code{max_k} at intervals of 1.
Cannot be used in conjunction with the \code{k_values} parameter.}

\item{max_k}{The maximum value that the k hyperparameter can have.
See \code{min_k} parameter. Cannot be used in conjunction with the
\code{k_values} parameter.}

\item{min_t}{The minimum value that the t hyperparameter can have.
Random assigned value of t for each row will be obtained by uniformly
sampling numbers between \code{min_t} and \code{max_t} at intervals of 1.
Cannot be used in conjunction with the \code{t_values} parameter.}

\item{max_t}{The maximum value that the t hyperparameter can have.
See \code{min_t} parameter. Cannot be used in conjunction with the
\code{t_values} parameter.}

\item{alpha_values}{A number or numeric vector of a set of possible values
that alpha can take on. Value will be obtained by uniformly sampling the
vector. Cannot be used in conjunction with the \code{min_alpha} or \code{max_alpha}
parameters.}

\item{k_values}{A number or numeric vector of a set of possible values
that k can take on. Value will be obtained by uniformly sampling the
vector. Cannot be used in conjunction with the \code{min_k} or \code{max_k}
parameters.}

\item{t_values}{A number or numeric vector of a set of possible values
that t can take on. Value will be obtained by uniformly sampling the
vector. Cannot be used in conjunction with the \code{min_t} or \code{max_t}
parameters.}

\item{possible_snf_schemes}{A vector containing the possible snf_schemes to
uniformly randomly select from. By default, the vector contains all
3 possible schemes: c(1, 2, 3). 1 corresponds to the "individual" scheme,
2 corresponds to the "domain" scheme, and 3 corresponds to the "twostep"
scheme.}

\item{clustering_algorithms}{A list of clustering algorithms to uniformly
randomly pick from when clustering. When not specified, randomly select
between spectral clustering using the eigen-gap heuristic and spectral
clustering using the rotation cost heuristic. See ?generate_clust_algs_list
for more details on running custom clustering algorithms.}

\item{continuous_distances}{A vector of continuous distance metrics to use
when a custom distance_metrics_list is provided.}

\item{discrete_distances}{A vector of categorical distance metrics to use
when a custom distance_metrics_list is provided.}

\item{ordinal_distances}{A vector of categorical distance metrics to use
when a custom distance_metrics_list is provided.}

\item{categorical_distances}{A vector of categorical distance metrics to use
when a custom distance_metrics_list is provided.}

\item{mixed_distances}{A vector of mixed distance metrics to use
when a custom distance_metrics_list is provided.}

\item{distance_metrics_list}{List containing distance metrics to vary over.
See ?generate_distance_metrics_list.}

\item{snf_input_weights}{Nested list containing weights for when SNF is
used to merge individual input measures (see ?generate_snf_weights)}

\item{snf_domain_weights}{Nested list containing weights for when SNF is
used to merge domains (see ?generate_snf_weights)}

\item{retry_limit}{The maximum number of attempts to generate a novel row.
This function does not return matrices with identical rows. As the range of
requested possible settings tightens and the number of requested rows
increases, the risk of randomly generating a row that already exists
increases. If a new random row has matched an existing row \code{retry_limit}
number of times, the function will terminate.}

\item{cnt_dist_fns}{Parameter for the distance metrics list. A named list of
distance metric functions for continuous data.}

\item{dsc_dist_fns}{Parameter for the distance metrics list. A named list of
distance metric functions for discrete data.}

\item{ord_dist_fns}{Parameter for the distance metrics list. A named list of
distance metric functions for ordinal data.}

\item{cat_dist_fns}{Parameter for the distance metrics list. A named list of
distance metric functions for categorical data.}

\item{mix_dist_fns}{Parameter for the distance metrics list. A named list of
distance metric functions for mixed-type data.}
}
\value{
An \code{snf_config} class object.
}
\description{
\code{snf_config()} constructs an SNF config object which inherits from classes
\code{snf_config} and \code{list}. This object is used to store all settings
required to transform data stored in a \code{data_list} class object into a
space of cluster solutions by SNF. The SNF config object contains the
following components:
1. A settings data frame (inherits from \code{settings_df} and \code{data.frame}).
Data frame that stores SNF-specific hyperparameters and information
about feature selection and weighting, SNF schemes, clustering
algorithms, and distance metrics. Each row of the settings data frame
corresponds to a distinct cluster solution.
2. A clustering algorithms list (inherits from \code{clust_algs_list} and
\code{list}), which stores all clustering algorithms that the settings
data frame can point to.
3. A distance metrics list (inherits from \code{dist_metrics_list} and
\code{list}), which stores all distance metrics that the settings data
frame can point to.
4. A weights matrix (inherits from \code{weights_matrix}, \code{matrix}, and
\code{array}'), which stores the feature weights to use prior to distance
calculations. Each column of the weights matrix corresponds to a
different feature in the data list and each row corresponds to a
different row in the settings data frame.
}
\examples{
# Using just the base clustering algorithms --------------------------------
# This will just contain spectral_eigen and spectral_rot
clust_algs_list <- generate_clust_algs_list()

# Adding algorithms provided by the package --------------------------------
# This will contain the base clustering algorithms (spectral_eigen,
#  spectral_rot) as well as two pre-defined spectral clustering functions
#  that force the number of clusters to be two or five
clust_algs_list <- generate_clust_algs_list(
    "two_cluster_spectral" = spectral_two,
    "five_cluster_spectral" = spectral_five
)

# Adding your own algorithms -----------------------------------------------
# This will contain the base and user-provided clustering algorithms
my_clustering_algorithm <- function(similarity_matrix) {
    # your code that converts similarity matrix to clusters here...
    # solution_data <- list(
    #     "solution" = solution,
    #     "nclust" = number_of_clusters
    # )
    # return(solution_data)
}

# Suppress the base algorithms----------------------------------------------
# This will contain only user-provided clustering algorithms

clust_algs_list <- generate_clust_algs_list(
    "two_cluster_spectral" = spectral_two,
    "five_cluster_spectral" = spectral_five,
    disable_base = TRUE
)

}
