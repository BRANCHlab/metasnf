[{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"pre-processing","dir":"Articles","previous_headings":"Data Set-up","what":"Pre-processing","title":"A Complete Example","text":"data loaded R environment following format: data one data.frame class objects data wide form (one row per observation cluster) data frames exactly one column uniquely identifies observation data complete (missing values) wish use imputation handle missingness data, can take look imputation vignette outlines basic workflow meta clustering across multiple imputations dataset. package comes mock data frames based real data Adolescent Brain Cognitive Development study: anxiety (anxiety scores CBCL) depress (depression scores CBCL) cort_t (cortical thicknesses) cort_sa (cortical surface areas mm^2) subc_v (subcortical volumes mm^3) income (household income 1-3 scale) pubertal (pubertal status 1-5 scale) ’s cortical thickness data looks like: first column unique_id unique identifier (UID) observations data. ’s household income data: Putting everything list help us get quicker summaries data. data missing values data frames number participants. SNF can run complete data, ’ll need either use complete case analysis (removal observations missing values) impute missing values proceed clustering. mentioned , metasnf can used visualize changes clustering results across different imputations data. now, ’ll just examine simpler complete-case analysis approach reducing data frames common complete observations. can made easier using get_complete_uids function.","code":"library(metasnf)  class(cort_t) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"  dim(cort_t) #> [1] 188 152  str(cort_t[1:5, 1:5]) #> Classes 'tbl_df', 'tbl' and 'data.frame':    5 obs. of  5 variables: #>  $ unique_id: chr  \"NDAR_INV0567T2Y9\" \"NDAR_INV0GLZNC2W\" \"NDAR_INV0IZ157F8\" \"NDAR_INV0J4PYA5F\" ... #>  $ mrisdp_1 : num  2.6 2.62 2.62 2.6 2.53 #>  $ mrisdp_2 : num  2.49 2.85 2.29 2.67 2.76 #>  $ mrisdp_3 : num  2.8 2.78 2.53 2.68 2.83 #>  $ mrisdp_4 : num  2.95 2.85 2.96 2.94 2.99  cort_t[1:5, 1:5] #>          unique_id mrisdp_1 mrisdp_2 mrisdp_3 mrisdp_4 #> 1 NDAR_INV0567T2Y9    2.601    2.487    2.801    2.954 #> 2 NDAR_INV0GLZNC2W    2.619    2.851    2.784    2.846 #> 3 NDAR_INV0IZ157F8    2.621    2.295    2.530    2.961 #> 4 NDAR_INV0J4PYA5F    2.599    2.670    2.676    2.938 #> 5 NDAR_INV0OYE291Q    2.526    2.761    2.829    2.986 dim(income) #> [1] 275   2  str(income[1:5, ]) #> Classes 'tbl_df', 'tbl' and 'data.frame':    5 obs. of  2 variables: #>  $ unique_id       : chr  \"NDAR_INV0567T2Y9\" \"NDAR_INV0GLZNC2W\" \"NDAR_INV0IZ157F8\" \"NDAR_INV0J4PYA5F\" ... #>  $ household_income: num  3 NA 1 2 1  income[1:5, ] #>          unique_id household_income #> 1 NDAR_INV0567T2Y9                3 #> 2 NDAR_INV0GLZNC2W               NA #> 3 NDAR_INV0IZ157F8                1 #> 4 NDAR_INV0J4PYA5F                2 #> 5 NDAR_INV0OYE291Q                1 df_list <- list(     anxiety,     depress,     cort_t,     cort_sa,     subc_v,     income,     pubertal )  # The number of rows in each data frame: lapply(df_list, dim) #> [[1]] #> [1] 275   2 #>  #> [[2]] #> [1] 275   2 #>  #> [[3]] #> [1] 188 152 #>  #> [[4]] #> [1] 188 152 #>  #> [[5]] #> [1] 174  31 #>  #> [[6]] #> [1] 275   2 #>  #> [[7]] #> [1] 275   2  # Whether or not each data frame has missing values: lapply(df_list,     function(x) {         any(is.na(x))     } ) #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] FALSE #>  #> [[4]] #> [1] FALSE #>  #> [[5]] #> [1] FALSE #>  #> [[6]] #> [1] TRUE #>  #> [[7]] #> [1] TRUE complete_uids <- get_complete_uids(df_list, uid = \"unique_id\")  print(length(complete_uids)) #> [1] 87  # Reducing data frames to only common observations with no missing data anxiety <- anxiety[anxiety$\"unique_id\" %in% complete_uids, ] depress <- depress[depress$\"unique_id\" %in% complete_uids, ] cort_t <- cort_t[cort_t$\"unique_id\" %in% complete_uids, ] cort_sa <- cort_sa[cort_sa$\"unique_id\" %in% complete_uids, ] subc_v <- subc_v[subc_v$\"unique_id\" %in% complete_uids, ] income <- income[income$\"unique_id\" %in% complete_uids, ] pubertal <- pubertal[pubertal$\"unique_id\" %in% complete_uids, ]"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"generating-the-data-list","dir":"Articles","previous_headings":"Data Set-up","what":"Generating the data list","title":"A Complete Example","text":"data_list class structured list data frames (like one already created), additional metadata data frame. contain data frames want directly use inputs clustering. Let’s say working context anxiety depression data especially important outcomes want know can find subtypes using data still good job separating observations anxiety depression scores. ’ll start initializing data list stores input features. process removes observations complete data across provided input data frames. structure data list nested list tracking data, name data frame, domain (broader source information) data frame belongs , type feature stored data frame. Options feature type include “continuous”, “discrete”, “ordinal”, “categorical”, “mixed”. uid parameter name column data frames uniquely identifies observation. Upon data list creation, UID converted \"uid\" UIDs prefixed \"_uid\" ease management across functions package. can get summary constructed data list summary function: input data frame now 87 observations complete data. width refers number features data frame (including UID column). data_list now stores features intend using clustering. ’re interested knowing clustering solutions generate can distinguish children apart based anxiety depression scores. , ’ll also create data list storing features ’ll use evaluating cluster solutions clustering . ’ll refer target data list. Note necessary make use partition input --model measures way. ’d like target data list instead use every single feature interest clustering, can stick just using one data list.","code":"# Note that you do not need to explicitly name every single named element # (data = ..., name = ..., etc.) input_dl <- data_list(     list(         data = cort_t,         name = \"cortical_thickness\",         domain = \"neuroimaging\",         type = \"continuous\"     ),     list(         data = cort_sa,         name = \"cortical_surface_area\",         domain = \"neuroimaging\",         type = \"continuous\"     ),     list(         data = subc_v,         name = \"subcortical_volume\",         domain = \"neuroimaging\",         type = \"continuous\"     ),     list(         data = income,         name = \"household_income\",         domain = \"demographics\",         type = \"continuous\"     ),     list(         data = pubertal,         name = \"pubertal_status\",         domain = \"demographics\",         type = \"continuous\"     ),     uid = \"unique_id\" ) summary(input_dl) #>                    name       type       domain length width #> 1    cortical_thickness continuous neuroimaging     87   151 #> 2 cortical_surface_area continuous neuroimaging     87   151 #> 3    subcortical_volume continuous neuroimaging     87    30 #> 4      household_income continuous demographics     87     1 #> 5       pubertal_status continuous demographics     87     1 target_dl <- data_list(     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" )  summary(target_dl) #>        name    type    domain length width #> 1   anxiety ordinal behaviour     87     1 #> 2 depressed ordinal behaviour     87     1"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"defining-sets-of-hyperparameters-to-use-for-snf-and-clustering","dir":"Articles","previous_headings":"","what":"Defining sets of hyperparameters to use for SNF and clustering","title":"A Complete Example","text":"SNF config stores information settings functions used SNF run completed. Calling snf_config function specified number rows automatically build randomly populated snf_config class object. SNF config contains multiple parts play role determining data data list converted cluster solution.","code":"set.seed(42) my_sc <- snf_config(     dl = input_dl,     n_solutions = 20,     min_k = 20,     max_k = 50 ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  my_sc #> Settings Data Frame: #>                            1    2    3    4    5    6    7    8    9   10 #> SNF hyperparameters: #> alpha                    0.5  0.4  0.3  0.3  0.5  0.4  0.7  0.8  0.3  0.6 #> k                         29   26   44   43   29   26   36   21   29   35   #> t                         20   20   20   20   20   20   20   20   20   20   #> SNF scheme: #>                            2    1    2    1    2    2    2    3    1    3   #> Clustering functions: #>                            1    1    2    1    2    1    1    2    1    1   #> Distance functions: #> CNT                        1    1    1    1    1    1    1    1    1    1   #> DSC                        1    1    1    1    1    1    1    1    1    1   #> ORD                        1    1    1    1    1    1    1    1    1    1   #> CAT                        1    1    1    1    1    1    1    1    1    1   #> MIX                        1    1    1    1    1    1    1    1    1    1   #> Component dropout: #> cortical_thickness         ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   #> cortical_surface_area      ✖    ✔    ✖    ✔    ✔    ✔    ✔    ✔    ✔    ✔   #> subcortical_volume         ✔    ✔    ✖    ✖    ✔    ✔    ✔    ✔    ✔    ✔   #> household_income           ✖    ✔    ✔    ✔    ✔    ✔    ✔    ✖    ✔    ✖   #> pubertal_status            ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✖   #> …and settings defined to create 10 more cluster solutions. #> Distance Functions List: #> Continuous (1): #> [1] euclidean_distance #> Discrete (1): #> [1] euclidean_distance #> Ordinal (1): #> [1] euclidean_distance #> Categorical (1): #> [1] gower_distance #> Mixed (1): #> [1] gower_distance #> Clustering Functions List: #> [1] spectral_eigen #> [2] spectral_rot #> Weights Matrix: #> Weights defined for 20 cluster solutions. #> $ mrisdp_1 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  #> $ mrisdp_2 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  #> $ mrisdp_3 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  #> $ mrisdp_4 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  #> $ mrisdp_5 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  #> …and 329 more features."},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"the-settings-data-frame","dir":"Articles","previous_headings":"Defining sets of hyperparameters to use for SNF and clustering","what":"The settings data frame","title":"A Complete Example","text":"first part settings data frame: settings data frame stores information : SNF hyperparameters: alpha, k, t hyperparameters directly used SNF algorithm. SNF scheme: specific way input data gets collapsed final fused network (discussed SNF schemes vignette). Clustering functions: clustering algorithm applied final fused network produced SNF. Distance function: distance metric used converting continuous, discrete, ordinal, categorical, mixed type data intermediate distance matrices (discussed distance metrics vignette). Component dropout - Information whether particular input data frame data list included excluded corresponding SNF run (discussed SNF config vignette). underlying structure settings data frame can viewed converting settings_df class object regular data.frame class object: row settings data frame corresponds set hyperparameters can used generating cluster solution. Without specifying additional parameters, snf_config function randomly populates columns ensures generated rows identical. customization settings_df parts SNF config enable generate broader space cluster solutions data ideally get closer finding useful solution context. settings_df customization can found SNF config vignette. Setting seed prior calling snf_config() ensures random settings generated time run code.","code":"my_sc$\"settings_df\" #>                            1    2    3    4    5    6    7    8    9   10 #> SNF hyperparameters: #> alpha                    0.5  0.4  0.3  0.3  0.5  0.4  0.7  0.8  0.3  0.6 #> k                         29   26   44   43   29   26   36   21   29   35   #> t                         20   20   20   20   20   20   20   20   20   20   #> SNF scheme: #>                            2    1    2    1    2    2    2    3    1    3   #> Clustering functions: #>                            1    1    2    1    2    1    1    2    1    1   #> Distance functions: #> CNT                        1    1    1    1    1    1    1    1    1    1   #> DSC                        1    1    1    1    1    1    1    1    1    1   #> ORD                        1    1    1    1    1    1    1    1    1    1   #> CAT                        1    1    1    1    1    1    1    1    1    1   #> MIX                        1    1    1    1    1    1    1    1    1    1   #> Component dropout: #> cortical_thickness         ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   #> cortical_surface_area      ✖    ✔    ✖    ✔    ✔    ✔    ✔    ✔    ✔    ✔   #> subcortical_volume         ✔    ✔    ✖    ✖    ✔    ✔    ✔    ✔    ✔    ✔   #> household_income           ✖    ✔    ✔    ✔    ✔    ✔    ✔    ✖    ✔    ✖   #> pubertal_status            ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✖   #> …and settings defined to create 10 more cluster solutions. head(as.data.frame(my_sc$\"settings_df\")) #>   solution alpha  k  t snf_scheme clust_alg cnt_dist dsc_dist ord_dist cat_dist #> 1        1   0.5 29 20          2         1        1        1        1        1 #> 2        2   0.4 26 20          1         1        1        1        1        1 #> 3        3   0.3 44 20          2         2        1        1        1        1 #> 4        4   0.3 43 20          1         1        1        1        1        1 #> 5        5   0.5 29 20          2         2        1        1        1        1 #> 6        6   0.4 26 20          2         1        1        1        1        1 #>   mix_dist inc_cortical_thickness inc_cortical_surface_area #> 1        1                      1                         0 #> 2        1                      1                         1 #> 3        1                      1                         0 #> 4        1                      1                         1 #> 5        1                      1                         1 #> 6        1                      1                         1 #>   inc_subcortical_volume inc_household_income inc_pubertal_status #> 1                      1                    0                   1 #> 2                      1                    1                   1 #> 3                      0                    1                   1 #> 4                      0                    1                   1 #> 5                      1                    1                   1 #> 6                      1                    1                   1"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"other-parts-of-the-snf-config","dir":"Articles","previous_headings":"Defining sets of hyperparameters to use for SNF and clustering","what":"Other parts of the SNF config","title":"A Complete Example","text":"three parts SNF config object: distance functions list (dist_fns_list class object) stores distance metric functions, clustering functions list (clust_fns_list class object) stores clustering algorithm functions, weights matrix (weights_matrix) class object stores feature weights. Customizing parts explained detail separate vignettes: distance metrics clustering functions list weights matrix now, ’ll leave default values generated snf_config call.","code":"names(my_sc) #> [1] \"settings_df\"    \"dist_fns_list\"  \"clust_fns_list\" \"weights_matrix\""},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"running-snf-and-clustering","dir":"Articles","previous_headings":"","what":"Running SNF and clustering","title":"A Complete Example","text":"batch_snf() function integrates data data list using hyperparameters, functions contained SNF config. resulting structure solutions_df class object, contains index column (solution), column tracking number clusters cluster solution (nclust), column labeling meta cluster solution belongs (mc; later) columns specifying cluster subject assigned corresponding solution. Just like , 20 different cluster solutions generated! practice, may end wanting create hundreds thousands cluster solutions time. access multi-core system, batch_snf can run parallel processing enabled. See ?batch_snf parallel processing vignette information. can pull clustering results row convenient, transposed format using t() function: transposed, solutions_df class object converted t_solutions_df class object, contains columns indicating cluster observation assigned solution. Calling t() t_solutions_df class object return back original solutions_df form.","code":"sol_df <- batch_snf(input_dl, my_sc)  sol_df #> 20 cluster solutions of 87 observations: #> solution nclust mc uid_NDAR_INV0567T2Y9 uid_NDAR_INV0J4PYA5F  #>        1      5  .                    5                    2  #>        2      3  .                    3                    3  #>        3      9  .                    1                    7  #>        4      2  .                    1                    2  #>        5      8  .                    1                    6  #>        6      2  .                    1                    2  #>        7      4  .                    1                    4  #>        8      5  .                    3                    4  #>        9      3  .                    3                    3  #>       10      4  .                    2                    4  #> 10 solutions and 85 observations not shown. #> Use `print(n = ...)` to change the number of rows printed. #> Use `t()` to view compact cluster solution format. cluster_solutions <- t(sol_df)  cluster_solutions #> 20 cluster solutions of 87 observations: #>                  uid      s1    s2    s3    s4    s5    s6    s7    s8    s9  #> uid_NDAR_INV0567T2Y9       5     3     1     1     1     1     1     3     3 #> uid_NDAR_INV0J4PYA5F       2     3     7     2     6     2     4     4     3 #> uid_NDAR_INV10OMKVLE       1     2     3     1     4     2     3     1     2 #> uid_NDAR_INV15FPCW4O       1     2     5     2     5     2     3     1     2 #> uid_NDAR_INV19NB4RJK       4     2     9     1     7     2     3     2     2 #> uid_NDAR_INV1HLGR738       4     2     9     1     7     2     3     2     2 #> uid_NDAR_INV1KR0EZFU       4     2     9     1     7     2     3     2     2 #> uid_NDAR_INV1L3Y9EOP       1     2     5     2     5     2     3     1     2 #> uid_NDAR_INV1TCP5GNM       1     2     3     1     4     2     3     1     2 #> uid_NDAR_INV1ZHRDJ6B       3     1     4     1     7     1     3     5     2 #> 11 solutions and 77 observations not shown."},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"identifying-and-visualizing-meta-clusters","dir":"Articles","previous_headings":"","what":"Identifying and visualizing meta clusters","title":"A Complete Example","text":"Now access 20 different clustering solutions, ’ll need find way pick optimal one move forward additional characterization. case, plotting running stats manually solutions might reasonable way determine ones may suitable purpose. number solutions generated goes hundreds (thousands), approaches can become impractical inefficient. main approach recommend using meta clustering approach described Caruana et al., 2006. Meta clustering useful approach criteria cluster solution evaluation difficult formalize fully automate. Meta clustering consists clustering clustering solutions yield manageable number qualitatively similar meta cluster solutions representative full set solutions. Characterization representative solutions enables efficient identification maximally useful cluster solution user’s context. first step meta clustering calculate adjusted Rand index (ARI) pair cluster solutions. metric tells us similar solutions , thereby allowing us find clusters cluster solutions. can visualize resulting inter-cluster similarities heatmap. Heatmaps metasnf package constructed using ComplexHeatmap InteractiveComplexHeatmap packages Bioconductor. don’t already packages, can install following code: First, call get_matrix_order() get hierarchical clustering-based ordering rows adjusted rand indices. order can passed meta_cluster_heatmap function get clearer view existing meta clusters. clustering solutions along rows columns figure, cells intersection two solutions show similar based ARI. diagonals always red, representing maximum value 1, show self-similarity. Complete-linkage, Euclidean-distance based hierarchical clustering applied solutions obtain row ordering. also default approach used ComplexHeatmap package, backbone heatmap functions metasnf. heatmap integral identifying meta clusters created data using space parameters defined SNF config. later see customize heatmap add rich information plotted cluster solution differs various measures quality, different clustering settings, different levels separation input --model measures. First, ’ll divide heatmap meta clusters visual inspection. indices meta cluster boundaries can passed meta_cluster_heatmap function split_vector parameter. can determine vector either trial error (repeated replotting different split_vector values) using shiny_annotator function, wrapper around functionality InteractiveComplexHeatmap package. shiny app running, R console unresponsive. Clicking meta cluster cell boundaries tracking row/column indices (printed R console well displayed app) can get us following vector: demonstration shiny app can seen : Meta Cluster Identification vector can used populate meta cluster column solutions data frame well visualize meta cluster boundaries clearly. point, meta clusters yet sure differ terms structure across input --model features.","code":"sol_aris <- calc_aris(sol_df)  head(sol_aris) #>              1           2          3           4         5            6 #> 1  1.000000000 0.207544990 0.35774499  0.09280937 0.3341715 -0.007786117 #> 2  0.207544990 1.000000000 0.11544848  0.36498713 0.1039936  0.005037111 #> 3  0.357744993 0.115448475 1.00000000  0.09394738 0.9217495  0.151933583 #> 4  0.092809374 0.364987135 0.09394738  1.00000000 0.1058439 -0.010286490 #> 5  0.334171519 0.103993559 0.92174950  0.10584388 1.0000000  0.143121635 #> 6 -0.007786117 0.005037111 0.15193358 -0.01028649 0.1431216  1.000000000 #>           7            8            9           10         11        12 #> 1 0.3095424  0.984996843  0.173570236 -0.008291469 0.26446742 0.3277556 #> 2 0.2180615  0.207053236  0.742919434  0.119121651 0.15904082 0.0994686 #> 3 0.4061717  0.351467717  0.109726652  0.024347436 0.35114505 0.8702064 #> 4 0.1483474  0.092275681  0.357480715  0.049185641 0.06721613 0.1004719 #> 5 0.4326083  0.328021336  0.106684760  0.025637930 0.38456913 0.9504758 #> 6 0.1174148 -0.007273901 -0.009726332  0.086328628 0.05714430 0.1316234 #>              13         14          15         16          17        18 #> 1 -0.0009799544 0.25499764 0.437073421 0.26422634 0.041135495 0.3316678 #> 2  0.0162998361 0.82849035 0.545739614 0.11631006 0.335193515 0.1057690 #> 3  0.1328440074 0.15531558 0.140709877 0.31546400 0.310391344 0.8359247 #> 4 -0.0103687805 0.31077999 0.242348254 0.07525907 0.343463054 0.1004081 #> 5  0.1231197909 0.15255002 0.120769892 0.36587352 0.324817033 0.9036594 #> 6  0.8224548172 0.01926518 0.005752549 0.07237411 0.003771545 0.1204243 #>             19           20 #> 1 -0.008745923 -0.003030507 #> 2  0.004419775  0.213610067 #> 3  0.136774901  0.378104891 #> 4 -0.007918463  0.233172738 #> 5  0.145775893  0.408817503 #> 6  0.822162110 -0.001699513 if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # To make heatmaps with metasnf BiocManager::install(\"ComplexHeatmap\")  # To use heatmap shiny app (later in vignette) with metasnf BiocManager::install(\"InteractiveComplexHeatmap\") meta_cluster_order <- get_matrix_order(sol_aris)  # Just a vector of numbers meta_cluster_order #>  [1] 10 19  6 13  3 18  5 12  7 17 20  4 15  9  2 14  1  8 11 16 ari_hm <- meta_cluster_heatmap(     sol_aris,     order = meta_cluster_order )  ari_hm shiny_annotator(ari_hm) split_vec <- c(2, 5, 12, 17) mc_sol_df <- label_meta_clusters(     sol_df,     order = meta_cluster_order,     split_vector = split_vec )  mc_sol_df #> 20 cluster solutions of 87 observations: #> solution nclust mc uid_NDAR_INV0567T2Y9 uid_NDAR_INV0J4PYA5F  #>        1      5 E                     5                    2  #>        2      3 D                     3                    3  #>        3      9 C                     1                    7  #>        4      2 D                     1                    2  #>        5      8 C                     1                    6  #>        6      2 B                     1                    2  #>        7      4 C                     1                    4  #>        8      5 E                     3                    4  #>        9      3 D                     3                    3  #>       10      4 A                     2                    4  #> 10 solutions and 85 observations not shown. #> Use `print(n = ...)` to change the number of rows printed. #> Use `t()` to view compact cluster solution format. ari_mc_hm <- meta_cluster_heatmap(     sol_aris,     order = meta_cluster_order,     split_vector = split_vec )  ari_mc_hm"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"calculating-associations-between-cluster-solutions-and-initial-data","dir":"Articles","previous_headings":"Characterizing cluster solutions","what":"Calculating associations between cluster solutions and initial data","title":"A Complete Example","text":"start running extend_solutions function, calculate p-values representing strength association cluster membership (treated categorical feature) feature present provided data list /target_list. extend_solutions also adds summary p-value measures (min, mean, max) features present target list. function can quite slow depending large data ; can monitor progress setting verbose = TRUE. difference data list passed dl parameter one passed target_dl parameter target_dl features ones used generating p-value summary columns.","code":"ext_sol_df <- extend_solutions(     mc_sol_df,     dl = input_dl,     target_dl = target_dl )  ext_sol_df #> 20 cluster solutions, 87 observations, and p-values for 336 features. #> Cluster assignment columns: #> solution nclust mc uid_NDAR_INV0567T2Y9 uid_NDAR_INV0J4PYA5F  #>        1      5 E                     5                    2  #>        2      3 D                     3                    3  #>        3      9 C                     1                    7  #>        4      2 D                     1                    2  #>        5      8 C                     1                    6  #>        6      2 B                     1                    2  #>        7      4 C                     1                    4  #>        8      5 E                     3                    4  #>        9      3 D                     3                    3  #>       10      4 A                     2                    4  #> Association p-value columns: #> solution mrisdp_1_pval mrisdp_2_pval mrisdp_3_pval mrisdp_4_pval #>        1 4.0778e-01    8.7353e-01    1.8227e-01    6.4527e-01    #>        2 2.9963e-01    3.7253e-01    6.0899e-01    2.9392e-02    #>        3 2.4552e-01    2.2052e-01    1.1472e-01    5.2578e-01    #>        4 2.0034e-01    8.0738e-01    3.5087e-01    4.7769e-01    #>        5 1.8555e-01    4.5421e-01    1.0940e-01    4.5550e-01    #>        6 7.9908e-01    3.7914e-02    4.8240e-01    7.0521e-01    #>        7 4.7354e-01    3.7364e-01    1.0889e-01    8.1730e-01    #>        8 4.0837e-01    6.6968e-01    1.6713e-01    6.7935e-01    #>        9 2.5205e-01    3.4546e-01    3.6226e-01    1.4636e-02    #>       10 5.2398e-01    4.1312e-01    2.9576e-01    1.9681e-01    #> Summary p-value columns: #> solution min_pval  mean_pval max_pval   #>        1 7.263e-01 7.304e-01 7.344e-01  #>        2 3.238e-01 4.941e-01 6.644e-01  #>        3 3.961e-01 5.389e-01 6.817e-01  #>        4 4.844e-01 6.204e-01 7.564e-01  #>        5 2.257e-01 5.076e-01 7.895e-01  #>        6 1.325e-01 1.946e-01 2.566e-01  #>        7 1.230e-01 2.031e-01 2.832e-01  #>        8 7.112e-01 7.380e-01 7.648e-01  #>        9 5.110e-01 6.856e-01 8.602e-01  #>       10 1.034e-02 1.833e-02 2.631e-02  #> Summaries calculated from 2 features. Use `summary_features(x)` to see them. #> 10 solutions and 332 features not shown. #> Use `print(n = ...)` to change the number of rows printed. #> Use `t()` to view compact cluster solution format. # No features are used to calculate summary p-values ext_sol_df_no_summaries <- extend_solutions(     mc_sol_df,     dl = c(input_dl, target_dl) )  # Every features are used to calculate summary p-values ext_sol_df_all_summaries <- extend_solutions(     mc_sol_df,     target_dl = c(input_dl, target_dl) )"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"visualizing-feature-associations-with-meta-clustering-results","dir":"Articles","previous_headings":"Characterizing cluster solutions","what":"Visualizing feature associations with meta clustering results","title":"A Complete Example","text":"ext_sol_df created can converted standard data frame passed meta_cluster_heatmap function easily visualize level separation features cluster solutions. meta_cluster_heatmap function wraps around generic similarity_matrix_heatmap function package, wrapper around ComplexHeatmap::Heatmap(). Consequently, parameter can used ComplexHeatmap::Heatmap() package can used . also makes documentation ComplexHeatmap package one best places learn can done customizing heatmaps. data annotations don’t necessarily need come functions metasnf. example, highlight solutions two specific observations happened cluster together, can easily add information another annotation. converting ext_solutions_df class object data frame parameter keep_attributes = TRUE, resulting data frame retain p-value information ext_solutions_df side things, cluster assignment columns solutions_df side things, settings_df weights_matrix columns embedded original SNF config. , can use dplyr::mutate() create new column flagging two observations co-cluster.","code":"annotated_ari_hm <- meta_cluster_heatmap(     sol_aris,     order = meta_cluster_order,     split_vector = split_vec,     data = as.data.frame(ext_sol_df),     top_hm = list(         \"Depression p-value\" = \"cbcl_depress_r_pval\",         \"Anxiety p-value\" = \"cbcl_anxiety_r_pval\",         \"Overall outcomes p-value\" = \"mean_pval\"     ),     bottom_bar = list(         \"Number of Clusters\" = \"nclust\"     ),     annotation_colours = list(         \"Depression p-value\" = colour_scale(             ext_sol_df$\"cbcl_depress_r_pval\",             min_colour = \"purple\",             max_colour = \"black\"         ),         \"Anxiety p-value\" = colour_scale(             ext_sol_df$\"cbcl_anxiety_r_pval\",             min_colour = \"green\",             max_colour = \"black\"         ),         \"Overall outcomes p-value\" = colour_scale(             ext_sol_df$\"mean_pval\",             min_colour = \"lightblue\",             max_colour = \"black\"         )     ) ) annotation_data <- ext_sol_df |>     as.data.frame(keep_attributes = TRUE) |>     dplyr::mutate(         key_subjects_cluster_together = dplyr::case_when(             uid_NDAR_INVLF3TNDUZ == uid_NDAR_INVLDQH8ATK ~ TRUE,             TRUE ~ FALSE         )     )  annotated_ari_hm2 <- meta_cluster_heatmap(     sol_aris,     order = meta_cluster_order,     split_vector = split_vec,     data = annotation_data,     top_hm = list(         \"Depression p-value\" = \"cbcl_depress_r_pval\",         \"Anxiety p-value\" = \"cbcl_anxiety_r_pval\",         \"Key Subjects Clustered Together\" = \"key_subjects_cluster_together\"     ),     bottom_bar = list(         \"Number of Clusters\" = \"nclust\"     ),     annotation_colours = list(         \"Depression p-value\" = colour_scale(             ext_sol_df$\"cbcl_depress_r_pval\",             min_colour = \"purple\",             max_colour = \"black\"         ),         \"Anxiety p-value\" = colour_scale(             ext_sol_df$\"cbcl_anxiety_r_pval\",             min_colour = \"purple\",             max_colour = \"black\"         ),         \"Key Subjects Clustered Together\" = c(             \"TRUE\" = \"blue\",             \"FALSE\" = \"black\"         )     ) )"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"characterizing-individual-solutions-representative-of-each-meta-cluster","dir":"Articles","previous_headings":"Characterizing cluster solutions","what":"Characterizing individual solutions representative of each meta cluster","title":"A Complete Example","text":"Now ’ve visually delineated meta clusters, can get quick summary sort separation exists across input held features taking closer look one representative cluster solution meta cluster. can achieved get_representative_solutions function, extracts one cluster solution per meta cluster based highest average ARI solutions meta cluster. neg_log_pval_thresh sets threshold negative log p-values displayed. value 5, p-value smaller 1e-5 truncated 1e-5. plot bit unwieldy plot given many neuroimaging ROIs present. Let’s take cortical thickness surface area measures make plot little clearer. ’ll also able read feature measures clearly dial number features plotted back bit, well. Note Manhattan plot automatically uses vertical line separate features data_list argument target_list. Vertical boundaries can controlled xints parameter.","code":"rep_solutions <- get_representative_solutions(sol_aris, ext_sol_df)  mc_manhattan <- mc_manhattan_plot(     rep_solutions,     dl = input_dl,     target_dl = target_dl,     hide_x_labels = TRUE,     point_size = 2,     text_size = 12,     threshold = 0.05,     neg_log_pval_thresh = 5 ) rep_solutions_no_cort <- dplyr::select(rep_solutions, -dplyr::contains(\"mrisdp\"))  mc_manhattan2 <- mc_manhattan_plot(     ext_sol_df = rep_solutions_no_cort,     dl = input_dl,     target_dl = target_dl,     point_size = 4,     threshold = 0.01,     text_size = 12,     domain_colours = c(         \"neuroimaging\" = \"cadetblue\",         \"demographics\" = \"purple\",         \"behaviour\" = \"firebrick\"     ) )"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"relating-results-to-metasnf-hyperparameters","dir":"Articles","previous_headings":"Characterizing cluster solutions","what":"Relating results to metasnf hyperparameters","title":"A Complete Example","text":"see something interesting heatmap, may curious know corresponds settings settings data frame. certainly stack setting ARI heatmap annotations, may bit cumbersome given many settings . Another option start taking first look entire settings_df, sorted meta cluster results, settings_df_heatmap function. settings can passed either snf_config settings_df class object. heatmap rescales columns settings_df maximum value 1. purpose re-ordering settings data frame way see associations exist certain settings values pairwise cluster solution similarities. particular important settings, can simply add adjusted rand index heatmap annotations. Recall solutions_df class (, extension, ext_solutions_df class contains solutions_df object attribute) contain SNF config attribute, data manipulation needed add setting heatmap annotation. Give try code :","code":"config_hm <- config_heatmap(     my_sc,     order = meta_cluster_order,     hide_fixed = TRUE ) annotation_data <- ext_sol_df |>     as.data.frame(keep_attributes = TRUE) |>     dplyr::mutate(         key_subjects_cluster_together = dplyr::case_when(             uid_NDAR_INVLF3TNDUZ == uid_NDAR_INVLDQH8ATK ~ TRUE,             TRUE ~ FALSE         )     )  annotation_data$\"clust_alg\" <- as.factor(annotation_data$\"clust_alg\")  annotated_ari_hm3 <- meta_cluster_heatmap(     sol_aris,     order = meta_cluster_order,     split_vector = split_vec,     data = annotation_data,     top_hm = list(         \"Depression p-value\" = \"cbcl_depress_r_pval\",         \"Anxiety p-value\" = \"cbcl_anxiety_r_pval\",         \"Key Subjects Clustered Together\" = \"key_subjects_cluster_together\"     ),     left_hm = list(         \"Clustering Algorithm\" = \"clust_alg\" # from the original settings     ),     bottom_bar = list(         \"Number of Clusters\" = \"nclust\" # also from the original settings     ),     annotation_colours = list(         \"Depression p-value\" = colour_scale(             ext_sol_df$\"cbcl_depress_r_pval\",             min_colour = \"purple\",             max_colour = \"black\"         ),         \"Anxiety p-value\" = colour_scale(             ext_sol_df$\"cbcl_anxiety_r_pval\",             min_colour = \"purple\",             max_colour = \"black\"         ),         \"Key Subjects Clustered Together\" = c(             \"TRUE\" = \"blue\",             \"FALSE\" = \"black\"         )     ) )  annotated_ari_hm3"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"quality-measures","dir":"Articles","previous_headings":"Characterizing cluster solutions","what":"Quality measures","title":"A Complete Example","text":"Quality metrics another useful heuristic goodness cluster don’t require contextualization results domain may used . metasnf enables measures silhouette scores, Dunn indices, Davies-Bouldin indices. calculate values, ’ll need cluster results also final fused network (similarity matrices produced SNF) clusters came . similarity matrices can collected batch_snf using return_sim_mats parameter: Now, solutions data frame contains non-empty list similarity matrices one attributes. similarity matrices final SNF-derived networks SNF run. Using attribute, can calculate mentioned quality metrics: first function wrapper around cluster::silhouette second third come clv package. clv isn’t set mandatory part installation, ’ll ned install calculate two metrics. original documentation functions can helpful interpreting working : cluster::silhouette documentation clv::clv.Dunn documentation clv::clv.Davies.Bouldin documentation","code":"sol_df <- batch_snf(dl = input_dl, sc = my_sc, return_sim_mats = TRUE) silhouette_scores <- calculate_silhouettes(sol_df) dunn_indices <- calculate_dunn_indices(sol_df) db_indices <- calculate_db_indices(sol_df)"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"stability-measures","dir":"Articles","previous_headings":"Characterizing cluster solutions","what":"Stability measures","title":"A Complete Example","text":"metasnf offers tools evaluate two different measures stability: Pairwise adjusted Rand indices (across resamplings clustering, average, similar every pair solutions according adjusted Rand index?) Fraction clustered together (average fraction times observations clustered together full results clustered together resampled results?) can learn running stability calculations stability coclustering vignette.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"evaluating-separation-across-target-features-of-importance","dir":"Articles","previous_headings":"Characterizing cluster solutions","what":"Evaluating separation across “target features” of importance","title":"A Complete Example","text":"can specify metric objective function may tell useful clustering solution purposes advance, makes cluster selection process much less arbitrary. many ways go , package offers one way target_list. target_list contains data frames can examine clustering results linear regression (continuous data), ordinal regression (ordinal data), Chi-squared test (categorical data). Just like generating initial data_list, need specify name column provided data frames originally used uniquely identify different observations uid parameter. next extend sol_df p-values regressing target_list features onto generated clusters. heatmap visualizing : p-values hold real meaning traditional hypothesis-testing context, reasonable proxies magnitude effect size / separation clusters across features question. , just tool find clustering solutions well-separated according outcome measures ’ve specified. Finding cluster solution like similar supervised learning approach, optimization method just random sampling. risk overfitting data approach considerable, make sure rigorous external validation reporting findings. recommend using label propagation (provided SNFtool package groupPredict function) validation: take top clustering solutions found training data, assign predicted clusters held test observations, characterize test observations see well clustering solution seemed worked.","code":"ext_sol_df <- extend_solutions(sol_df, target_dl) pval_hm <- pval_heatmap(ext_sol_df, order = meta_cluster_order)  pval_hm"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"validating-results-with-label-propagation","dir":"Articles","previous_headings":"","what":"Validating results with label propagation","title":"A Complete Example","text":"’s quick step complete procedure, beginning, label propagation validate findings. metasnf package comes equipped function train_test_assign provide random splitting . , wanted, see clustering solutions propagate test set, mean reusing test set removing protection overfitting conferred procedure. ’s ! questions, comments, suggestions, bugs, etc. feel free post issue https://github.com/BRANCHlab/metasnf.","code":"# All the observations present in all data frames with no NAs all_observations <- uids(input_dl)  all_observations #>  [1] \"uid_NDAR_INV0567T2Y9\" \"uid_NDAR_INV0J4PYA5F\" \"uid_NDAR_INV10OMKVLE\" #>  [4] \"uid_NDAR_INV15FPCW4O\" \"uid_NDAR_INV19NB4RJK\" \"uid_NDAR_INV1HLGR738\" #>  [7] \"uid_NDAR_INV1KR0EZFU\" \"uid_NDAR_INV1L3Y9EOP\" \"uid_NDAR_INV1TCP5GNM\" #> [10] \"uid_NDAR_INV1ZHRDJ6B\" \"uid_NDAR_INV2EJ41YSZ\" \"uid_NDAR_INV2PK6C85M\" #> [13] \"uid_NDAR_INV2XO1PHCT\" \"uid_NDAR_INV3CU5Y9BZ\" \"uid_NDAR_INV3MBSY16V\" #> [16] \"uid_NDAR_INV3N0QFDLO\" \"uid_NDAR_INV3N1476QE\" \"uid_NDAR_INV3Y027GVK\" #> [19] \"uid_NDAR_INV40Z7GVYJ\" \"uid_NDAR_INV49UPOXHJ\" \"uid_NDAR_INV4N5XGZE8\" #> [22] \"uid_NDAR_INV4OWRB536\" \"uid_NDAR_INV4X80QUZY\" \"uid_NDAR_INV50JL2RXP\" #> [25] \"uid_NDAR_INV5BRNFYQC\" \"uid_NDAR_INV64F9GH0V\" \"uid_NDAR_INV6RVH5KZS\" #> [28] \"uid_NDAR_INV6WBQCY2I\" \"uid_NDAR_INV752EFAQ0\" \"uid_NDAR_INV7O30HFV6\" #> [31] \"uid_NDAR_INV7QO93CJH\" \"uid_NDAR_INV84G9ONXP\" \"uid_NDAR_INV8EHP6W1U\" #> [34] \"uid_NDAR_INV8MJFUKIW\" \"uid_NDAR_INV8WGK6ECZ\" \"uid_NDAR_INV94AKNGMJ\" #> [37] \"uid_NDAR_INV9GAZYV8Q\" \"uid_NDAR_INV9IREH05N\" \"uid_NDAR_INV9KC3GVMU\" #> [40] \"uid_NDAR_INV9NFKZ82A\" \"uid_NDAR_INV9S1BMDE5\" \"uid_NDAR_INVA68OU0YK\" #> [43] \"uid_NDAR_INVADCYZ38B\" \"uid_NDAR_INVAYM8WTIN\" \"uid_NDAR_INVB8O4LAQV\" #> [46] \"uid_NDAR_INVBAP80W1R\" \"uid_NDAR_INVBTRW1NUK\" \"uid_NDAR_INVCIXE0496\" #> [49] \"uid_NDAR_INVCYBSZD0N\" \"uid_NDAR_INVD37Z9N61\" \"uid_NDAR_INVD61ZUBC7\" #> [52] \"uid_NDAR_INVDXKG2UBF\" \"uid_NDAR_INVEQ1OBNSM\" \"uid_NDAR_INVEQ4D2M8P\" #> [55] \"uid_NDAR_INVEVBDLSTM\" \"uid_NDAR_INVEY0FMJDI\" \"uid_NDAR_INVFLU0YINE\" #> [58] \"uid_NDAR_INVFNZPWMSI\" \"uid_NDAR_INVFY76P8AJ\" \"uid_NDAR_INVG3T0PXW6\" #> [61] \"uid_NDAR_INVG5CI7XK4\" \"uid_NDAR_INVG8BRLSO9\" \"uid_NDAR_INVGDBYXWV4\" #> [64] \"uid_NDAR_INVH1KV76BQ\" \"uid_NDAR_INVH3P4T8C2\" \"uid_NDAR_INVH4FZC2XB\" #> [67] \"uid_NDAR_INVH8QN7WLT\" \"uid_NDAR_INVHERPS382\" \"uid_NDAR_INVHEUWA52I\" #> [70] \"uid_NDAR_INVHM3XS68O\" \"uid_NDAR_INVI1RKT9MX\" \"uid_NDAR_INVIZFV08RU\" #> [73] \"uid_NDAR_INVJ574KX6A\" \"uid_NDAR_INVK3FL5CP2\" \"uid_NDAR_INVK9ULDQA2\" #> [76] \"uid_NDAR_INVKB0CYO1H\" \"uid_NDAR_INVKHWS26UN\" \"uid_NDAR_INVKTUMPLXY\" #> [79] \"uid_NDAR_INVKYH529RD\" \"uid_NDAR_INVL4NIUZYF\" \"uid_NDAR_INVLDQH8ATK\" #> [82] \"uid_NDAR_INVLF3TNDUZ\" \"uid_NDAR_INVLI58ERQC\" \"uid_NDAR_INVLIQRM8KC\" #> [85] \"uid_NDAR_INVLXDP1SWT\" \"uid_NDAR_INVMBOZVEA4\" \"uid_NDAR_INVMIWOSHJN\"  # Remove the \"uid_\" prefix to allow merges with the original data all_observations <- gsub(\"uid_\", \"\", all_observations)  # data frame assigning 80% of observations to train and 20% to test assigned_splits <- train_test_assign(train_frac = 0.8, uids = all_observations)  # Pulling the training and testing observations specifically train_obs <- assigned_splits$\"train\" test_obs <- assigned_splits$\"test\"  # Partition a training set train_cort_t <- cort_t[cort_t$\"unique_id\" %in% train_obs, ] train_cort_sa <- cort_sa[cort_sa$\"unique_id\" %in% train_obs, ] train_subc_v <- subc_v[subc_v$\"unique_id\" %in% train_obs, ] train_income <- income[income$\"unique_id\" %in% train_obs, ] train_pubertal <- pubertal[pubertal$\"unique_id\" %in% train_obs, ] train_anxiety <- anxiety[anxiety$\"unique_id\" %in% train_obs, ] train_depress <- depress[depress$\"unique_id\" %in% train_obs, ]  # Partition a test set test_cort_t <- cort_t[cort_t$\"unique_id\" %in% test_obs, ] test_cort_sa <- cort_sa[cort_sa$\"unique_id\" %in% test_obs, ] test_subc_v <- subc_v[subc_v$\"unique_id\" %in% test_obs, ] test_income <- income[income$\"unique_id\" %in% test_obs, ] test_pubertal <- pubertal[pubertal$\"unique_id\" %in% test_obs, ] test_anxiety <- anxiety[anxiety$\"unique_id\" %in% test_obs, ] test_depress <- depress[depress$\"unique_id\" %in% test_obs, ]  # A data list with just training observations train_dl <- data_list(     list(train_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(train_cort_sa, \"cortical_sa\", \"neuroimaging\", \"continuous\"),     list(train_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(train_income, \"household_income\", \"demographics\", \"continuous\"),     list(train_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"unique_id\" )  # A data list with training and testing observations full_dl <- data_list(     list(cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(income, \"household_income\", \"demographics\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"unique_id\" )  # Construct the target lists train_target_dl <- data_list(     list(train_anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(train_depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" ) # Find a clustering solution in your training data set.seed(42) my_sc <- snf_config(     train_dl,     n_solutions = 5,     min_k = 10,     max_k = 30 )  train_sol_df <- batch_snf(     train_dl,     my_sc )  ext_sol_df <- extend_solutions(     train_sol_df,     train_target_dl ) # The first row had the lowest minimum p-value across our outcomes lowest_min_pval <- min(ext_sol_df$\"min_pval\") which(ext_sol_df$\"min_pval\" == lowest_min_pval) #> [1] 1  # Keep track of your top solution top_row <- ext_sol_df[1, ]  # Use the solutions data frame from the training observations and the data list from # the training and testing observations to propagate labels to the test observations propagated_labels <- label_propagate(top_row, full_dl)  head(propagated_labels) #>                    uid     group 1 #> 1 uid_NDAR_INV0567T2Y9 clustered 1 #> 2 uid_NDAR_INV0J4PYA5F clustered 2 #> 3 uid_NDAR_INV10OMKVLE clustered 1 #> 4 uid_NDAR_INV15FPCW4O clustered 1 #> 5 uid_NDAR_INV19NB4RJK clustered 1 #> 6 uid_NDAR_INV1HLGR738 clustered 1 tail(propagated_labels) #>                     uid       group 1 #> 82 uid_NDAR_INVG5CI7XK4 unclustered 1 #> 83 uid_NDAR_INVGDBYXWV4 unclustered 1 #> 84 uid_NDAR_INVHEUWA52I unclustered 2 #> 85 uid_NDAR_INVK9ULDQA2 unclustered 1 #> 86 uid_NDAR_INVKYH529RD unclustered 1 #> 87 uid_NDAR_INVLDQH8ATK unclustered 1 propagated_labels_all <- label_propagate(     ext_sol_df,     full_dl )"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"A Complete Example","text":"Caruana, Rich, Mohamed Elhawary, Nam Nguyen, Casey Smith. 2006. “Meta Clustering.” Sixth International Conference Data Mining (ICDM’06), 107–18. https://doi.org/10.1109/ICDM.2006.103. Wang, Bo, Aziz M. Mezlini, Feyyaz Demir, Marc Fiume, Zhuowen Tu, Michael Brudno, Benjamin Haibe-Kains, Anna Goldenberg. 2014. “Similarity Network Fusion Aggregating Data Types Genomic Scale.” Nature Methods 11 (3): 333–37. https://doi.org/10.1038/nmeth.2810.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"load-the-package","dir":"Articles","previous_headings":"The original SNF example","what":"1. Load the package","title":"A Simple Example","text":"","code":"library(SNFtool)"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"set-snf-hyperparameters","dir":"Articles","previous_headings":"The original SNF example","what":"2. Set SNF hyperparameters","title":"A Simple Example","text":"Three hyperparameters introduced example: K, alpha (also referred sigma eta different documentations), T. can learn significance hyperparameters original SNF paper (see references).","code":"K <- 20 alpha <- 0.5 T <- 20"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"load-the-data","dir":"Articles","previous_headings":"The original SNF example","what":"3. Load the data","title":"A Simple Example","text":"SNFtool package provides two mock data frames titled Data1 Data2 example. Data1 contains gene expression values two genes 200 patients. Data2 similarly contains methylation data two genes 200 patients. ’s mock data looks like: “ground truth” data generated patients 1 100 drawn one distribution patients 101 200 drawn another. don’t access kind knowledge real data, .","code":"data(Data1) data(Data2) library(ComplexHeatmap)  # gene expression data gene_expression_hm <- Heatmap(     as.matrix(Data1),     cluster_rows = FALSE,     cluster_columns = FALSE,     show_row_names = FALSE,     show_column_names = FALSE,     heatmap_legend_param = list(         title = \"Gene Expression\"     ) )  gene_expression_hm # methylation data methylation_hm <- Heatmap(     as.matrix(Data2),     cluster_rows = FALSE,     cluster_columns = FALSE,     show_row_names = FALSE,     show_column_names = FALSE,     heatmap_legend_param = list(         title = \"Methylation\"     ) )  methylation_hm true_label <- c(matrix(1, 100, 1), matrix(2, 100, 1))"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"generate-similarity-matrices-for-each-data-source","dir":"Articles","previous_headings":"The original SNF example","what":"4. Generate similarity matrices for each data source","title":"A Simple Example","text":"consider two gene expression features Data1 contain information one broader gene expression source two methylation features Data2 contain information broader methylation source. next step determine, sources , similar patients . done first determining dissimilar patients source, converting dissimilarity information similarity information. calculate dissimilarity, ’ll use Euclidean distance. , can use affinityMatrix function provided SNFtool convert distance matrices similarity matrices. similarity matrices can passed SNF function integrate single similarity matrix describes similar patients across gene expression methylation data.","code":"distance_matrix_1 <- as.matrix(dist(Data1, method = \"euclidean\")) distance_matrix_2 <- as.matrix(dist(Data2, method = \"euclidean\")) similarity_matrix_1 <- affinityMatrix(distance_matrix_1, K, alpha) similarity_matrix_2 <- affinityMatrix(distance_matrix_2, K, alpha)"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"integrate-similarity-matrices-with-snf","dir":"Articles","previous_headings":"The original SNF example","what":"5. Integrate similarity matrices with SNF","title":"A Simple Example","text":"","code":"fused_network <- SNF(list(similarity_matrix_1, similarity_matrix_2), K, T)"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"find-clusters-in-the-integrated-matrix","dir":"Articles","previous_headings":"The original SNF example","what":"6. Find clusters in the integrated matrix","title":"A Simple Example","text":"think 2 clusters data, can use spectral clustering find 2 clusters fused network. Sure enough, able obtain correct cluster label patients.","code":"number_of_clusters <- 2 assigned_clusters <- spectralClustering(fused_network, number_of_clusters) all(true_label == assigned_clusters) #> [1] TRUE"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"the-same-example-using-metasnf","dir":"Articles","previous_headings":"","what":"The same example using metasnf","title":"A Simple Example","text":"purpose metasnf primarily aid users explore wide possible range solutions. Recreating example provided original SNF function extremely restricted usage package, reveal, broadly, metasnf works.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"load-the-package-1","dir":"Articles","previous_headings":"The same example using metasnf","what":"1. Load the package","title":"A Simple Example","text":"","code":"library(metasnf)"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"store-the-data-in-a-data-list","dir":"Articles","previous_headings":"The same example using metasnf","what":"2. Store the data in a data list","title":"A Simple Example","text":"Data used clustering stored data_list class object. data list made passing data frame data_list() function, alongside information name data frame, broader source (referred package “domain”) information data frame comes , type features stored inside data frame (can continuous, discrete, ordinal, categorical, mixed). data_list() function also requires specify column contains information ID patients. case, information isn’t , ’ll add . added IDs span 101 onwards (rather 1 onwards) purely convenience: automatic sorting patient names won’t result patient 199 placed patient 2. entries lists contain following elements: data frame user-determined name data frame (character) user-determined name domain information data frame representative (character) type feature stored data frame (character; options continuous, discrete, ordinal, categorical, mixed) Finally, ’s argument uid (column name currently uniquely identifies observations data). process formatting provided data frames, function: Converts UID data “uid” Prefixing UID values string “uid_” help cluster result characterization Removes observations contain missing values Removes observations present data frames Arranges observations data frames UID avoid losing considerable amount data data list generation, consider using imputation first. mice package R helpful . Also note need name every element explicitly; long provide objects within list correct order (data, name, domain, type), ’ll get correct result:","code":"# Add \"patient_id\" column to each data frame Data1$\"patient_id\" <- 101:(nrow(Data1) + 100) Data2$\"patient_id\" <- 101:(nrow(Data2) + 100)  my_dl <- data_list(     list(         data = Data1,         name = \"genes_1_and_2_exp\",         domain = \"gene_expression\",         type = \"continuous\"     ),     list(         data = Data2,         name = \"genes_1_and_2_meth\",         domain = \"gene_methylation\",         type = \"continuous\"     ),     uid = \"patient_id\" ) # Compactly: my_dl <- data_list(     list(Data1, \"genes_1_and_2_exp\", \"gene_expression\", \"continuous\"),     list(Data2, \"genes_1_and_2_meth\", \"gene_methylation\", \"continuous\"),     uid = \"patient_id\" )"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"store-all-the-settings-of-the-desired-snf-runs-in-an-snf-config","dir":"Articles","previous_headings":"The same example using metasnf","what":"3. Store all the settings of the desired SNF runs in an SNF config","title":"A Simple Example","text":"SNF config object storing information required convert raw data final cluster solution. composed multiple parts, including settings data frame tracks one set SNF hyperparameters per row, weights matrix tracks one set feature weights per row, distance functions list stores functions uesd convert raw data intermediate distance matrices, clustering algorithms list stores functions used convert final SNF-fused networks cluster solutions. varying elements SNF config, can access broader space possible solutions hopefully get closer something useful possible context. case, ’re going create single cluster solution using process outlined original SNFtool example . full explanation parameters snf_config() function can found SNF config vignette. can clearly examine settings data frame within config follows: columns settings_df-class object account following: solution: way keep track different rows alpha, k, t: hyperparameters seen snf_scheme: “scheme” used transform inputs final fused network. ’ll discuss detail next vignette. clust_alg: clustering function clust_fns_list applied final fused network. default, clust_fns_list index 1 referencing spectral clustering paired eigen-gap heuristic determining number clusters, index 2 references spectral clustering paired rotation cost heuristic instead. Columns ending “dist”: distance metric function dist_fns_list used. default, dist_fns_list index 1 referencing simple Euclidean distance continuous, discrete, ordinal data, Gower’s distance categorical mixed data. Columns starting “inc”: Component dropout - whether corresponding data frame included round SNF. detailed descriptions columns can also found SNF config vignette.","code":"sc <- snf_config(     dl = my_dl,     n_solutions = 1,     alpha_values = 0.5,     k_values = 20,     t_values = 20,     dropout_dist = \"none\",     possible_snf_schemes = 1 ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  sc #> Settings Data Frame: #>                         1 #> SNF hyperparameters: #> alpha                 0.5 #> k                      20   #> t                      20   #> SNF scheme: #>                         1   #> Clustering functions: #>                         2   #> Distance functions: #> CNT                     1   #> DSC                     1   #> ORD                     1   #> CAT                     1   #> MIX                     1   #> Component dropout: #> genes_1_and_2_exp       ✔   #> genes_1_and_2_meth      ✔   #> Distance Functions List: #> Continuous (1): #> [1] euclidean_distance #> Discrete (1): #> [1] euclidean_distance #> Ordinal (1): #> [1] euclidean_distance #> Categorical (1): #> [1] gower_distance #> Mixed (1): #> [1] gower_distance #> Clustering Functions List: #> [1] spectral_eigen #> [2] spectral_rot #> Weights Matrix: #> Weights defined for 1 cluster solutions. #> $ V1  1 #> $ V2  1 #> $ V3  1 #> $ V4  1 as.data.frame(sc$\"settings_df\") #>   solution alpha  k  t snf_scheme clust_alg cnt_dist dsc_dist ord_dist cat_dist #> 1        1   0.5 20 20          1         2        1        1        1        1 #>   mix_dist inc_genes_1_and_2_exp inc_genes_1_and_2_meth #> 1        1                     1                      1"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"run-snf","dir":"Articles","previous_headings":"The same example using metasnf","what":"4. Run SNF","title":"A Simple Example","text":"batch_snf function use hyperparameters functions stored SNF config create cluster solutions data_list. solutions data frame (solutions_df class object) data frame contains one cluster solution per row. essentially augmented , new columns added included patient. row, new columns show cluster patient ended . friendlier format clustering results can obtained: cluster results exactly original SNF example: Running batch_snf return_sim_mats parameter set TRUE let us also take look final fused networks SNF rather just results applying spectral clustering networks: fused network obtained approach also one obtained original example: now ’ve completed basic example using package. subsequent vignettes provide guidance can leverage SNF config access wide range clustering solutions data, can use tools package pick best solution purposes, validate generalizability results. Go give less simple example try!","code":"sol_df <- batch_snf(dl = my_dl, sc = sc)  sol_df #> 1 cluster solution of 200 observations: #> solution nclust mc uid_101 uid_102 uid_103 uid_104 uid_105 uid_106 uid_107  #>        1      2  .       1       1       1       1       1       1       1  #> 193 observations not shown. #> Use `print(n = ...)` to change the number of rows printed. #> Use `t()` to view compact cluster solution format. cluster_solution <- t(sol_df)  cluster_solution #> 1 cluster solution of 200 observations: #>     uid      s1  #> uid_101       1 #> uid_102       1 #> uid_103       1 #> uid_104       1 #> uid_105       1 #> uid_106       1 #> uid_107       1 #> uid_108       1 #> uid_109       1 #> uid_110       1 #> 190 observations not shown. all.equal(cluster_solution$\"s1\", true_label) #> [1] TRUE sol_df <- batch_snf(     dl = my_dl,     sc,     return_sim_mats = TRUE )  # The first (and only, in this case) final fused network similarity_matrix <- sim_mats_list(sol_df)[[1]] max(similarity_matrix - fused_network) #> [1] 0"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"A Simple Example","text":"Wang, Bo, Aziz M. Mezlini, Feyyaz Demir, Marc Fiume, Zhuowen Tu, Michael Brudno, Benjamin Haibe-Kains, Anna Goldenberg. 2014. “Similarity Network Fusion Aggregating Data Types Genomic Scale.” Nature Methods 11 (3): 333–37. https://doi.org/10.1038/nmeth.2810.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/clustering_algorithms.html","id":"clustering-algorithms","dir":"Articles","previous_headings":"","what":"Clustering Algorithms","title":"Clustering Algorithms","text":"SNF produces single similarity matrix meant describe similar observations across provided input features. Dividing similarity matrix subtypes requires can done using clustering algorithms. Within metasnf package, clustering done default using spectral clustering algorithm (implemented original SNFtool package). code goes default clustering looks like.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/clustering_algorithms.html","id":"default-clustering","dir":"Articles","previous_headings":"Clustering Algorithms","what":"Default clustering","title":"Clustering Algorithms","text":"clustering functions can used stored within clustering functions list (clust_fns_list object) config, reference functions used particular solution stored settings data frame (settings_df object) config: “1” corresponds spectral clustering using eigen-gap heuristic determine number clusters, “2” corresponds spectral clustering using rotation cost heuristic determine number clusters. can find information running ?snf_config.","code":"# Load the package library(metasnf)  dl <- data_list(     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(income, \"household_income\", \"demographics\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" ) #> ℹ 188 observations dropped due to incomplete data.  set.seed(42) sc <- snf_config(     dl = dl,     n_solutions = 5,     max_k = 40 ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults. # Available functions sc$\"clust_fns_list\" #> [1] spectral_eigen #> [2] spectral_rot  # Which functions will be used sc$\"settings_df\"$\"clust_alg\" #> [1] 1 1 2 1 2"},{"path":"https://branchlab.github.io/metasnf/articles/clustering_algorithms.html","id":"other-built-in-clustering-options","dir":"Articles","previous_headings":"Clustering Algorithms","what":"Other built-in clustering options","title":"Clustering Algorithms","text":"Currently, available clustering algorithms : spectral_eigen spectral_rot spectral_two spectral_three spectral_four spectral_five spectral_six spectral_seven spectral_eight first two defaults, remaining ones specifically use 2, 3, 4, … number clusters rather whatever calculated separate heuristic function. make use alternative algorithms, ’ll need customize clust_fns_list generated call snf_config(). ’s looks like: looking clustering functions values settings part SNF config, can see random fluctuation 1 2: settings segment contains pointers clustering function use, clustering functions list stores actual functions. satisfied clustering functions ’ve specified, can try typical call batch_snf():","code":"# The default list: sc <- snf_config(     dl = dl,     n_solutions = 5,     use_default_clust_fns = TRUE ) #> ℹ No distance functions specified. Using defaults.  sc$\"clust_fns_list\" #> [1] spectral_eigen #> [2] spectral_rot  # Adding algorithms provided by the package sc <- snf_config(     dl = dl,     n_solutions = 5,     clust_fns = list(         \"two_cluster_spectral\" = spectral_two,         \"five_cluster_spectral\" = spectral_five     ),     use_default_clust_fns = TRUE ) #> ℹ No distance functions specified. Using defaults.  # Note that this one has the default algorithms as well as the newly added ones sc$\"clust_fns_list\" #> [1] spectral_eigen #> [2] spectral_rot #> [3] two_cluster_spectral #> [4] five_cluster_spectral  # This list has only the newly added ones sc <- snf_config(     dl = dl,     n_solutions = 5,     clust_fns = list(         \"two_cluster_spectral\" = spectral_two,         \"five_cluster_spectral\" = spectral_five     ) ) #> ℹ No distance functions specified. Using defaults.  sc$\"clust_fns_list\" #> [1] two_cluster_spectral #> [2] five_cluster_spectral sc #> Settings Data Frame: #>                         1    2    3    4    5 #> SNF hyperparameters: #> alpha                 0.4  0.8  0.4  0.7  0.3 #> k                      46   75   18   64   16   #> t                      20   20   20   20   20   #> SNF scheme: #>                         2    3    3    1    1   #> Clustering functions: #>                         2    2    2    1    1   #> Distance functions: #> CNT                     1    1    1    1    1   #> DSC                     1    1    1    1    1   #> ORD                     1    1    1    1    1   #> CAT                     1    1    1    1    1   #> MIX                     1    1    1    1    1   #> Component dropout: #> subcortical_volume      ✔    ✔    ✔    ✔    ✔   #> household_income        ✔    ✔    ✔    ✔    ✔   #> pubertal_status         ✔    ✔    ✔    ✔    ✔   #> anxiety                 ✔    ✔    ✔    ✔    ✖   #> depressed               ✔    ✔    ✔    ✔    ✔   #> Distance Functions List: #> Continuous (1): #> [1] euclidean_distance #> Discrete (1): #> [1] euclidean_distance #> Ordinal (1): #> [1] euclidean_distance #> Categorical (1): #> [1] gower_distance #> Mixed (1): #> [1] gower_distance #> Clustering Functions List: #> [1] two_cluster_spectral #> [2] five_cluster_spectral #> Weights Matrix: #> Weights defined for 5 cluster solutions. #> $ smri_vol_scs_cbwmatterlh 1, 1, 1, 1, 1  #> $ smri_vol_scs_ltventriclelh 1, 1, 1, 1, 1  #> $ smri_vol_scs_inflatventlh 1, 1, 1, 1, 1  #> $ smri_vol_scs_crbwmatterlh 1, 1, 1, 1, 1  #> $ smri_vol_scs_crbcortexlh 1, 1, 1, 1, 1  #> …and 29 more features. sol_df <- batch_snf(     dl = dl,     sc = sc )"},{"path":"https://branchlab.github.io/metasnf/articles/clustering_algorithms.html","id":"structure-of-a-clustering-algorithm-function","dir":"Articles","previous_headings":"Clustering Algorithms","what":"Structure of a clustering algorithm function","title":"Clustering Algorithms","text":"clustering algorithm can used long can write function following format: Takes single N*N similarity_matrix input first item (named “solution”) single N-dimensional vector numbers corresponding observations similarity matrix second item (named “nclust”) single integer indicating number clusters algorithm supposed generated Note number clusters parameter fed SNFtool::spectralClustering doesn’t always return solution containing many clusters. example, affinity matrix every observation identical observations yield 1 cluster solution, regardless many clusters requested. Also note function take number clusters argument - want explore clustering algorithm varying number clusters, ’ll need provide separate function number clusters ’re interested . source code two default functions shown :","code":"# Default clustering algorithm #1 spectral_eigen <- function(similarity_matrix) {     estimated_n <- estimate_nclust_given_graph(         W = similarity_matrix,         NUMC = 2:10     )     nclust_estimate <- estimated_n$`Eigen-gap best`     solution <- SNFtool::spectralClustering(         similarity_matrix,         nclust_estimate     )     return(solution) }  # Default clustering algorithm #2 spectral_rot <- function(similarity_matrix) {     estimated_n <- estimate_nclust_given_graph(         W = similarity_matrix,         NUMC = 2:10     )     nclust_estimate <- estimated_n$`Rotation cost best`     solution <- SNFtool::spectralClustering(         similarity_matrix,         nclust_estimate     )     return(solution) }"},{"path":"https://branchlab.github.io/metasnf/articles/clustering_algorithms.html","id":"non-automated-clustering","dir":"Articles","previous_headings":"Clustering Algorithms","what":"Non-automated clustering","title":"Clustering Algorithms","text":"can also extract similarity matrices computed row settings data frame perform clustering “manually”. particularly useful clustering procedures transition similarity matrix final solution requires human intervention (e.g., judgement clustering hyperparameters).","code":"sol_df <- batch_snf(     dl,     sc,     return_sim_mats = TRUE )  # Similarity matrices are in the list below: similarity_matrices <- sim_mats_list(sol_df)  first_similarity_matrix <- similarity_matrices[[1]]  # Your manual clustering goes here..."},{"path":"https://branchlab.github.io/metasnf/articles/clustering_algorithms.html","id":"example-of-non-automated-clustering-dbscan","dir":"Articles","previous_headings":"Clustering Algorithms","what":"Example of non-automated clustering: DBSCAN","title":"Clustering Algorithms","text":"Let’s say wanted cluster similarity matrices DBSCAN rather spectral clustering. Start taking look documentation running DBSCAN function dbscan R package https://cran.r-project.org/package=dbscan: DBSCAN challenging custom clustering can get, suggested process specifying number clusters recommended involve human intervention function operates dissimilarity (distance) matrices rather similarity matrices. slightly adjusted form dbscan example. can work . poking around, often see people mentioning DBSCAN just isn’t meant automated. need look data good idea values use hyperparameters eps minPts. need get involved manually, ’s perfect time manage many similarity matrices ’ve created batch_snf meta clustering. Generate wide range similarity matrices apply meta clustering find representative similarity matrices. One way based spectral-clustering derived solutions end clustering together (see example). take corresponding affinity matrices go dbscan clustering process manually. Based ?dbscan, looks like function can accept precomputed distance matrices (instead precomputed_nn_objects) long actually dist objects (can done using .dist() function). many formulas convert similarity matrices distance matrices pros cons. , ’ll use common approach distance = max(similarity) - similarity. Whichever matrix values maximum similarity now distance 0, whichever matrix values lowest amount similarity distance values closest former maximum similarity value.   ’s one bold lie code chunk , easy find magic hyperparameter combination minPts = 10 eps = 0.487 parameter value 0.4872. wasn’t based visual inspection kNNdistplot, rather lot trial error. Something along lines : specific instance, hyperparameters incredibly sensitive - slight change get different results. likely due shape actual data clustered. mileage may vary.","code":"library(dbscan) ## Example 1: use dbscan on the iris data set data(iris) iris <- as.matrix(iris[, 1:4]) iris_dist <- dist(iris)  ## Find suitable DBSCAN parameters: ## 1. We use minPts = dim + 1 = 5 for iris. A larger value can also be used. ## 2. We inspect the k-NN distance plot for k = minPts - 1 = 4 kNNdistplot(iris, minPts = 5)  ## Noise seems to start around a 4-NN distance of .7 abline(h=.7, col = \"red\", lty = 2)  results <- dbscan(iris_dist, eps = 0.7, minPts = 5)  # The 1 is added to ensure that those with no cluster (cluster 0) are still # plotted. pairs(iris, col = results$cluster + 1) library(dbscan) #>  #> Attaching package: 'dbscan' #> The following object is masked from 'package:stats': #>  #>     as.dendrogram library(ggplot2)  dl <- data_list(     list(         data = expression_df,         name = \"genes_1_and_2_exp\",         domain = \"gene_expression\",         type = \"continuous\"     ),     list(         data = methylation_df,         name = \"genes_1_and_2_meth\",         domain = \"gene_methylation\",         type = \"continuous\"     ),     uid = \"patient_id\" )  set.seed(42) sc <- snf_config(dl = dl, n_solutions = 1) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  sol_df <- batch_snf(     dl = dl,     sc = sc,     return_sim_mats = TRUE )  similarity_matrices <- sim_mats_list(sol_df)  representative_sm <- similarity_matrices[[1]]  distance_matrix1 <- as.dist(     max(representative_sm) - representative_sm )  kNNdistplot(     distance_matrix1,     minPts = 10 ) ## Maybe there? abline(h=0.4872, col = \"red\", lty = 2) dbscan_results <- dbscan(distance_matrix1, eps = 0.4872, minPts = 10)$\"cluster\"  spectral_results <- t(sol_df[1, ])[, 2]  dbscan_vs_spectral <- data.frame(     dbscan = dbscan_results,     spectral = spectral_results )  ggplot(dbscan_vs_spectral, aes(x = dbscan, y = spectral)) +     geom_jitter(height = 0.1, width = 0.1, alpha = 0.5) +     theme_bw() for (i in seq(0.485, 0.488, by = 0.0001)) {     results <- dbscan(distance_matrix1, eps = i, minPts = 10)     if (length(unique(results$\"cluster\")) == 3) {         print(i)     } }"},{"path":"https://branchlab.github.io/metasnf/articles/confounders.html","id":"accounting-for-confounding-features","dir":"Articles","previous_headings":"","what":"Accounting for confounding features","title":"Confounders","text":"Simply include confounding feature cluster analysis bear mind separation across clusters see feature evidence causal link. Consider following scenario. Children raised wealthy homes can afford go better schools, likely raised less stressful environments, can afford tutoring outside school. Consequently, higher standardized test scores. also substantially likely live near lake. cluster children according standardized test scores whether live near lake, may find one cluster kids live near lake high test scores separate cluster kids don’t live near lake low test scores. course, causal relationship indicating living near lake improves test scores, test scores causally influence proximity lakes. confounding feature household income. including household income model, ’ll get clusters, clusters also separate across “confounding” feature.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/confounders.html","id":"unwanted-signal","dir":"Articles","previous_headings":"","what":"Unwanted signal","title":"Confounders","text":"Consider following scenario. wish find clusters basketball players. simplicity, let’s say three basketball positions: point guards, lot assists blocks centers, assists lots blocks shooting guards, moderate amount assists blocks (lot personal fouls) handed dataset containing assists blocks per season large number basketball players. However, half basketball players regular players community center half pro. data look like?  Let’s say weren’t interested fact pro players aren’t community center players. just wanted know different styles play (ground truth position) exist. kind clustering results get data?  case, default spectral clustering done decent job separating groups, much granularity. separate clusters just pro players just community center players, want. clustering algorithms can fare even worse context. R version 4.3.0 higher, can use snippet factoextra::fviz_nbclust(metasnf_data[, c(\"assists\", \"blocks\")], kmeans, method = \"wss\") see optimal number clusters 2.  prevent clustering caring signal introduced pro/community center level differences, ’ll (linearly) regress effect pro player.  ’s looking much like want see. Following correction, ’ll much easier identifying clustering structure exists independently variance don’t care pro-status.","code":"library(metasnf)  library(SNFtool) library(ggplot2)  # Generating function for the blocks-per-season of a player generate_blocks <- function(level, position) {     # The average blocks per season of all basketball players     blocks <- rnorm(n = 1, mean = 500, sd = 50)     # Effect of playing in the pro     if (level == \"pro\") {         blocks <- blocks + rnorm(n = 1, mean = 2000, sd = 100)     } else {         # Match the noisiness of the pro players         blocks <- blocks + rnorm(n = 1, mean = 0, sd = 100)     }     # Effect of the player's position     if (position == \"pg\") {         blocks <- blocks + 0 # Just to be explicit about it     } else if (position == \"c\") {         blocks <- blocks + 500     } else if (position == \"sg\") {         blocks <- blocks + 250     }     return(blocks) }  # Generating function for the assists-per-season of a player generate_assists <- function(level, position) {     # The average assists per season of all basketball players     assists <- rnorm(n = 1, mean = 1000, sd = 10)     # Effect of playing in the pro     if (level == \"pro\") {         assists <- assists + rnorm(n = 1, mean = 2500, sd = 10)     } else {         # Match the noisiness of the pro players         assists <- assists + rnorm(n = 1, mean = 0, sd = 10)     }     # Effect of the player's position     if (position == \"pg\") {         assists <- assists + 400 # Just to be explicit about it     } else if (position == \"c\") {         assists <- assists + 0     } else if (position == \"sg\") {         assists <- assists + 200     }     return(assists) } # # Helper function to fill in blocks and assists for a player given their # position and level. generate_player_data <- function(df) {     df$\"blocks\" <- df |> apply(         MARGIN = 1,         FUN = function(x) {             generate_blocks(x[[1]], x[[2]])         }     )     df$\"assists\" <- df |> apply(         MARGIN = 1,         FUN = function(x) {             generate_assists(x[[1]], x[[2]])         }     )     return(df) }  # Generate the data rows <- 300 player_data <- data.frame(     level = sample(c(\"regular\", \"pro\"), size = rows, replace = TRUE),     position = sample(c(\"pg\", \"c\", \"sg\"), size = rows, replace = TRUE) ) |> generate_player_data()  player_data$\"id\" <- as.character(seq_len(nrow(player_data)))  # Plot by position player_data |>     ggplot(aes(x = blocks, y = assists, shape = level, colour = position)) +     geom_point(size = 5, alpha = 0.3) +     theme_bw() set.seed(42)  metasnf_data <- dplyr::select(player_data, \"id\", \"assists\", \"blocks\")  dl <- data_list(     list(         data = metasnf_data,         name = \"player_data\",         domain = \"player_data\",         type = \"continuous\"     ),     uid = \"id\" )  sc <- snf_config(     dl = dl,     n_solutions = 1,     possible_snf_schemes = 1,     k_values = 20,     alpha_values = 0.8 ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  sol_df <- batch_snf(dl, sc)  cluster_solution_df <- t(sol_df)  # matching the subject names metasnf_data$\"uid\" <- paste0(\"uid_\", metasnf_data$\"id\")  # merging back the original data metasnf_data <- dplyr::inner_join(metasnf_data, cluster_solution_df, by = \"uid\")  metasnf_data |>     ggplot(aes(x = blocks, y = assists, colour = s1)) +     geom_point(size = 5, alpha = 0.3) +     theme_bw() km <- kmeans(metasnf_data[, c(\"blocks\", \"assists\")], centers = 2, nstart = 25)  km$\"cluster\" #>   [1] 1 1 2 1 1 2 1 1 1 2 2 1 1 1 1 2 1 1 2 2 1 1 2 1 1 1 2 1 2 2 1 1 2 2 2 1 1 #>  [38] 2 1 1 2 1 2 1 2 1 2 2 1 2 1 2 2 2 1 1 2 2 1 2 1 1 1 2 1 2 1 2 2 1 2 2 2 1 #>  [75] 2 1 2 1 2 1 2 2 2 1 1 2 2 1 1 2 2 2 1 2 1 1 2 2 1 2 2 2 1 2 2 2 2 2 1 1 1 #> [112] 2 1 1 1 1 2 1 1 1 2 2 1 1 1 1 2 1 1 2 2 2 1 1 1 1 1 2 1 1 1 1 1 1 2 1 2 1 #> [149] 2 2 1 2 2 1 2 1 2 1 2 2 1 2 1 1 2 1 1 1 1 2 1 2 1 1 2 2 2 1 2 2 1 2 2 2 1 #> [186] 2 1 2 1 2 1 2 2 2 1 1 1 2 1 2 2 2 1 2 2 1 1 1 1 1 2 2 2 2 1 1 2 1 2 1 1 1 #> [223] 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 2 2 1 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 1 1 2 2 #> [260] 1 1 1 1 2 1 2 1 1 2 2 1 1 2 1 1 1 2 1 1 2 2 1 2 2 1 2 1 2 2 2 2 2 1 1 2 2 #> [297] 2 2 1 1  metasnf_data$\"kmeans\" <- factor(km$\"cluster\")  metasnf_data |>     ggplot(aes(x = blocks, y = assists, colour = kmeans)) +     geom_point(size = 5, alpha = 0.3) +     theme_bw() player_data$\"adjusted_blocks\" <- resid(lm(blocks ~ level, player_data)) player_data$\"adjusted_assists\" <- resid(lm(assists ~ level, player_data))  # Plot by position player_data |>     ggplot(         aes(             x = adjusted_blocks,             y = adjusted_assists,             shape = level,             colour = position         )     ) +     geom_point(size = 5, alpha = 0.3) +     theme_bw()"},{"path":"https://branchlab.github.io/metasnf/articles/confounders.html","id":"procedure-using-the-metasnf-package","dir":"Articles","previous_headings":"","what":"Procedure using the metasnf package","title":"Confounders","text":"Note can adjust signal categorical features, adjustment linear, applied numeric (continuous, discrete, ordinal) data, adjustment can lead major information loss (see section )!","code":"head(player_data) #>     level position    blocks   assists id adjusted_blocks adjusted_assists #> 1 regular        c  856.4165 1015.4749  1        74.06966       -162.28888 #> 2 regular       sg  734.9430 1205.1276  2       -47.40385         27.36383 #> 3     pro       pg 2443.7954 3913.3202  3      -286.18349        198.25452 #> 4 regular        c 1141.4151  992.0313  4       359.06833       -185.73242 #> 5 regular        c  854.0715  986.2844  5        71.72467       -191.47938 #> 6     pro        c 2863.3687 3506.7345  6       133.38977       -208.33114  dl <- data_list(     list(         data = player_data[, c(\"id\", \"blocks\", \"assists\")],         name = \"player_data\",         domain = \"player_data\",         type = \"continuous\"     ),     uid = \"id\" )  # Correction list for just the level unwanted_signal_list1 <- data_list(     list(         data = player_data[, c(\"id\", \"level\")],         name = \"player_level\",         domain = \"player_data\",         type = \"categorical\"     ),     uid = \"id\" )  # Correction list for both player level and position unwanted_signal_list2 <- data_list(     list(         data = player_data[, c(\"id\", \"level\", \"position\")],         name = \"player_level\",         domain = \"player_data\",         type = \"categorical\"     ),     uid = \"id\" )  adjusted_dl <- linear_adjust(dl, unwanted_signal_list1)  # Combine the data from the two data_lists the second list is being merged # only because it also has the position data, for plotting purposes merged_df <- as.data.frame(c(adjusted_dl, unwanted_signal_list2))  merged_df |>     ggplot(aes(x = blocks, y = assists, shape = level, colour = position)) +     geom_point(size = 5, alpha = 0.3) +     theme_bw() # Correcting too many things! adjusted_dl2 <- linear_adjust(dl, unwanted_signal_list2)  merged_df2 <- as.data.frame(c(adjusted_dl2, unwanted_signal_list2))  merged_df2 |>     ggplot(aes(x = blocks, y = assists, shape = level, colour = position)) +     geom_point(size = 5, alpha = 0.3) +     theme_bw()"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/articles/confounders.html","id":"excessive-loss-of-signal","dir":"Articles","previous_headings":"Limitations and important considerations","what":"1. Excessive loss of signal","title":"Confounders","text":"remove signal associated feature, impact every feature degree proportional correlation feature unwanted one. Practically, feature strongly correlated unwanted signal feature may better removed. Consider two features: temperature ice cream sales. just happens ice cream sales purely proportional temperature, plus random noise. information one collect improve ability predict ice cream sales. wanted learn structure ice cream sales excluding signal introduced temperature, adjustment turn ice cream sales data genuine pure noise. point clusters generated totally meaningless non-reproducible.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/confounders.html","id":"lack-of-accounting-for-non-linearities","dir":"Articles","previous_headings":"Limitations and important considerations","what":"2. Lack of accounting for non-linearities","title":"Confounders","text":"adjustment procedure purely linear.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/confounders.html","id":"inability-to-adjust-ordinal-discrete-or-categorical-data","dir":"Articles","previous_headings":"Limitations and important considerations","what":"3. Inability to adjust ordinal, discrete, or categorical data","title":"Confounders","text":"Linearly adjusting categorical/factor features possible. Attempting adjust data discrete ordinal structure likely completely remove association regressor features features regressed.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/correlation_plots.html","id":"data-set-up","dir":"Articles","previous_headings":"","what":"Data set-up","title":"Correlation Plots","text":"","code":"library(metasnf)  # We'll just use the first few columns for this demo cort_sa_minimal <- cort_sa[, 1:5]  # And one more mock categorical feature for demonstration purposes city <- fav_colour city$\"city\" <- sample(     c(\"toronto\", \"montreal\", \"vancouver\"),     size = nrow(city),     replace = TRUE ) city <- city |> dplyr::select(-\"colour\")  # Make sure to throw in all the data you're interested in visualizing for this # data_list, including out-of-model measures and confounding features. dl <- data_list(     list(cort_sa_minimal, \"cortical_sa\", \"neuroimaging\", \"continuous\"),     list(income, \"household_income\", \"demographics\", \"ordinal\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(fav_colour, \"favourite_colour\", \"demographics\", \"categorical\"),     list(city, \"city\", \"demographics\", \"categorical\"),     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" ) ## ℹ 182 observations dropped due to incomplete data. summary(dl) ##               name        type       domain length width ## 1      cortical_sa  continuous neuroimaging     93     4 ## 2 household_income     ordinal demographics     93     1 ## 3  pubertal_status  continuous demographics     93     1 ## 4 favourite_colour categorical demographics     93     1 ## 5             city categorical demographics     93     1 ## 6          anxiety     ordinal    behaviour     93     1 ## 7        depressed     ordinal    behaviour     93     1 # This matrix contains all the pairwise association p-values assoc_pval_matrix <- calc_assoc_pval_matrix(dl)  assoc_pval_matrix[1:3, 1:3] ##            mrisdp_303 mrisdp_304 mrisdp_305 ## mrisdp_303  0.0000000  0.6374024  0.4513919 ## mrisdp_304  0.6374024  0.0000000  0.2790341 ## mrisdp_305  0.4513919  0.2790341  0.0000000"},{"path":"https://branchlab.github.io/metasnf/articles/correlation_plots.html","id":"heatmaps","dir":"Articles","previous_headings":"","what":"Heatmaps","title":"Correlation Plots","text":"’s basic heatmap looks like: data generated randomly, “colour” feature really just categorical mapping “cbcl_depress_r”. can draw attention confounding features /model measures specifying names shown . ComplexHeatmap package offers functionality splitting heatmaps slices. One way slices clustering heatmap k-means: Another way divide heatmap feature domain. can done providing data_list features assoc_pval_matrix setting split_by_domain TRUE.","code":"ap_heatmap <- assoc_pval_heatmap(assoc_pval_matrix) ap_heatmap2 <- assoc_pval_heatmap(     assoc_pval_matrix,     confounders = list(         \"Colour\" = \"colour\",         \"Pubertal Status\" = \"pubertal_status\"     ),     out_of_models = list(         \"City\" = \"city\"     ) ) ap_heatmap3 <- assoc_pval_heatmap(     assoc_pval_matrix,     confounders = list(         \"Colour\" = \"colour\",         \"Pubertal Status\" = \"pubertal_status\"     ),     out_of_models = list(         \"City\" = \"city\"     ),     row_km = 3,     column_km = 3 ) ap_heatmap4 <- assoc_pval_heatmap(     assoc_pval_matrix,     confounders = list(         \"Colour\" = \"colour\",         \"Pubertal Status\" = \"pubertal_status\"     ),     out_of_models = list(         \"City\" = \"city\"     ),     dl = data_list,     split_by_domain = TRUE )"},{"path":"https://branchlab.github.io/metasnf/articles/data_list.html","id":"the-data_list","dir":"Articles","previous_headings":"","what":"The data_list","title":"The Data List","text":"vignette outlines importance, structure, creation data_list object. can find much info running ?data_list loading metasnf package. data_list main object used metasnf package store data. named nested list containing input data frames (data), name input data frame (user’s reference), ‘domain’ data frame (broader source information input data frame capturing, determined user’s domain knowledge), type feature stored data frame (continuous, discrete, ordinal, categorical, mixed). examples data_list generation usage : Depending data preprocessing, may convenient assemble components data_list automated way provide result data_list. example, code generated list like one : data_list receives single list, ’ll treat list containing components required construct properly formatted data_list:","code":"library(metasnf)  # Preparing some mock data heart_rate_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var1 = c(0.04, 0.1, 0.3),     var2 = c(30, 2, 0.3) )  personality_test_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var3 = c(900, 1990, 373),     var4 = c(509, 2209, 83) )  survey_response_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var5 = c(1, 3, 3),     var6 = c(2, 3, 3) )  city_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var7 = c(\"toronto\", \"montreal\", \"vancouver\") )  # Generating a data_list explicitly (Name each nested list element): dl <- data_list(     list(         data = heart_rate_df,         name = \"heart_rate\",         domain = \"clinical\",         type = \"continuous\"     ),     list(         data = personality_test_df,         name = \"personality_test\",         domain = \"surveys\",         type = \"continuous\"     ),     list(         data = survey_response_df,         name = \"survey_response\",         domain = \"surveys\",         type = \"ordinal\"     ),     list(         data = city_df,         name = \"city\",         domain = \"location\",         type = \"categorical\"     ),     uid = \"patient_id\" )  # Achieving the same result compactly: dl <- data_list(     list(heart_rate_df, \"heart_rate\", \"clinical\", \"continuous\"),     list(personality_test_df, \"personality_test\", \"surveys\", \"continuous\"),     list(survey_response_df, \"survey_response\", \"surveys\", \"ordinal\"),     list(city_df, \"city\", \"location\", \"categorical\"),     uid = \"patient_id\" )  # Printing data_list summaries summary(dl) ##               name        type   domain length width ## 1       heart_rate  continuous clinical      3     2 ## 2 personality_test  continuous  surveys      3     2 ## 3  survey_response     ordinal  surveys      3     2 ## 4             city categorical location      3     1 list_of_lists <- list(     list(heart_rate_df, \"data1\", \"domain1\", \"continuous\"),     list(personality_test_df, \"data2\", \"domain2\", \"continuous\") ) dl <- data_list(     list_of_lists,     uid = \"patient_id\" )  summary(dl) ##    name       type  domain length width ## 1 data1 continuous domain1      3     2 ## 2 data2 continuous domain2      3     2"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"distance-functions","dir":"Articles","previous_headings":"","what":"Distance functions","title":"Distance Metrics","text":"metasnf enables users customize distance metrics used SNF pipeline. information distance metrics stored dist_fns_list object. relevant arguments provided, snf_config() create dist_fns_list class object calling dist_fns_list() function argument indicating list populated default distance functions. list list functions (euclidean_distance() gower_distance() case). lists can contain number distance metrics 5 recognized types features: continuous, discrete, ordinal, categorical, mixed (combination previous four). default, continuous, discrete, ordinal data converted distance matrices using simple Euclidean distance. Categorical mixed data handled using Gower’s formula implemented cluster package (see ?cluster::daisy).","code":"library(metasnf)  dl <- data_list(     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" ) #> ℹ 38 observations dropped due to incomplete data.  sc <- snf_config(     dl = dl,     n_solutions = 5 ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  sc$\"dist_fns_list\" #> Continuous (1): #> [1] euclidean_distance #> Discrete (1): #> [1] euclidean_distance #> Ordinal (1): #> [1] euclidean_distance #> Categorical (1): #> [1] gower_distance #> Mixed (1): #> [1] gower_distance"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"how-the-dist_fns_list-is-used","dir":"Articles","previous_headings":"","what":"How the dist_fns_list is used","title":"Distance Metrics","text":"show dist_fns_list used, ’ll start extending dist_fns_list beyond just default options. metasnf provides Euclidean distance function applies standard normalization first, sn_euclidean_distance() (wrapper around SNFtool::standardNormalization + stats::dist). ’s can create custom dist_fns_list includes metric continuous discrete features. rows settings data frame part SNF config show continuous (CNT) discrete (DSTC) distance metrics values randomly fluctuate 1 2, 1 means first metric (euclidean_distance()) used 2 means second metric (sn_euclidean_distance) used. settings data frame within config stores pointers function used, distance functions list config stores actual functions. SNF config contains distance functions list liking, can call batch_snf() usual:","code":"sc <- snf_config(     dl = dl,     n_solutions = 10,     cnt_dist_fns = list(\"standard_norm_euclidean\" = sn_euclidean_distance),     dsc_dist_fns = list(\"standard_norm_euclidean\" = sn_euclidean_distance),     use_default_dist_fns = TRUE ) #> ℹ No clustering functions specified. Using defaults.  sc #> Settings Data Frame: #>                1    2    3    4    5    6    7    8    9   10 #> SNF hyperparameters: #> alpha        0.5  0.7  0.8  0.4  0.7  0.5  0.7  0.4  0.3  0.6 #> k             70   81   16   33   81   69   22   21   30   25   #> t             20   20   20   20   20   20   20   20   20   20   #> SNF scheme: #>                3    1    2    3    3    1    3    3    1    2   #> Clustering functions: #>                2    2    2    1    2    2    1    2    1    1   #> Distance functions: #> CNT            1    2    2    1    1    1    1    1    2    1   #> DSC            1    1    2    1    2    1    1    2    2    2   #> ORD            1    1    1    1    1    1    1    1    1    1   #> CAT            1    1    1    1    1    1    1    1    1    1   #> MIX            1    1    1    1    1    1    1    1    1    1   #> Component dropout: #> anxiety        ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   #> depressed      ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   #> Distance Functions List: #> Continuous (2): #> [1] euclidean_distance #> [2] standard_norm_euclidean #> Discrete (2): #> [1] euclidean_distance #> [2] standard_norm_euclidean #> Ordinal (1): #> [1] euclidean_distance #> Categorical (1): #> [1] gower_distance #> Mixed (1): #> [1] gower_distance #> Clustering Functions List: #> [1] spectral_eigen #> [2] spectral_rot #> Weights Matrix: #> Weights defined for 10 cluster solutions. #> $ cbcl_anxiety_r  1, 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cbcl_depress_r  1, 1, 1, 1, 1, 1, 1, 1, 1, 1 sol_df <- batch_snf(dl, sc)"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"removing-the-default-distance_metrics","dir":"Articles","previous_headings":"","what":"Removing the default distance_metrics","title":"Distance Metrics","text":"two ways avoid using default distance metrics. first way use use_default_dist_fns parameter: second way explicitly specify indices want sample SNF config generation: can save trouble needing manage several distinct distance metrics lists manage solution space separate runs batch_snf.","code":"sc <- snf_config(     dl = dl,     n_solutions = 10,     cnt_dist_fns = list(\"standard_norm_euclidean\" = sn_euclidean_distance),     dsc_dist_fns = list(\"standard_norm_euclidean\" = sn_euclidean_distance),     ord_dist_fns = list(\"standard_norm_euclidean\" = sn_euclidean_distance),     mix_dist_fns = list(\"standard_norm_euclidean\" = gower_distance),     use_default_dist_fns = FALSE ) #> ℹ No clustering functions specified. Using defaults.  sc #> Settings Data Frame: #>                1    2    3    4    5    6    7    8    9   10 #> SNF hyperparameters: #> alpha        0.4  0.7  0.7  0.6  0.7  0.8  0.7  0.5  0.3  0.8 #> k             36   89   87   79   43   50   97   74   41   25   #> t             20   20   20   20   20   20   20   20   20   20   #> SNF scheme: #>                2    3    2    3    1    2    2    1    3    1   #> Clustering functions: #>                1    1    1    2    2    2    1    2    1    2   #> Distance functions: #> CNT            1    1    1    1    1    1    1    1    1    1   #> DSC            1    1    1    1    1    1    1    1    1    1   #> ORD            1    1    1    1    1    1    1    1    1    1   #> CAT            0    0    0    0    0    0    0    0    0    0   #> MIX            1    1    1    1    1    1    1    1    1    1   #> Component dropout: #> anxiety        ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   #> depressed      ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   #> Distance Functions List: #> Continuous (1): #> [1] standard_norm_euclidean #> Discrete (1): #> [1] standard_norm_euclidean #> Ordinal (1): #> [1] standard_norm_euclidean #> Categorical (0): #> Mixed (1): #> [1] standard_norm_euclidean #> Clustering Functions List: #> [1] spectral_eigen #> [2] spectral_rot #> Weights Matrix: #> Weights defined for 10 cluster solutions. #> $ cbcl_anxiety_r  1, 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cbcl_depress_r  1, 1, 1, 1, 1, 1, 1, 1, 1, 1 sc <- snf_config(     dl = dl,     n_solutions = 10,     cnt_dist_fns = list(         \"standard_norm_euclidean\" = sn_euclidean_distance,         \"some_other_metric\" = sn_euclidean_distance     ),     dsc_dist_fns = list(         \"standard_norm_euclidean\" = sn_euclidean_distance,         \"some_other_metric\" = sn_euclidean_distance     ),     use_default_dist_fns = TRUE,     continuous_distances = 1,     discrete_distances = c(2, 3) ) #> ℹ No clustering functions specified. Using defaults.  sc #> Settings Data Frame: #>                1    2    3    4    5    6    7    8    9   10 #> SNF hyperparameters: #> alpha        0.5  0.5  0.6  0.8  0.8  0.4  0.8  0.5  0.4  0.3 #> k             14   23   62   35   80   80   19   64   35   60   #> t             20   20   20   20   20   20   20   20   20   20   #> SNF scheme: #>                2    2    3    2    3    1    3    1    3    2   #> Clustering functions: #>                2    1    1    2    2    1    1    2    1    2   #> Distance functions: #> CNT            1    1    1    1    1    1    1    1    1    1   #> DSC            2    2    2    2    3    2    2    3    3    3   #> ORD            1    1    1    1    1    1    1    1    1    1   #> CAT            1    1    1    1    1    1    1    1    1    1   #> MIX            1    1    1    1    1    1    1    1    1    1   #> Component dropout: #> anxiety        ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   #> depressed      ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   #> Distance Functions List: #> Continuous (3): #> [1] euclidean_distance #> [2] standard_norm_euclidean #> [3] some_other_metric #> Discrete (3): #> [1] euclidean_distance #> [2] standard_norm_euclidean #> [3] some_other_metric #> Ordinal (1): #> [1] euclidean_distance #> Categorical (1): #> [1] gower_distance #> Mixed (1): #> [1] gower_distance #> Clustering Functions List: #> [1] spectral_eigen #> [2] spectral_rot #> Weights Matrix: #> Weights defined for 10 cluster solutions. #> $ cbcl_anxiety_r  1, 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cbcl_depress_r  1, 1, 1, 1, 1, 1, 1, 1, 1, 1"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"supplying-weights-to-distance-metrics","dir":"Articles","previous_headings":"","what":"Supplying weights to distance metrics","title":"Distance Metrics","text":"distance metric functions can accept weights. Usually, weights applied direct scaling specified features. cases (e.g. categorical distance metric functions), way weights applied may somewhat less intuitive. bottom vignette outlines available distance metric functions grouped whether accept weights. can examine documentation weighted functions learn weights provide used. important note providing weights run SNF specific form data may expect time ready converted distance metric function. “individual” “two-step” SNF schemes involve distance metrics applied input data frames data list . “domain” scheme, however, concatenates data within domain converting larger data frame distance matrix. Anytime one data frame domain label use domain SNF scheme, columns associated domain single data frame distance metric function applied. default, snf_config() also defines weights_matrix class object stores feature weights. Without user provided weights, weights just initialized 1. actually use matrix SNF, ’ll need make sure number rows weights matrix number rows settings data frame. can either replace 1s weights ’ve calculated outside package, use random weights following uniform exponential distribution. default metrics (simple Euclidean continuous, discrete, ordinal data Gower’s distance categorical mixed data) capable applying weights data distance matrix generation.","code":"sc$\"weights_matrix\" #> Weights defined for 10 cluster solutions. #> $ cbcl_anxiety_r  1, 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cbcl_depress_r  1, 1, 1, 1, 1, 1, 1, 1, 1, 1 # random weights: sc <- snf_config(     dl = dl,     n_solutions = 10,     weights_fill = \"uniform\" # or fill = \"exponential\" )  sc  # custom weights fts <- features(dl) custom_wm <- matrix(nrow = 10, ncol = length(fts), rnorm(10 * length(fts))^2) colnames(custom_wm) <- fts custom_wm <- as_weights_matrix(custom_wm)  sc <- snf_config(     dl = dl,     n_solutions = 10,     wm = custom_wm )  sc"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"custom-distance-metrics","dir":"Articles","previous_headings":"","what":"Custom distance metrics","title":"Distance Metrics","text":"remainder vignette deals supplying custom distance metrics (including custom feature weighting). Making use functionality require good understanding working functions R. can also supply custom distance metrics. Looking code one package-provided distance functions shows essential aspects well-formated distance function. function accept two arguments: df weights_row, give one output, distance_matrix. function doesn’t actually need make use weights don’t want . time data reaches distance metric function, (referred df) always: UID column least one feature column missing values data.frame (tibble) feature column names won’t altered values loaded data_list. example, consider anxiety raw data supplied metasnf: ’s make look like distance metric functions expect see: want distance metric calculates Euclidean distance, also scales resulting matrix biggest allowed distance 1, look like : ’ll need mindful edge cases function run . example, function fail pairwise distances patients 0 (division 0 occur). specific situation ever happens, ’s probably something quite wrong data. ’re happy distance function working ’d like : can load distance functions list SNF config construction:","code":"euclidean_distance #> function (df, weights_row)  #> { #>     weights <- diag(weights_row, nrow = length(weights_row)) #>     weighted_df <- as.matrix(df) %*% weights #>     distance_matrix <- as.matrix(stats::dist(weighted_df, method = \"euclidean\")) #>     return(distance_matrix) #> } #> <bytecode: 0x56008cb61150> #> <environment: namespace:metasnf> head(anxiety) #> # A tibble: 6 × 2 #>   unique_id        cbcl_anxiety_r #>   <chr>                     <dbl> #> 1 NDAR_INV0567T2Y9              3 #> 2 NDAR_INV0GLZNC2W              1 #> 3 NDAR_INV0IZ157F8             NA #> 4 NDAR_INV0J4PYA5F              0 #> 5 NDAR_INV0OYE291Q              2 #> 6 NDAR_INV0SM1JLXQ              2 processed_anxiety <- anxiety |>     na.omit() |> # no NAs     dplyr::rename(\"uid\" = \"unique_id\") |>     data.frame(row.names = \"uid\")  head(processed_anxiety) #>                  cbcl_anxiety_r #> NDAR_INV0567T2Y9              3 #> NDAR_INV0GLZNC2W              1 #> NDAR_INV0J4PYA5F              0 #> NDAR_INV0OYE291Q              2 #> NDAR_INV0SM1JLXQ              2 #> NDAR_INV0Z87UJDR              0 my_scaled_euclidean <- function(df, weights_row) {     # this function won't apply the weights it is given     distance_matrix <- df |>         stats::dist(method = \"euclidean\") |>         as.matrix() # make sure it's formatted as a matrix     distance_matrix <- distance_matrix / max(distance_matrix)     return(distance_matrix) } my_scaled_euclidean(processed_anxiety)[1:5, 1:5] #>                  NDAR_INV0567T2Y9 NDAR_INV0GLZNC2W NDAR_INV0J4PYA5F #> NDAR_INV0567T2Y9              0.0              0.2              0.3 #> NDAR_INV0GLZNC2W              0.2              0.0              0.1 #> NDAR_INV0J4PYA5F              0.3              0.1              0.0 #> NDAR_INV0OYE291Q              0.1              0.1              0.2 #> NDAR_INV0SM1JLXQ              0.1              0.1              0.2 #>                  NDAR_INV0OYE291Q NDAR_INV0SM1JLXQ #> NDAR_INV0567T2Y9              0.1              0.1 #> NDAR_INV0GLZNC2W              0.1              0.1 #> NDAR_INV0J4PYA5F              0.2              0.2 #> NDAR_INV0OYE291Q              0.0              0.0 #> NDAR_INV0SM1JLXQ              0.0              0.0 sc <- snf_config(     n_solutions = 10,     dl = dl,     cnt_dist_fns = list(         \"my_scaled_euclidean\" = my_scaled_euclidean     ),     use_default_dist_fns = TRUE ) #> ℹ No clustering functions specified. Using defaults.  sc #> Settings Data Frame: #>                1    2    3    4    5    6    7    8    9   10 #> SNF hyperparameters: #> alpha        0.3  0.4  0.7  0.6  0.5  0.6  0.3  0.4  0.6  0.7 #> k             12   18   29   47   23   93   93   84   61   41   #> t             20   20   20   20   20   20   20   20   20   20   #> SNF scheme: #>                2    3    3    1    3    1    2    1    1    2   #> Clustering functions: #>                1    1    2    1    2    2    2    1    1    1   #> Distance functions: #> CNT            1    1    1    1    1    2    2    1    1    2   #> DSC            1    1    1    1    1    1    1    1    1    1   #> ORD            1    1    1    1    1    1    1    1    1    1   #> CAT            1    1    1    1    1    1    1    1    1    1   #> MIX            1    1    1    1    1    1    1    1    1    1   #> Component dropout: #> anxiety        ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   #> depressed      ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   #> Distance Functions List: #> Continuous (2): #> [1] euclidean_distance #> [2] my_scaled_euclidean #> Discrete (1): #> [1] euclidean_distance #> Ordinal (1): #> [1] euclidean_distance #> Categorical (1): #> [1] gower_distance #> Mixed (1): #> [1] gower_distance #> Clustering Functions List: #> [1] spectral_eigen #> [2] spectral_rot #> Weights Matrix: #> Weights defined for 10 cluster solutions. #> $ cbcl_anxiety_r  1, 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cbcl_depress_r  1, 1, 1, 1, 1, 1, 1, 1, 1, 1"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"requesting-metrics","dir":"Articles","previous_headings":"","what":"Requesting metrics","title":"Distance Metrics","text":"’s metric ’d like see added prewritten option included package, feel free post issue make pull request package’s GitHub.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"list-of-prewritten-distance-metrics-functions","dir":"Articles","previous_headings":"","what":"List of prewritten distance metrics functions","title":"Distance Metrics","text":"metrics can used . capable accepting applying custom weights provided weights_matrix. applies continuous, discrete, ordinal data Standard normalize data, use Euclidean distance applies continuous, discrete, ordinal data applies data Apply weights data frame, calculate Euclidean distance, square results Apply square root weights data frame, calculate Euclidean distance, square results Distance patients (1 * feature weight) summed features","code":""},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Distance Metrics","text":"Wang, Bo, Aziz M. Mezlini, Feyyaz Demir, Marc Fiume, Zhuowen Tu, Michael Brudno, Benjamin Haibe-Kains, Anna Goldenberg. 2014. “Similarity Network Fusion Aggregating Data Types Genomic Scale.” Nature Methods 11 (3): 333–37. https://doi.org/10.1038/nmeth.2810.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/feature_weights.html","id":"generating-and-using-the-weights-matrix","dir":"Articles","previous_headings":"","what":"Generating and Using the Weights Matrix","title":"Feature Weighting","text":"distance metrics used metasnf capable applying custom weights included features. code outlines generate use weights_matrix (data frame containing feature weights) object. default, weights 1. batch_snf uses weights_matrix supplied. custom feature weights ’d like used can manually populate data frame. ’s one column per feature (need worry column orders) number rows match number rows SNF config. just looking broaden space cluster solutions generate, can use built-randomization options weights: ’re happy weights_matrix, can pass batch_snf:","code":"library(metasnf)  # Make sure to throw in all the data you're interested in visualizing for this # data_list, including out-of-model measures and confounding features. dl <- data_list(     list(income, \"household_income\", \"demographics\", \"ordinal\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(fav_colour, \"favourite_colour\", \"demographics\", \"categorical\"),     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" ) #> ℹ 139 observations dropped due to incomplete data.  summary(dl) #>               name        type       domain length width #> 1 household_income     ordinal demographics    136     1 #> 2  pubertal_status  continuous demographics    136     1 #> 3 favourite_colour categorical demographics    136     1 #> 4          anxiety     ordinal    behaviour    136     1 #> 5        depressed     ordinal    behaviour    136     1  set.seed(42) sc <- snf_config(     dl,     n_solutions = 20,     min_k = 20,     max_k = 50 ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  sc$\"weights_matrix\" #> Weights defined for 20 cluster solutions. #> $ household_income 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…  #> $ pubertal_status 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…  #> $ colour 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…  #> $ cbcl_anxiety_r 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…  #> $ cbcl_depress_r 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… # Random uniformly distributed values sc <- snf_config(     dl,     n_solutions = 20,     min_k = 20,     max_k = 50,     weights_fill = \"uniform\" ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  sc$\"weights_matrix\" #> Weights defined for 20 cluster solutions. #> $ household_income 0.08161542, 0.40378037, 0.83551451, 0.59499701, 0.351…  #> $ pubertal_status 0.39553669, 0.95934650, 0.11323819, 0.23559680, 0.510…  #> $ colour 0.07772700, 0.76282288, 0.15224422, 0.93752397, 0.745…  #> $ cbcl_anxiety_r 0.15473680, 0.20350748, 0.14351450, 0.61093017, 0.516…  #> $ cbcl_depress_r 0.02428327, 0.60967042, 0.47194860, 0.10858025, 0.864…  # Random exponentially distributed values sc <- snf_config(     dl,     n_solutions = 20,     min_k = 20,     max_k = 50,     weights_fill = \"exponential\" ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  sc$\"weights_matrix\" #> Weights defined for 20 cluster solutions. #> $ household_income 2.27094485, 0.16919903, 0.18456918, 0.33487595, 1.167…  #> $ pubertal_status 0.1528647, 0.4143784, 0.7710409, 1.7987298, 1.4162029…  #> $ colour 1.54348805, 0.82288484, 2.54124213, 0.60145639, 1.089…  #> $ cbcl_anxiety_r 0.21682983, 3.68043243, 1.25420312, 1.15417982, 0.102…  #> $ cbcl_depress_r 0.1307026, 1.8525605, 4.1633331, 1.2926046, 1.6980694… batch_snf(dl = dl, sc = sc)"},{"path":"https://branchlab.github.io/metasnf/articles/feature_weights.html","id":"the-nitty-gritty-of-how-weights-are-used","dir":"Articles","previous_headings":"","what":"The Nitty Gritty of How Weights are Used","title":"Feature Weighting","text":"specific implementation weights distance matrix calculations dependent distance metric used, can learn distance metrics vignette. aspect understand want know precisely weights used related SNF schemes. Depending scheme specified corresponding settings_df SNF config, feature columns involved distance matrix calculation can differ substantially. example, domain scheme, features domain concatenated prior distance matrix calculation. domains multiple types features (e.g., continuous categorical), mean mixed distance metric (Gower’s method default) used, weights applied per-domain basis. ’s concrete example data set-SNF scheme can influence feature weighting process: consider generating data list every single input data frame contains 1 input feature. data list processed exclusively using “individual” SNF scheme set-, feature weights won’t matter. individual SNF scheme calculates individual distance metrics every input data frame separately fusing together SNF. Anytime distance matrix calculated, ’ll single feature , purpose feature weighting (changing relative contributions input features distance matrix calculations) lost.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/getting_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"package? metasnf package facilitates usage meta clustering paradigm described Caruana et al., 2006 similarity network fusion (SNF) data integration procedure developed Wang et al., 2014. package offers comprehensive suite tools assist users transforming raw patient data patient subtypes, decision making subtyping process, visualization along way strong emphasis context-specific utility principled validation results.  use meta clustering? Clustering algorithms seek solutions members cluster similar members distinct clusters dissimilar . sufficiently noisy datasets many qualitatively distinct solutions similar scores clustering quality exist, necessarily case top solution selected clustering algorithm also useful one user’s context. address issue, original meta clustering procedure Caruana et al., 2006 involved generating large number reasonable clustering solutions, clustering solutions qualitatively similar ones, user examine “meta clusters” find something seems like ’ll useful. use SNF? clinical data setting, often access patient data across wide range domains, imaging, genetics, biomarkers, demographics. trying extract subtypes information, direct concatenation data followed cluster analysis can result substantial amount lost (valuable) signal contained individual domain. Empirically, SNF demonstrated effectively integrate highly diverse patient data purposes clinical subtyping.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/getting_started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started","text":"package currently hosted GitHub (CRAN). easiest way install metasnf devtools package.","code":"install.packages(\"devtools\") # if you don't have it already  # By default, this will install the latest version of the package devtools::install_github(\"BRANCHlab/metasnf\")  # To ensure you are always installing a specific version of the package, #  you can manually specify a tagged release or a commit: devtools::install_github(\"BRANCHlab/metasnf@v0.2.0\")"},{"path":"https://branchlab.github.io/metasnf/articles/manhattan_plots.html","id":"data-set-up","dir":"Articles","previous_headings":"","what":"Data set-up","title":"Manhattan Plots","text":"example taken “complete example” vignette.","code":"library(metasnf)  # Start by making a data list containing all our data frames to more easily # identify observations without missing data full_dl <- data_list(     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(income, \"household_income\", \"demographics\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" )  # Partition into a data and target list (optional) dl <- full_dl[1:3] target_dl <- full_dl[4:5]  # Build space of settings to cluster over set.seed(42) sc <- snf_config(     dl = dl,     n_solutions = 20,     min_k = 20,     max_k = 50 )  # Clustering sol_df <- batch_snf(dl, sc)  # Calculate p-values between cluster solutions and features ext_sol_df <- extend_solutions(     sol_df,     dl = dl,     target = target_dl,     min_pval = 1e-10 # p-values below 1e-10 will be thresholded to 1e-10 )"},{"path":"https://branchlab.github.io/metasnf/articles/manhattan_plots.html","id":"associations-with-multiple-cluster-solutions-esm_manhattan_plot","dir":"Articles","previous_headings":"","what":"Associations with Multiple Cluster Solutions (esm_manhattan_plot)","title":"Manhattan Plots","text":"bit unwieldy plot try looking many solutions time, can handy intend just examining cluster solutions.","code":"esm_manhattan <- esm_manhattan_plot(     ext_sol_df[1:5, ],     neg_log_pval_thresh = 5,     threshold = 0.05,     point_size = 3,     jitter_width = 0.1,     jitter_height = 0.1,     plot_title = \"Feature-Solution Associations\",     text_size = 14,     bonferroni_line = TRUE )"},{"path":"https://branchlab.github.io/metasnf/articles/manhattan_plots.html","id":"associations-with-meta-clusters-mc_manhattan_plot","dir":"Articles","previous_headings":"","what":"Associations with Meta Clusters (mc_manhattan_plot)","title":"Manhattan Plots","text":"mc_manhattan_plot function can used meta clustering efficiently examine entire space generated cluster solutions.","code":"# Calculate pairwise similarities between cluster solutions sol_aris <- calc_aris(sol_df)  # Extract hierarchical clustering order of the cluster solutions meta_cluster_order <- get_matrix_order(sol_aris)  # Create a base heatmap for visual meta clustering ari_hm <- meta_cluster_heatmap(     sol_aris,     order = meta_cluster_order )  # Identify meta cluster boundaries # This can also be by trial & error if you do not wish to use the shiny app. shiny_annotator(ari_hm)  # Result of meta cluster examination split_vec <- c(2, 5, 12, 16)  # Create a base heatmap for visual meta clustering ari_hm <- meta_cluster_heatmap(     sol_aris,     order = meta_cluster_order,     split_vector = split_vec )  ari_hm  # Label meta clusters based on the split vector mc_sol_df <- label_meta_clusters(     sol_df = ext_sol_df,     split_vector = split_vec,     order = meta_cluster_order )  # Extracting representative solutions from each defined meta cluster rep_solutions <- get_representative_solutions(sol_aris, mc_sol_df)  mc_manhattan <- mc_manhattan_plot(     rep_solutions,     dl = dl,     target_dl = target_dl,     point_size = 3,     text_size = 12,     plot_title = \"Feature-Meta Cluster Associations\",     threshold = 0.05,     neg_log_pval_thresh = 5 )"},{"path":"https://branchlab.github.io/metasnf/articles/manhattan_plots.html","id":"associations-with-a-key-feature","dir":"Articles","previous_headings":"","what":"Associations with a Key Feature","title":"Manhattan Plots","text":"can also visualize associations specific feature interest rather cluster solutions. thing needed plot data_list - clustering necessary.","code":"var_manhattan <- var_manhattan_plot(     dl,     key_var = \"household_income\",     plot_title = \"Correlation of Features with Household Income\",     text_size = 16,     neg_log_pval_thresh = 3,     threshold = 0.05 )"},{"path":"https://branchlab.github.io/metasnf/articles/parallel_processing.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Parallel Processing","text":"","code":"# Load the package library(metasnf)  # Setting up the data dl <- data_list(     list(cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(income, \"household_income\", \"demographics\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"unique_id\" )  # Specifying 10 different sets of settings for SNF set.seed(42) sc <- snf_config(     dl = dl,     n_solutions = 10,     max_k = 40 )  sol_df <- batch_snf(     dl,     sc,     processes = \"max\" # Can also be a specific integer )"},{"path":"https://branchlab.github.io/metasnf/articles/parallel_processing.html","id":"including-a-progress-bar","dir":"Articles","previous_headings":"","what":"Including a progress bar","title":"Parallel Processing","text":"Use progressr package visualize progress parallel batch_snf.","code":"progressr::with_progress({     sol_df <- batch_snf(         dl,         sc,         processes = \"max\"     ) })"},{"path":"https://branchlab.github.io/metasnf/articles/parallel_processing.html","id":"number-of-processes","dir":"Articles","previous_headings":"","what":"Number of processes","title":"Parallel Processing","text":"Setting processes “max” make use many cores R can find. want dial things back little, can specify precisely number processes want: find many processes access (least, many metasnf think access ), use availableCores() function future package:","code":"sol_df <- batch_snf(     dl,     sc,     processes = 4 ) future::availableCores()"},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"data-set-up","dir":"Articles","previous_headings":"","what":"Data set-up","title":"Similarity Matrices","text":"","code":"library(metasnf)  # Generate data_list my_dl <- data_list(     list(         data = expression_df,         name = \"expression_data\",         domain = \"gene_expression\",         type = \"continuous\"     ),     list(         data = methylation_df,         name = \"methylation_data\",         domain = \"gene_methylation\",         type = \"continuous\"     ),     list(         data = gender_df,         name = \"gender\",         domain = \"demographics\",         type = \"categorical\"     ),     list(         data = diagnosis_df,         name = \"diagnosis\",         domain = \"clinical\",         type = \"categorical\"     ),     list(         data = age_df,         name = \"age\",         domain = \"demographics\",         type = \"discrete\"     ),     uid = \"patient_id\" )  set.seed(42) my_sc <- snf_config(     my_dl,     n_solutions = 1,     max_k = 40 ) ## ℹ No distance functions specified. Using defaults. ## ℹ No clustering functions specified. Using defaults. sol_df <- batch_snf(     my_dl,     my_sc,     return_sim_mats = TRUE )  similarity_matrices <- sim_mats_list(sol_df)  # The first (and only) similarity matrix: similarity_matrix <- similarity_matrices[[1]]  # The first (and only) cluster solution: cluster_solution <- t(sol_df)"},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"visualize-similarity-matrices-sorted-by-cluster-label","dir":"Articles","previous_headings":"","what":"Visualize similarity matrices sorted by cluster label","title":"Similarity Matrices","text":"similarity_matrix_heatmap wrapper ComplexHeatmap::Heatmap, convenient default transformations parameters viewing similarity matrix. default transformations include plotting log(Similarity) rather default similarity matrix well rescaling diagonal matrix average value -diagonals. Additionally, similarity matrix gets reordered according provided cluster solution.","code":"similarity_matrix_hm <- similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     cluster_solution = cluster_solution,     heatmap_height = grid::unit(10, \"cm\"),     heatmap_width = grid::unit(10, \"cm\") )"},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"annotations","dir":"Articles","previous_headings":"","what":"Annotations","title":"Similarity Matrices","text":"One piece functionality provided ComplexHeatmap::Heatmap() ability supply visual annotations along rows columns heatmap. can always build annotations using standard approaches outline ComplexHeatmap Complete Reference. addition , package offers convenient functionality specify regular heatmap annotations barplot annotations directly provided data frame data_list (). example , make use data supplied data list. colours red3, pink1, etc. built-R colours can browse calling colours(). reference, code shows achieve annotations using standard ComplexHeatmap syntax. Take look ComplexHeatmap Complete Reference learn possible package.","code":"annotated_sm_hm <- similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     cluster_solution = cluster_solution,     scale_diag = \"mean\",     log_graph = TRUE,     data = my_dl,     left_hm = list(         \"Diagnosis\" = \"diagnosis\"     ),     top_hm = list(         \"Gender\" = \"gender\"     ),     top_bar = list(         \"Age\" = \"age\"     ),     annotation_colours = list(         Diagnosis = c(             \"definite asthma\" = \"red3\",             \"possible asthma\" = \"pink1\",             \"no asthma\" = \"bisque1\"         ),         Gender = c(             \"female\" = \"purple\",             \"male\" = \"lightgreen\"         )     ),     heatmap_height = grid::unit(10, \"cm\"),     heatmap_width = grid::unit(10, \"cm\") ) merged_df <- as.data.frame(my_dl) order <- sort(cluster_solution[, 2], index.return = TRUE)$\"ix\" merged_df <- merged_df[order, ]  top_annotations <- ComplexHeatmap::HeatmapAnnotation(     Age = ComplexHeatmap::anno_barplot(merged_df$\"age\"),     Gender = merged_df$\"gender\",     col = list(         Gender = c(             \"female\" = \"purple\",             \"male\" = \"lightgreen\"         )     ),     show_legend = TRUE )  left_annotations <- ComplexHeatmap::rowAnnotation(     Diagnosis = merged_df$\"diagnosis\",     col = list(         Diagnosis = c(             \"definite asthma\" = \"red3\",             \"possible asthma\" = \"pink1\",             \"no asthma\" = \"bisque1\"         )     ),     show_legend = TRUE )  similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     cluster_solution = cluster_solution,     scale_diag = \"mean\",     log_graph = TRUE,     data = merged_df,     top_annotation = top_annotations,     left_annotation = left_annotations )"},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"more-on-sorting","dir":"Articles","previous_headings":"","what":"More on sorting","title":"Similarity Matrices","text":"aware ordering data similarity matrix influenced supply values cluster_solution order parameters. don’t think data lining properly, consider manually making sure similarity_matrix rows columns sorted preference (e.g., based cluster) order data matches. easier data frame data_list, data_list forces patients sorted unique IDs upon generation.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/snf_config.html","id":"creating-a-default-snf-config","dir":"Articles","previous_headings":"","what":"Creating a default SNF config","title":"The SNF Config","text":"minimal SNF config (snf_config class object) can obtained providing data list snf_config() function. Similarity network fusion-based clustering pipelines require following steps: Selecting set data frames integrate Converting data frames distance matrices using distance function Converting distance matrices similarity matrices using SNFtool package’s affinityMatrix() function Integrating similarity matrices one final similarity matrix using SNFtool package’s SNF() function Converting final similarity matrix cluster solution using clustering function SNF config made four parts address various parts pipeline: settings data frame (class settings_df, extends class data.frame), contains information SNF-specific hyperparameters (step 4), distance clustering functions used (steps 2 5), components data list (data frames) excluded particular run (step 1). row data frame corresponds complete set settings can yield single cluster solution data list. distance functions list (class dist_fns_list, extends class list), stores actual distance functions referenced settings data frame (step 2) clustering functions list (class clust_fns_list, extends class list), similarly stores clustering functions (step 5) weights matrix (class weights_matrix, extends classes matrix, array), contains feature weights account data distance matrix conversion step (step 2).","code":"library(metasnf)  dl <- data_list(     list(cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(income, \"household_income\", \"demographics\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"unique_id\" ) ## ℹ 175 observations dropped due to incomplete data. sc <- snf_config(dl, n_solutions = 5) ## ℹ No distance functions specified. Using defaults. ## ℹ No clustering functions specified. Using defaults. sc ## Settings Data Frame: ##                            1    2    3    4    5 ## SNF hyperparameters: ## alpha                    0.6  0.8  0.4  0.6  0.6 ## k                         39   75   51   77   25   ## t                         20   20   20   20   20   ## SNF scheme: ##                            1    2    2    1    3   ## Clustering functions: ##                            2    2    2    2    2   ## Distance functions: ## CNT                        1    1    1    1    1   ## DSC                        1    1    1    1    1   ## ORD                        1    1    1    1    1   ## CAT                        1    1    1    1    1   ## MIX                        1    1    1    1    1   ## Component dropout: ## cortical_thickness         ✔    ✔    ✔    ✔    ✖   ## cortical_surface_area      ✔    ✔    ✖    ✔    ✔   ## subcortical_volume         ✔    ✔    ✔    ✔    ✔   ## household_income           ✔    ✔    ✔    ✖    ✔   ## pubertal_status            ✔    ✔    ✔    ✔    ✔   ## Distance Functions List: ## Continuous (1): ## [1] euclidean_distance ## Discrete (1): ## [1] euclidean_distance ## Ordinal (1): ## [1] euclidean_distance ## Categorical (1): ## [1] gower_distance ## Mixed (1): ## [1] gower_distance ## Clustering Functions List: ## [1] spectral_eigen ## [2] spectral_rot ## Weights Matrix: ## Weights defined for 5 cluster solutions. ## $ mrisdp_1 1, 1, 1, 1, 1  ## $ mrisdp_2 1, 1, 1, 1, 1  ## $ mrisdp_3 1, 1, 1, 1, 1  ## $ mrisdp_4 1, 1, 1, 1, 1  ## $ mrisdp_5 1, 1, 1, 1, 1  ## …and 329 more features."},{"path":"https://branchlab.github.io/metasnf/articles/snf_config.html","id":"the-settings-data-frame","dir":"Articles","previous_headings":"Creating a default SNF config","what":"The settings data frame","title":"The SNF Config","text":"can view settings data frame closer detail follows: columns settings_df class object include: solution: label keep track generated cluster solution. alpha: alpha (also referred sigma eta original SNF paper) hyperparameter SNF. hyperparameter plays role converting distance matrices similarity matrices. process SNFtool::affinityMatrix() conversion essentially involves plugging distance value x-coordinate normal distribution pulling density point similarity. thickness normal distribution regulated alpha, larger alpha leads broader normal distribution greater sensitivity discriminating distances. k: k (nearest neighbours) hyperparameter distance matrix similarity matrix conversion well similarity network fusion. distance matrix similarity matrix conversion (SNFtool::affinityMatrix()), k controls many nearest neighbours consider calculating similar observation nearest neighbours. closer observation k nearest neighbours, broader normal distribution used distance similarity conversion. similarity network fusion step (SNFtool::SNF()), k controls intensely matrices sparsified information passed . small k, say, k = 1, values matrices reduced 0 exception one value observation observation’s similar neighbour. t: T (number iterations) hyperparameter used SNF. larger t results rounds information passing similarity matrices. SNF eventually converges, overshooting value offers benefit undershooting can yield inaccurate results. original SNF developers recommend leaving value 20. snf_scheme: SNF “scheme” used convert initial provided data frames final fused network (SNF schemes vignette). clust_alg: clustering algorithm function clustering functions list config applied final fused network. can learn using parameter clustering algorithnms vignette. Columns ending dist: distance metric function distance functions list config used various types features data list (distance metrics vignette). Columns starting inc: Whether corresponding data frame included (1) excluded (0) row. default, alpha k hyperparameters randomly varied 0.3 0.8 10 100 respectively based suggestions original SNF paper. t hyperparameter default stays fixed 20. snf_scheme column varies randomly 1 3, corresponding three differente schemes available. clust_alg randomly varies 1 2 two default clustering algoritm functions: (1) spectral clustering using eigen-gap heuristic calculate number clusters (2) spectral clustering using rotation cost heuristic. distance columns always 1 default, one default distance metric function per variable type: simple Euclidean anything numeric Gower’s distance anything mixed categorical.","code":"sc$\"settings_df\" ##                            1    2    3    4    5 ## SNF hyperparameters: ## alpha                    0.6  0.8  0.4  0.6  0.6 ## k                         39   75   51   77   25   ## t                         20   20   20   20   20   ## SNF scheme: ##                            1    2    2    1    3   ## Clustering functions: ##                            2    2    2    2    2   ## Distance functions: ## CNT                        1    1    1    1    1   ## DSC                        1    1    1    1    1   ## ORD                        1    1    1    1    1   ## CAT                        1    1    1    1    1   ## MIX                        1    1    1    1    1   ## Component dropout: ## cortical_thickness         ✔    ✔    ✔    ✔    ✖   ## cortical_surface_area      ✔    ✔    ✖    ✔    ✔   ## subcortical_volume         ✔    ✔    ✔    ✔    ✔   ## household_income           ✔    ✔    ✔    ✖    ✔   ## pubertal_status            ✔    ✔    ✔    ✔    ✔ # Printed as a regular data frame sc$\"settings_df\" |> as.data.frame() ##   solution alpha  k  t snf_scheme clust_alg cnt_dist dsc_dist ord_dist cat_dist ## 1        1   0.6 39 20          1         2        1        1        1        1 ## 2        2   0.8 75 20          2         2        1        1        1        1 ## 3        3   0.4 51 20          2         2        1        1        1        1 ## 4        4   0.6 77 20          1         2        1        1        1        1 ## 5        5   0.6 25 20          3         2        1        1        1        1 ##   mix_dist inc_cortical_thickness inc_cortical_surface_area ## 1        1                      1                         1 ## 2        1                      1                         1 ## 3        1                      1                         0 ## 4        1                      1                         1 ## 5        1                      0                         1 ##   inc_subcortical_volume inc_household_income inc_pubertal_status ## 1                      1                    1                   1 ## 2                      1                    1                   1 ## 3                      1                    1                   1 ## 4                      1                    0                   1 ## 5                      1                    1                   1"},{"path":"https://branchlab.github.io/metasnf/articles/snf_config.html","id":"the-distance-functions-list","dir":"Articles","previous_headings":"Creating a default SNF config","what":"The distance functions list","title":"The SNF Config","text":"distance functions list simply list functions capable converting data frame distance matrix. Distance functions within list organized based type variable deal : continuous, discrete, ordinal, categorical, mixed (combination former 4). can learn customizing distance metrics distance metrics vignette.","code":"dfl <- sc$\"dist_fns_list\"  dfl ## Continuous (1): ## [1] euclidean_distance ## Discrete (1): ## [1] euclidean_distance ## Ordinal (1): ## [1] euclidean_distance ## Categorical (1): ## [1] gower_distance ## Mixed (1): ## [1] gower_distance names(dfl) ## [1] \"cnt_dist_fns\" \"dsc_dist_fns\" \"ord_dist_fns\" \"cat_dist_fns\" \"mix_dist_fns\" dfl$\"cnt_dist_fns\"[[1]] ## function (df, weights_row)  ## { ##     weights <- diag(weights_row, nrow = length(weights_row)) ##     weighted_df <- as.matrix(df) %*% weights ##     distance_matrix <- as.matrix(stats::dist(weighted_df, method = \"euclidean\")) ##     return(distance_matrix) ## } ## <bytecode: 0x5623dc20d178> ## <environment: namespace:metasnf>"},{"path":"https://branchlab.github.io/metasnf/articles/snf_config.html","id":"the-clustering-functions-list","dir":"Articles","previous_headings":"Creating a default SNF config","what":"The clustering functions list","title":"The SNF Config","text":"clustering functions list similarly list functions capable converting similarity matrix cluster solution (numeric vector). can learn customizing clustering functions clustering algorithnms vignette.","code":"cfl <- sc$\"clust_fns_list\"  cfl ## [1] spectral_eigen ## [2] spectral_rot names(cfl) ## [1] \"spectral_eigen\" \"spectral_rot\" cfl[[1]] ## function (similarity_matrix)  ## { ##     estimated_n <- estimate_nclust_given_graph(W = similarity_matrix,  ##         NUMC = 2:10) ##     nclust_estimate <- estimated_n$`Eigen-gap best` ##     solution <- SNFtool::spectralClustering(similarity_matrix,  ##         nclust_estimate) ##     return(solution) ## } ## <bytecode: 0x5623dc360120> ## <environment: namespace:metasnf>"},{"path":"https://branchlab.github.io/metasnf/articles/snf_config.html","id":"the-weights-matrix","dir":"Articles","previous_headings":"Creating a default SNF config","what":"The weights matrix","title":"The SNF Config","text":"’s one row weights matrix corresponding every row settings data frame one column every feature data list. default, weights set 1, weighting occurs.","code":"wm <- sc$\"weights_matrix\"  wm ## Weights defined for 5 cluster solutions. ## $ mrisdp_1 1, 1, 1, 1, 1  ## $ mrisdp_2 1, 1, 1, 1, 1  ## $ mrisdp_3 1, 1, 1, 1, 1  ## $ mrisdp_4 1, 1, 1, 1, 1  ## $ mrisdp_5 1, 1, 1, 1, 1  ## …and 329 more features. class(wm) <- \"matrix\"  wm[1:5, 1:5] ##      mrisdp_1 mrisdp_2 mrisdp_3 mrisdp_4 mrisdp_5 ## [1,]        1        1        1        1        1 ## [2,]        1        1        1        1        1 ## [3,]        1        1        1        1        1 ## [4,]        1        1        1        1        1 ## [5,]        1        1        1        1        1"},{"path":"https://branchlab.github.io/metasnf/articles/snf_config.html","id":"customizing-an-snf-config","dir":"Articles","previous_headings":"","what":"Customizing an SNF config","title":"The SNF Config","text":"specifying parameters beyond number rows created, function randomly vary configurable values config within sensible default ranges.","code":"sc <- snf_config(     dl,     n_solutions = 100 ) ## ℹ No distance functions specified. Using defaults. ## ℹ No clustering functions specified. Using defaults. sc ## Settings Data Frame: ##                            1    2    3    4    5    6    7    8    9   10 ## SNF hyperparameters: ## alpha                    0.6  0.8  0.3  0.7  0.7  0.8  0.6  0.7  0.8  0.3 ## k                         27   84   50   57   16   80   65   32   95   56   ## t                         20   20   20   20   20   20   20   20   20   20   ## SNF scheme: ##                            2    2    3    3    1    3    2    1    3    2   ## Clustering functions: ##                            2    1    1    1    1    1    1    1    1    2   ## Distance functions: ## CNT                        1    1    1    1    1    1    1    1    1    1   ## DSC                        1    1    1    1    1    1    1    1    1    1   ## ORD                        1    1    1    1    1    1    1    1    1    1   ## CAT                        1    1    1    1    1    1    1    1    1    1   ## MIX                        1    1    1    1    1    1    1    1    1    1   ## Component dropout: ## cortical_thickness         ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## cortical_surface_area      ✔    ✔    ✔    ✔    ✔    ✖    ✔    ✔    ✔    ✔   ## subcortical_volume         ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## household_income           ✔    ✔    ✔    ✖    ✔    ✔    ✔    ✖    ✔    ✔   ## pubertal_status            ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## …and settings defined to create 90 more cluster solutions. ## Distance Functions List: ## Continuous (1): ## [1] euclidean_distance ## Discrete (1): ## [1] euclidean_distance ## Ordinal (1): ## [1] euclidean_distance ## Categorical (1): ## [1] gower_distance ## Mixed (1): ## [1] gower_distance ## Clustering Functions List: ## [1] spectral_eigen ## [2] spectral_rot ## Weights Matrix: ## Weights defined for 100 cluster solutions. ## $ mrisdp_1 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_2 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_3 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_4 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_5 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## …and 329 more features."},{"path":"https://branchlab.github.io/metasnf/articles/snf_config.html","id":"alpha-k-and-t","dir":"Articles","previous_headings":"Customizing an SNF config","what":"Alpha, k, and t","title":"The SNF Config","text":"can control parameters either providing vector values ’d like randomly sample specifying minimum maximum range.","code":"# Through minimums and maximums sc <- snf_config(     dl,     n_solutions = 100,     min_k = 10,     max_k = 60,     min_alpha = 0.3,     max_alpha = 0.8 ) ## ℹ No distance functions specified. Using defaults. ## ℹ No clustering functions specified. Using defaults. # Through specific value sampling sc <- snf_config(     dl,     n_solutions = 20,     k_values = c(10, 25, 50),     alpha_values = c(0.4, 0.8) ) ## ℹ No distance functions specified. Using defaults. ## ℹ No clustering functions specified. Using defaults."},{"path":"https://branchlab.github.io/metasnf/articles/snf_config.html","id":"inclusion-columns-and-data-frame-dropout","dir":"Articles","previous_headings":"Customizing an SNF config","what":"Inclusion columns and data frame dropout","title":"The SNF Config","text":"Bounds number input data frames removed well way number removed chosen can controlled. default, settings_df generated call snf_config() pick random value 0 (printed red X) 1 (printed green checkmark) less total number available data frames data list based exponential probability distribution. exponential distribution makes likely small number data frames dropped much less likely large number data frames dropped. can control distribution changing dropout_dist value “uniform” (result much higher number data frames dropped average) “none” (result data frames dropped). bounds number data frames can dropped can controlled using min_removed_inputs max_removed_inputs:","code":"# Exponential dropping sc <- snf_config(     dl,     n_solutions = 20,     dropout_dist = \"exponential\" # the default behaviour ) ## ℹ No distance functions specified. Using defaults. ## ℹ No clustering functions specified. Using defaults. sc ## Settings Data Frame: ##                            1    2    3    4    5    6    7    8    9   10 ## SNF hyperparameters: ## alpha                    0.4  0.7  0.5  0.8  0.5  0.4  0.8  0.3  0.4  0.5 ## k                         46   64   27   33   74   32   85   63   10   17   ## t                         20   20   20   20   20   20   20   20   20   20   ## SNF scheme: ##                            2    2    1    2    1    1    3    3    1    3   ## Clustering functions: ##                            2    2    1    1    1    2    2    2    1    1   ## Distance functions: ## CNT                        1    1    1    1    1    1    1    1    1    1   ## DSC                        1    1    1    1    1    1    1    1    1    1   ## ORD                        1    1    1    1    1    1    1    1    1    1   ## CAT                        1    1    1    1    1    1    1    1    1    1   ## MIX                        1    1    1    1    1    1    1    1    1    1   ## Component dropout: ## cortical_thickness         ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## cortical_surface_area      ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## subcortical_volume         ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## household_income           ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## pubertal_status            ✔    ✔    ✔    ✖    ✔    ✔    ✔    ✔    ✔    ✔   ## …and settings defined to create 10 more cluster solutions. ## Distance Functions List: ## Continuous (1): ## [1] euclidean_distance ## Discrete (1): ## [1] euclidean_distance ## Ordinal (1): ## [1] euclidean_distance ## Categorical (1): ## [1] gower_distance ## Mixed (1): ## [1] gower_distance ## Clustering Functions List: ## [1] spectral_eigen ## [2] spectral_rot ## Weights Matrix: ## Weights defined for 20 cluster solutions. ## $ mrisdp_1 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_2 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_3 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_4 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_5 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## …and 329 more features. # Uniform dropping sc <- snf_config(     dl,     n_solutions = 20,     dropout_dist = \"uniform\" ) ## ℹ No distance functions specified. Using defaults. ## ℹ No clustering functions specified. Using defaults. sc ## Settings Data Frame: ##                            1    2    3    4    5    6    7    8    9   10 ## SNF hyperparameters: ## alpha                    0.4  0.5  0.4  0.8  0.8  0.3  0.5  0.4  0.6  0.3 ## k                         23   68   14   50   91   61   95   61   86   26   ## t                         20   20   20   20   20   20   20   20   20   20   ## SNF scheme: ##                            2    3    1    3    2    2    3    2    1    2   ## Clustering functions: ##                            2    1    1    2    2    1    1    2    1    1   ## Distance functions: ## CNT                        1    1    1    1    1    1    1    1    1    1   ## DSC                        1    1    1    1    1    1    1    1    1    1   ## ORD                        1    1    1    1    1    1    1    1    1    1   ## CAT                        1    1    1    1    1    1    1    1    1    1   ## MIX                        1    1    1    1    1    1    1    1    1    1   ## Component dropout: ## cortical_thickness         ✔    ✖    ✔    ✖    ✔    ✔    ✖    ✖    ✔    ✔   ## cortical_surface_area      ✔    ✔    ✔    ✖    ✖    ✔    ✖    ✔    ✔    ✔   ## subcortical_volume         ✔    ✖    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## household_income           ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## pubertal_status            ✔    ✖    ✔    ✔    ✔    ✔    ✔    ✖    ✔    ✔   ## …and settings defined to create 10 more cluster solutions. ## Distance Functions List: ## Continuous (1): ## [1] euclidean_distance ## Discrete (1): ## [1] euclidean_distance ## Ordinal (1): ## [1] euclidean_distance ## Categorical (1): ## [1] gower_distance ## Mixed (1): ## [1] gower_distance ## Clustering Functions List: ## [1] spectral_eigen ## [2] spectral_rot ## Weights Matrix: ## Weights defined for 20 cluster solutions. ## $ mrisdp_1 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_2 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_3 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_4 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_5 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## …and 329 more features. # No dropping sc <- snf_config(     dl,     n_solutions = 20,     dropout_dist = \"none\" ) ## ℹ No distance functions specified. Using defaults. ## ℹ No clustering functions specified. Using defaults. sc ## Settings Data Frame: ##                            1    2    3    4    5    6    7    8    9   10 ## SNF hyperparameters: ## alpha                    0.8  0.4  0.8  0.4  0.7  0.6  0.8  0.4  0.3  0.7 ## k                         80   53   27   67   63   11   53   14   33   27   ## t                         20   20   20   20   20   20   20   20   20   20   ## SNF scheme: ##                            1    2    1    1    1    3    2    2    1    2   ## Clustering functions: ##                            1    2    2    1    2    1    2    1    2    2   ## Distance functions: ## CNT                        1    1    1    1    1    1    1    1    1    1   ## DSC                        1    1    1    1    1    1    1    1    1    1   ## ORD                        1    1    1    1    1    1    1    1    1    1   ## CAT                        1    1    1    1    1    1    1    1    1    1   ## MIX                        1    1    1    1    1    1    1    1    1    1   ## Component dropout: ## cortical_thickness         ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## cortical_surface_area      ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## subcortical_volume         ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## household_income           ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## pubertal_status            ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## …and settings defined to create 10 more cluster solutions. ## Distance Functions List: ## Continuous (1): ## [1] euclidean_distance ## Discrete (1): ## [1] euclidean_distance ## Ordinal (1): ## [1] euclidean_distance ## Categorical (1): ## [1] gower_distance ## Mixed (1): ## [1] gower_distance ## Clustering Functions List: ## [1] spectral_eigen ## [2] spectral_rot ## Weights Matrix: ## Weights defined for 20 cluster solutions. ## $ mrisdp_1 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_2 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_3 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_4 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_5 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## …and 329 more features. sc <- snf_config(     dl,     n_solutions = 20,     min_removed_inputs = 3 ) ## ℹ No distance functions specified. Using defaults. ## ℹ No clustering functions specified. Using defaults. # No row will exclude fewer than 3 data frames during SNF sc ## Settings Data Frame: ##                            1    2    3    4    5    6    7    8    9   10 ## SNF hyperparameters: ## alpha                    0.5  0.7  0.8  0.3  0.6  0.4  0.4  0.7  0.3  0.3 ## k                         82   44   24   56   96   10   94   27   34   61   ## t                         20   20   20   20   20   20   20   20   20   20   ## SNF scheme: ##                            1    1    1    2    2    3    2    1    2    2   ## Clustering functions: ##                            1    2    2    1    1    1    2    1    1    1   ## Distance functions: ## CNT                        1    1    1    1    1    1    1    1    1    1   ## DSC                        1    1    1    1    1    1    1    1    1    1   ## ORD                        1    1    1    1    1    1    1    1    1    1   ## CAT                        1    1    1    1    1    1    1    1    1    1   ## MIX                        1    1    1    1    1    1    1    1    1    1   ## Component dropout: ## cortical_thickness         ✖    ✔    ✖    ✖    ✖    ✖    ✖    ✔    ✔    ✖   ## cortical_surface_area      ✖    ✖    ✔    ✖    ✖    ✔    ✖    ✔    ✖    ✔   ## subcortical_volume         ✔    ✖    ✖    ✔    ✔    ✖    ✔    ✖    ✔    ✖   ## household_income           ✔    ✖    ✖    ✔    ✔    ✖    ✔    ✖    ✖    ✖   ## pubertal_status            ✖    ✔    ✔    ✖    ✖    ✔    ✖    ✖    ✖    ✔   ## …and settings defined to create 10 more cluster solutions. ## Distance Functions List: ## Continuous (1): ## [1] euclidean_distance ## Discrete (1): ## [1] euclidean_distance ## Ordinal (1): ## [1] euclidean_distance ## Categorical (1): ## [1] gower_distance ## Mixed (1): ## [1] gower_distance ## Clustering Functions List: ## [1] spectral_eigen ## [2] spectral_rot ## Weights Matrix: ## Weights defined for 20 cluster solutions. ## $ mrisdp_1 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_2 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_3 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_4 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## $ mrisdp_5 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…  ## …and 329 more features."},{"path":"https://branchlab.github.io/metasnf/articles/snf_config.html","id":"grid-searching","dir":"Articles","previous_headings":"","what":"Grid searching","title":"The SNF Config","text":"interested grid searching perhaps just specific set alpha k values, may want consider varying parameters keeping everything else fixed:","code":"sc <- snf_config(     dl,     n_solutions = 10,     alpha_values = c(0.3, 0.5, 0.8),     k_values = c(20, 40, 60),     dropout_dist = \"none\" ) ## ℹ No distance functions specified. Using defaults. ## ℹ No clustering functions specified. Using defaults. sc ## Settings Data Frame: ##                            1    2    3    4    5    6    7    8    9   10 ## SNF hyperparameters: ## alpha                    0.8  0.5  0.3  0.8  0.3  0.3  0.3  0.3  0.8  0.3 ## k                         40   20   40   40   60   40   20   20   20   40   ## t                         20   20   20   20   20   20   20   20   20   20   ## SNF scheme: ##                            3    3    3    3    2    2    3    2    2    2   ## Clustering functions: ##                            2    2    2    1    1    1    1    1    2    2   ## Distance functions: ## CNT                        1    1    1    1    1    1    1    1    1    1   ## DSC                        1    1    1    1    1    1    1    1    1    1   ## ORD                        1    1    1    1    1    1    1    1    1    1   ## CAT                        1    1    1    1    1    1    1    1    1    1   ## MIX                        1    1    1    1    1    1    1    1    1    1   ## Component dropout: ## cortical_thickness         ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## cortical_surface_area      ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## subcortical_volume         ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## household_income           ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## pubertal_status            ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔    ✔   ## Distance Functions List: ## Continuous (1): ## [1] euclidean_distance ## Discrete (1): ## [1] euclidean_distance ## Ordinal (1): ## [1] euclidean_distance ## Categorical (1): ## [1] gower_distance ## Mixed (1): ## [1] gower_distance ## Clustering Functions List: ## [1] spectral_eigen ## [2] spectral_rot ## Weights Matrix: ## Weights defined for 10 cluster solutions. ## $ mrisdp_1 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  ## $ mrisdp_2 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  ## $ mrisdp_3 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  ## $ mrisdp_4 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  ## $ mrisdp_5 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  ## …and 329 more features."},{"path":"https://branchlab.github.io/metasnf/articles/snf_config.html","id":"assembling-an-snf-config-in-pieces","dir":"Articles","previous_headings":"","what":"Assembling an SNF config in pieces","title":"The SNF Config","text":"Rather varying everything equally , may interested looking “chunks” solution spaces based distinct SNF configs. example, may want look 25 solutions generated k = 50 look another 25 solutions generated k = 80. can build two separate SNF configs join using merge() function.","code":"set.seed(42) sc_1 <- snf_config(     dl,     n_solutions = 25,     k_values = 50 ) ## ℹ No distance functions specified. Using defaults. ## ℹ No clustering functions specified. Using defaults. sc_2 <- snf_config(     dl,     n_solutions = 25,     k_values = 80 ) ## ℹ No distance functions specified. Using defaults. ## ℹ No clustering functions specified. Using defaults. full_sc <- merge(sc_1, sc_2)"},{"path":"https://branchlab.github.io/metasnf/articles/snf_config.html","id":"settings_df-building-failed-to-converge","dir":"Articles","previous_headings":"","what":"“settings_df building failed to converge”","title":"The SNF Config","text":"snf_config() never build duplicate rows. consequence request large number rows small range possible values vary , impossible matrix built. example, ’s way generate 10 unique rows varying parameter two clustering algorithms used - 2 rows ever created. encounter error “Matrix building failed”, try generate fewer rows little less strict values allowed.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/snf_schemes.html","id":"individual","dir":"Articles","previous_headings":"","what":"(1) “Individual”","title":"SNF Schemes","text":"snf_scheme = 1: individual input data frame provided data list combined final network SNF directly. identical treating data list like WALL parameter original SNF function. limitation (strength) approach integration biased towards information sources (domains) representation within list. example, happened 5 demographic data frames 10 neuroimaging data frames, get integration biased towards neuroimaging data.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/snf_schemes.html","id":"two-step","dir":"Articles","previous_headings":"","what":"(2) “Two-step”","title":"SNF Schemes","text":"snf_scheme = 2: Input data frames combined within user-specified data domains one round SNF combined across domains second round SNF. scheme intended reduce weighting issues individual approach. final integration done combining single demographic similarity matrix single neuroimaging similarity matrix, resulting balanced integration domain level. “three-step” greater SNF scheme accounting data frame subdomains subsubdomains time, ultimately approach serve well increase space clustering solutions access .","code":""},{"path":"https://branchlab.github.io/metasnf/articles/snf_schemes.html","id":"domain","dir":"Articles","previous_headings":"","what":"(3) “Domain”","title":"SNF Schemes","text":"snf_scheme = 3: Input data frames combined within domains concatenation combined single fused network SNF. way also quite similar spirit original SNF examples, initial distance matrix done entire domain time. approach can lead greatest information loss distance matrix calculation step, still offers additional way generate distinct cluster solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/snf_schemes.html","id":"custom-snf-schemes","dir":"Articles","previous_headings":"","what":"Custom SNF schemes","title":"SNF Schemes","text":"simple interface add custom SNF schemes time. different scheme like use, feel free submit suggestion package’s issues page.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/stability_measures.html","id":"data-set-up","dir":"Articles","previous_headings":"","what":"Data set-up","title":"Stability Measures","text":"begin start calculating resampling-based stability measures, ’ll build subsamples data list using subsample_dl function. my_dl_subsamples contains list 50 subsamples full data list. variation random 85% original observations. subsamples data list created, cluster solution must default, function returns one-element list: cluster_solutions, list cluster solution data frames corresponding provided data list subsamples. Setting parameters return_sim_mats return_solutions TRUE turn result function three-element list containing corresponding solutions data frames final fused similarity matrices cluster solutions, require objects stability calculations. function subsample_pairwise_aris can used calculate ARIs cluster solutions across subsamples. pairwise_aris list containing summary data frame ARIs subsamples row original settings data frame well another list generated inter-subsample ARIs result setting return_raw_aris TRUE. raw inter-subsample ARIs corresponding particualr settings data frame row can visualized heatmap: calculate information often pair observations clustered together across subsamples, can use calculate_coclustering function: output calculate_coclustering list containing following components: - cocluster_dfs: list data frames, one per cluster solution, shows number times every pair observations original cluster solution occurred subsample, number times every pair clustered together subsample, corresponding fraction times every pair clustered together subsample. - cocluster_ss_mats: number times every pair observations occurred subsample, formatted pairwise matrix. - cocluster_sc_mats: number times every pair observations occurred cluster, formatted pairwise matrix. - cocluster_cf_mats: fraction times every pair observations occurred cluster, formatted pairwise matrix. - cocluster_summary: Among pairs observations clustered together original cluster solution, mean fraction pairs remained clustered together across subsample-derived solutions. information formatted data frame one row per cluster solution. cocluster_dfs component can used visualize co-clustering across subsamples density plot: heatmap:","code":"library(metasnf)  my_dl <- data_list(     list(cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(cort_sa, \"cortical_area\", \"neuroimaging\", \"continuous\"),     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(income, \"household_income\", \"demographics\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"unique_id\" )  set.seed(42) sc <- snf_config(     my_dl,     n_solutions = 4,     max_k = 40 )  sol_df <- batch_snf(my_dl, sc) my_dl_subsamples <- subsample_dl(     my_dl,     n_subsamples = 50,     subsample_fraction = 0.85 ) batch_subsample_results <- batch_snf_subsamples(     my_dl_subsamples,     sc,     verbose = TRUE ) pairwise_aris <- subsample_pairwise_aris(     batch_subsample_results,     verbose = TRUE ) inter_ss_ari_hm <- ComplexHeatmap::Heatmap(     pairwise_aris$\"raw_aris\"$\"s1\",     heatmap_legend_param = list(         color_bar = \"continuous\",         title = \"Inter-Subsample\\nARI\",         at = c(0, 0.5, 1)     ),     show_column_names = FALSE,     show_row_names = FALSE ) coclustering_results <- calculate_coclustering(     batch_subsample_results,     sol_df,     verbose = TRUE )  coclustering_results$\"cocluster_summary\" cocluster_dfs <- coclustering_results$\"cocluster_dfs\"  cocluster_density(cocluster_dfs[[1]]) # Fraction of co-clustering between observations, grouped by original # cluster membership cocluster_heatmap(     cocluster_dfs[[1]],     dl = my_dl,     top_hm = list(         \"Income\" = \"household_income\",         \"Pubertal Status\" = \"pubertal_status\"     ),     annotation_colours = list(         \"Pubertal Status\" = colour_scale(             c(1, 4),             min_colour = \"black\",             max_colour = \"purple\"         ),         \"Income\" = colour_scale(             c(0, 4),             min_colour = \"black\",             max_colour = \"red\"         )     ) )"},{"path":"https://branchlab.github.io/metasnf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Prashanth S Velayudhan. Author, maintainer. Xiaoqiao Xu. Author. Prajkta Kallurkar. Author. Ana Patricia Balbon. Author. Maria T Secara. Author. Adam Taback. Author. Denise Sabac. Author. Nicholas Chan. Author. Shihao Ma. Author. Bo Wang. Author. Daniel Felsky. Author. Stephanie H Ameis. Author. Brian Cox. Author. Colin Hawco. Author. Lauren Erdman. Author. Anne L Wheeler. Author, thesis advisor.","code":""},{"path":"https://branchlab.github.io/metasnf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Velayudhan P, Xu X, Kallurkar P, Balbon , Secara M, Taback , Sabac D, Chan N, Ma S, Wang B, Felsky D, Ameis S, Cox B, Hawco C, Erdman L, Wheeler (2025). metasnf: Meta Clustering Similarity Network Fusion. R package version 2.1.0, https://branchlab.github.io/metasnf/.","code":"@Manual{,   title = {metasnf: Meta Clustering with Similarity Network Fusion},   author = {Prashanth S Velayudhan and Xiaoqiao Xu and Prajkta Kallurkar and Ana Patricia Balbon and Maria T Secara and Adam Taback and Denise Sabac and Nicholas Chan and Shihao Ma and Bo Wang and Daniel Felsky and Stephanie H Ameis and Brian Cox and Colin Hawco and Lauren Erdman and Anne L Wheeler},   year = {2025},   note = {R package version 2.1.0},   url = {https://branchlab.github.io/metasnf/}, }"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/index.html","id":"brief-overview","dir":"","previous_headings":"","what":"Brief Overview","title":"Meta Clustering with Similarity Network Fusion","text":"metaSNF R package facilitates usage meta clustering paradigm described (Caruana et al. 2006) similarity network fusion (SNF) data integration procedure developed (Wang et al. 2014). package offers comprehensive suite tools assist users transforming multi-modal tabular data cluster solutions, decision making clustering process, visualization along way strong emphasis context-specific utility principled validation results.","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Meta Clustering with Similarity Network Fusion","text":"need R version 4.1.0 higher install package. metaSNF can installed CRAN: Development versions can installed GitHub:","code":"install.packages(\"metasnf\") # Latest development version devtools::install_github(\"BRANCHlab/metasnf\")  # Install a specific tagged version devtools::install_github(\"BRANCHlab/metasnf@v2.1.0\")"},{"path":"https://branchlab.github.io/metasnf/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Meta Clustering with Similarity Network Fusion","text":"Minimal usage package looks like : Check tutorial vignettes learn package can used: Simple usage package Complex usage package tutorials can found “articles” section documentation home page: https://branchlab.github.io/metasnf/index.html","code":"# Load the package library(metasnf)  # Setting up the data dl <- data_list(     list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(abcd_income, \"household_income\", \"demographics\", \"continuous\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\" ) #> ℹ 176 observations dropped due to incomplete data.  # Specifying 5 different sets of settings for SNF set.seed(42) sc <- snf_config(     dl,     n_solutions = 5,     max_k = 40 ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  # This matrix has clustering solutions for each of the 5 SNF runs! sol_df <- batch_snf(dl, sc)  sol_df #> 5 cluster solutions of 100 observations: #> solution nclust mc uid_NDAR_INV0567T2Y9 uid_NDAR_INV0IZ157F8  #>        1      2  .                    1                    2  #>        2      2  .                    2                    1  #>        3     10  .                    1                    9  #>        4      2  .                    2                    1  #>        5      8  .                    1                    7  #> 98 observations not shown. #> Use `print(n = ...)` to change the number of rows printed. #> Use `t()` to view compact cluster solution format.  t(sol_df) #> 5 cluster solutions of 100 observations: #>                  uid      s1    s2    s3    s4    s5  #> uid_NDAR_INV0567T2Y9       1     2     1     2     1 #> uid_NDAR_INV0IZ157F8       2     1     9     1     7 #> uid_NDAR_INV0J4PYA5F       1     2     7     2     3 #> uid_NDAR_INV10OMKVLE       2     1     8     1     4 #> uid_NDAR_INV15FPCW4O       1     2     2     2     5 #> uid_NDAR_INV19NB4RJK       1     2     9     2     7 #> uid_NDAR_INV1HLGR738       1     2     9     2     7 #> uid_NDAR_INV1KR0EZFU       2     1     9     2     7 #> uid_NDAR_INV1L3Y9EOP       1     2     2     2     5 #> uid_NDAR_INV1TCP5GNM       1     2     8     2     4 #> 90 observations not shown."},{"path":"https://branchlab.github.io/metasnf/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Meta Clustering with Similarity Network Fusion","text":"use meta clustering? Clustering algorithms seek solutions members cluster similar members distinct clusters dissimilar . sufficiently noisy datasets many qualitatively distinct solutions similar scores clustering quality exist, necessarily case top solution selected clustering algorithm also useful one user’s context. address issue, original meta clustering procedure Caruana et al., 2006 involved generating large number reasonable clustering solutions, clustering solutions qualitatively similar ones, user examine “meta clusters” find something seems like ’ll useful. use SNF? clinical data setting, often access patient data across wide range domains, imaging, genetics, biomarkers, demographics. trying extract subtypes information, direct concatenation data followed cluster analysis can result substantial amount lost (valuable) signal contained individual domain. Empirically, SNF demonstrated effectively integrate highly diverse patient data purposes clinical subtyping.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/index.html","id":"example-workflows","dir":"","previous_headings":"Documentation","what":"Example workflows","title":"Meta Clustering with Similarity Network Fusion","text":"Simple Complex","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"essential-objects","dir":"","previous_headings":"Documentation","what":"Essential objects","title":"Meta Clustering with Similarity Network Fusion","text":"SNF config Data list","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"further-customization-of-generated-solutions","dir":"","previous_headings":"Documentation","what":"Further customization of generated solutions","title":"Meta Clustering with Similarity Network Fusion","text":"SNF schemes Distance metrics Clustering algorithms Feature weighting","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"additional-functionality","dir":"","previous_headings":"Documentation","what":"Additional functionality","title":"Meta Clustering with Similarity Network Fusion","text":"Stability measures consensus clustering Removing unwanted signal Parallel processing Label propagation Imputations NMI scores","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"plotting","dir":"","previous_headings":"Documentation","what":"Plotting","title":"Meta Clustering with Similarity Network Fusion","text":"Correlation plots Similarity matrix heatmaps Manhattan plots Alluvial plots Feature plots","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD anxiety data — abcd_anxiety","title":"Mock ABCD anxiety data — abcd_anxiety","text":"randomly shuffled anonymized copy anxiety data NIMH Data archive. original file used pdem02.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cbcl_anxiety.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD anxiety data — abcd_anxiety","text":"","code":"abcd_anxiety"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":"abcd-anxiety","dir":"Reference","previous_headings":"","what":"abcd_anxiety","title":"Mock ABCD anxiety data — abcd_anxiety","text":"data frame 275 rows 2 columns: patient unique identifier ABCD dataset cbcl_anxiety_r Ordinal value impairment CBCL anxiety, either 0 (impairment), 1 (borderline clinical), 2 (clinically impaired)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD anxiety data — abcd_anxiety","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD ","title":"Mock ABCD ","text":"randomly shuffled anonymized copy depression data NIMH Data archive. original file used pdem02.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cbcl_depress. data transformed categorical colour values demonstrate Chi-squared test capabilities extend_solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD ","text":"","code":"abcd_colour"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":"abcd-colour","dir":"Reference","previous_headings":"","what":"abcd_colour","title":"Mock ABCD ","text":"data frame 275 rows 2 columns: patient unique identifier ABCD dataset colour Categorical transformation cbcl_depress.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD ","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD cortical surface area data — abcd_cort_sa","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"randomly shuffled anonymized copy cortical surface area data NIMH Data archive. original file used mrisdp10201.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cort_t.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"","code":"abcd_cort_sa"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":"abcd-cort-sa","dir":"Reference","previous_headings":"","what":"abcd_cort_sa","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"data frame 188 rows 152 columns: patient unique identifier ABCD dataset ... Cortical surface areas various ROIs (mm^2, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD cortical thickness data — abcd_cort_t","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"randomly shuffled anonymized copy cortical thickness data NIMH Data archive. original file used mrisdp10201.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cort_t.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"","code":"abcd_cort_t"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":"abcd-cort-t","dir":"Reference","previous_headings":"","what":"abcd_cort_t","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"data frame 188 rows 152 columns: patient unique identifier ABCD dataset ... Cortical thicknesses various ROIs (mm^3, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD depression data — abcd_depress","title":"Mock ABCD depression data — abcd_depress","text":"randomly shuffled anonymized copy depression data NIMH Data archive. original file used pdem02.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cbcl_depress.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD depression data — abcd_depress","text":"","code":"abcd_depress"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":"abcd-depress","dir":"Reference","previous_headings":"","what":"abcd_depress","title":"Mock ABCD depression data — abcd_depress","text":"data frame 275 rows 2 columns: patient unique identifier ABCD dataset cbcl_depress_r Ordinal value impairment CBCL anxiety, either 0 (impairment), 1 (borderline clinical), 2 (clinically impaired)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD depression data — abcd_depress","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_h_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD income data — abcd_h_income","title":"Mock ABCD income data — abcd_h_income","text":"Like abcd_income, NAs patient column","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_h_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD income data — abcd_h_income","text":"","code":"abcd_h_income"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_h_income.html","id":"abcd-income","dir":"Reference","previous_headings":"","what":"abcd_income","title":"Mock ABCD income data — abcd_h_income","text":"data frame 300 rows 2 columns: patient unique identifier ABCD dataset household_income Household income 3 category levels (low = 1, medium = 2, high = 3)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_h_income.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD income data — abcd_h_income","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD income data — abcd_income","title":"Mock ABCD income data — abcd_income","text":"randomly shuffled anonymized copy income data NIMH Data archive. original file used pdem02.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_income.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD income data — abcd_income","text":"","code":"abcd_income"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":"abcd-income","dir":"Reference","previous_headings":"","what":"abcd_income","title":"Mock ABCD income data — abcd_income","text":"data frame 300 rows 2 columns: patient unique identifier ABCD dataset household_income Household income 3 category levels (low = 1, medium = 2, high = 3)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD income data — abcd_income","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD pubertal status data — abcd_pubertal","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"randomly shuffled anonymized copy pubertal status data NIMH Data archive. original files used abcd_ssphp01.txt abcd_ssphy01.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_pubertal_status.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"","code":"abcd_pubertal"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":"abcd-pubertal","dir":"Reference","previous_headings":"","what":"abcd_pubertal","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"data frame 275 rows 2 columns: patient unique identifier ABCD dataset pubertal_status Average reported pubertal status child parent (1-5 categorical scale)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD subcortical volumes data — abcd_subc_v","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"randomly shuffled anonymized copy subcortical volume data NIMH Data archive. original file used smrip10201.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_subc_v.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"","code":"abcd_subc_v"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":"abcd-subc-v","dir":"Reference","previous_headings":"","what":"abcd_subc_v","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"data frame 174 rows 31 columns: patient unique identifier ABCD dataset ... Subcortical volumes various ROIs (mm^3, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns to a data frame — add_columns","title":"Add columns to a data frame — add_columns","text":"Add new columns data frame specifying names value initialize .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns to a data frame — add_columns","text":"","code":"add_columns(df, cols, value = NA)"},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns to a data frame — add_columns","text":"df data frame extend. cols vector containing new column names. value values stored newly added columns. NA default.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns to a data frame — add_columns","text":"data frame containing columns df argument well new columns specified cols argument.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_settings_df_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Add rows to a settings_df — add_settings_df_rows","title":"Add rows to a settings_df — add_settings_df_rows","text":"Add rows settings_df","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_settings_df_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add rows to a settings_df — add_settings_df_rows","text":"","code":"add_settings_df_rows(   sdf,   n_solutions = 0,   min_removed_inputs = 0,   max_removed_inputs = sum(startsWith(colnames(sdf), \"inc_\")) - 1,   dropout_dist = \"exponential\",   min_alpha = NULL,   max_alpha = NULL,   min_k = NULL,   max_k = NULL,   min_t = NULL,   max_t = NULL,   alpha_values = NULL,   k_values = NULL,   t_values = NULL,   possible_snf_schemes = c(1, 2, 3),   clustering_algorithms = NULL,   continuous_distances = NULL,   discrete_distances = NULL,   ordinal_distances = NULL,   categorical_distances = NULL,   mixed_distances = NULL,   dfl = NULL,   snf_input_weights = NULL,   snf_domain_weights = NULL,   retry_limit = 10,   allow_duplicates = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/add_settings_df_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add rows to a settings_df — add_settings_df_rows","text":"sdf existing settings data frame n_solutions Number rows generate settings data frame. min_removed_inputs smallest number input data frames may randomly removed. default, 0. max_removed_inputs largest number input data frames may randomly removed. default, 1 less provided input data frames data list. dropout_dist Parameter controlling random removal input data frames occur. Can \"none\" (input data frames randomly removed), \"uniform\" (uniformly sample min_removed_inputs max_removed_inputs determine number input data frames remove), \"exponential\" (pick number input data frames remove sampling min_removed_inputs max_removed_inputs exponential distribution; default). min_alpha minimum value alpha hyperparameter can . Random assigned value alpha row obtained uniformly sampling numbers min_alpha max_alpha intervals 0.1. used conjunction alpha_values parameter. max_alpha maximum value alpha hyperparameter can . See min_alpha parameter. used conjunction alpha_values parameter. min_k minimum value k hyperparameter can . Random assigned value k row obtained uniformly sampling numbers min_k max_k intervals 1. used conjunction k_values parameter. max_k maximum value k hyperparameter can . See min_k parameter. used conjunction k_values parameter. min_t minimum value t hyperparameter can . Random assigned value t row obtained uniformly sampling numbers min_t max_t intervals 1. used conjunction t_values parameter. max_t maximum value t hyperparameter can . See min_t parameter. used conjunction t_values parameter. alpha_values number numeric vector set possible values alpha can take . Value obtained uniformly sampling vector. used conjunction min_alpha max_alpha parameters. k_values number numeric vector set possible values k can take . Value obtained uniformly sampling vector. used conjunction min_k max_k parameters. t_values number numeric vector set possible values t can take . Value obtained uniformly sampling vector. used conjunction min_t max_t parameters. possible_snf_schemes vector containing possible snf_schemes uniformly randomly select . default, vector contains 3 possible schemes: c(1, 2, 3). 1 corresponds \"individual\" scheme, 2 corresponds \"domain\" scheme, 3 corresponds \"two-step\" scheme. clustering_algorithms list clustering algorithms uniformly randomly pick clustering. specified, randomly select spectral clustering using eigen-gap heuristic spectral clustering using rotation cost heuristic. See ?clust_fns_list details running custom clustering algorithms. continuous_distances vector continuous distance metrics use custom dist_fns_list provided. discrete_distances vector categorical distance metrics use custom dist_fns_list provided. ordinal_distances vector categorical distance metrics use custom dist_fns_list provided. categorical_distances vector categorical distance metrics use custom dist_fns_list provided. mixed_distances vector mixed distance metrics use custom dist_fns_list provided. dfl List containing distance metrics vary . See ?generate_dist_fns_list. snf_input_weights Nested list containing weights SNF used merge individual input measures (see ?generate_snf_weights) snf_domain_weights Nested list containing weights SNF used merge domains (see ?generate_snf_weights) retry_limit maximum number attempts generate novel row. function return matrices identical rows. range requested possible settings tightens number requested rows increases, risk randomly generating row already exists increases. new random row matched existing row retry_limit number times, function terminate. allow_duplicates TRUE, enables creation settings data frame duplicate non-feature weighting related hyperparameters. function used paired custom weights matrix non-duplicate rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_settings_df_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add rows to a settings_df — add_settings_df_rows","text":"settings data frame","code":""},{"path":"https://branchlab.github.io/metasnf/reference/adjusted_rand_index_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of pairwise adjusted rand indices between solutions — adjusted_rand_index_heatmap","title":"Heatmap of pairwise adjusted rand indices between solutions — adjusted_rand_index_heatmap","text":"Defunct function create ARI heatmap. Please use meta_cluster_heatmap() instead.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/adjusted_rand_index_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of pairwise adjusted rand indices between solutions — adjusted_rand_index_heatmap","text":"","code":"adjusted_rand_index_heatmap(   aris,   order = NULL,   cluster_rows = FALSE,   cluster_columns = FALSE,   log_graph = FALSE,   scale_diag = \"none\",   min_colour = \"#282828\",   max_colour = \"firebrick2\",   col = circlize::colorRamp2(c(min(aris), max(aris)), c(min_colour, max_colour)),   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/adjusted_rand_index_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of pairwise adjusted rand indices between solutions — adjusted_rand_index_heatmap","text":"aris Matrix adjusted rand indices calc_aris() order Numeric vector containing row order heatmap. cluster_rows Whether rows clustered. cluster_columns Whether columns clustered. log_graph TRUE, log transforms graph. scale_diag Method rescaling matrix diagonals. Can \"none\" (change diagonals), \"mean\" (replace diagonals average value -diagonals), \"zero\" (replace diagonals 0). min_colour Colour used lowest value heatmap. max_colour Colour used highest value heatmap. col Colour ramp use heatmap. ... Additional parameters passed similarity_matrix_heatmap(), function function wraps.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/adjusted_rand_index_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of pairwise adjusted rand indices between solutions — adjusted_rand_index_heatmap","text":"Returns heatmap (class \"Heatmap\" package ComplexHeatmap) displays pairwise adjusted Rand indices (similarities) cluster solutions provided solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/age_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock age data — age_df","title":"Mock age data — age_df","text":"Mock age data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/age_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock age data — age_df","text":"","code":"age_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/age_df.html","id":"age-df","dir":"Reference","previous_headings":"","what":"age_df","title":"Mock age data — age_df","text":"data frame 200 rows 2 columns: patient_id Random three-digit number uniquely identifying patient age Mock age feature","code":""},{"path":"https://branchlab.github.io/metasnf/reference/age_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock age data — age_df","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/alluvial_cluster_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Alluvial plot of patients across cluster counts and important features — alluvial_cluster_plot","title":"Alluvial plot of patients across cluster counts and important features — alluvial_cluster_plot","text":"function creates alluvial plot shows observations similarity matrix clustered set clustering functions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/alluvial_cluster_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alluvial plot of patients across cluster counts and important features — alluvial_cluster_plot","text":"","code":"alluvial_cluster_plot(   cluster_sequence,   similarity_matrix,   dl = NULL,   data = NULL,   key_outcome,   key_label = key_outcome,   extra_outcomes = NULL,   title = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/alluvial_cluster_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alluvial plot of patients across cluster counts and important features — alluvial_cluster_plot","text":"cluster_sequence list clustering algorithms. similarity_matrix similarity matrix. dl data list. data data frame contains features include plot. key_outcome name feature determines patient stream coloured alluvial plot. key_label Name key outcome used plot legend. extra_outcomes Names additional features add plot. title Title plot.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/alluvial_cluster_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alluvial plot of patients across cluster counts and important features — alluvial_cluster_plot","text":"alluvial plot (class \"gg\" \"ggplot\") showing distribution feature across varying number cluster solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/alluvial_cluster_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alluvial plot of patients across cluster counts and important features — alluvial_cluster_plot","text":"","code":"input_dl <- data_list(     list(gender_df, \"gender\", \"demographics\", \"categorical\"),     list(diagnosis_df, \"diagnosis\", \"clinical\", \"categorical\"),     uid = \"patient_id\" )  sc <- snf_config(input_dl, n_solutions = 1) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  sol_df <- batch_snf(input_dl, sc, return_sim_mats = TRUE)  sim_mats <- sim_mats_list(sol_df)  clust_fn_sequence <- list(spectral_two, spectral_four)  alluvial_cluster_plot(     cluster_sequence = clust_fn_sequence,     similarity_matrix = sim_mats[[1]],     dl = input_dl,     key_outcome = \"gender\",     key_label = \"Gender\",     extra_outcomes = \"diagnosis\",     title = \"Gender Across Cluster Counts\" )"},{"path":"https://branchlab.github.io/metasnf/reference/anxiety.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD anxiety data — anxiety","title":"Mock ABCD anxiety data — anxiety","text":"Like mock data frame \"abcd_colour\", \"unique_id\" \"uid\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/anxiety.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD anxiety data — anxiety","text":"","code":"anxiety"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/anxiety.html","id":"anxiety","dir":"Reference","previous_headings":"","what":"anxiety","title":"Mock ABCD anxiety data — anxiety","text":"data frame 275 rows 2 columns: unique_id unique identifier ABCD dataset cbcl_anxiety_r Ordinal value impairment CBCL anxiety, either 0 (impairment), 1 (borderline clinical), 2 (clinically impaired)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/anxiety.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD anxiety data — anxiety","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dll.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort data frames in a data list by their unique ID values — arrange_dll","title":"Sort data frames in a data list by their unique ID values — arrange_dll","text":"Sort data frames data list unique ID values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort data frames in a data list by their unique ID values — arrange_dll","text":"","code":"arrange_dll(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort data frames in a data list by their unique ID values — arrange_dll","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort data frames in a data list by their unique ID values — arrange_dll","text":"data list-like object data frames sorted uid.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a data_list class object into a data.frame class object — as.data.frame.data_list","title":"Coerce a data_list class object into a data.frame class object — as.data.frame.data_list","text":"Horizontally joins data frames within data list single data frame, using uid attribute joining key.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a data_list class object into a data.frame class object — as.data.frame.data_list","text":"","code":"# S3 method for class 'data_list' as.data.frame(x, row.names = NULL, optional = FALSE, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a data_list class object into a data.frame class object — as.data.frame.data_list","text":"x data_list class object. row.names Additional parameter passed .data.frame(). optional Additional parameter passed .data.frame(). ... Additional parameter passed .data.frame().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a data_list class object into a data.frame class object — as.data.frame.data_list","text":"dl_df data.frame class object features observations dl.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a ext_solutions_df class object into a data.frame class object — as.data.frame.ext_solutions_df","title":"Coerce a ext_solutions_df class object into a data.frame class object — as.data.frame.ext_solutions_df","text":"Coerce ext_solutions_df class object data.frame class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a ext_solutions_df class object into a data.frame class object — as.data.frame.ext_solutions_df","text":"","code":"# S3 method for class 'ext_solutions_df' as.data.frame(   x,   row.names = NULL,   optional = FALSE,   keep_attributes = FALSE,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a ext_solutions_df class object into a data.frame class object — as.data.frame.ext_solutions_df","text":"x ext_solutions_df class object. row.names Additional parameter passed .data.frame(). optional Additional parameter passed .data.frame(). keep_attributes TRUE, resulting data frame includes settings data frame weights matrix. ... Additional parameter passed .data.frame().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a ext_solutions_df class object into a data.frame class object — as.data.frame.ext_solutions_df","text":"data.frame class object columns x contained solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.settings_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a settings_df class object into a data.frame class object — as.data.frame.settings_df","title":"Coerce a settings_df class object into a data.frame class object — as.data.frame.settings_df","text":"Coerce settings_df class object data.frame class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.settings_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a settings_df class object into a data.frame class object — as.data.frame.settings_df","text":"","code":"# S3 method for class 'settings_df' as.data.frame(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.settings_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a settings_df class object into a data.frame class object — as.data.frame.settings_df","text":"x settings_df class object. ... Additional parameter passed .data.frame().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.settings_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a settings_df class object into a data.frame class object — as.data.frame.settings_df","text":"data.frame class object columns x contained solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.snf_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a settings_df class object into a data.frame class object — as.data.frame.snf_config","title":"Coerce a settings_df class object into a data.frame class object — as.data.frame.snf_config","text":"Coerce settings_df class object data.frame class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.snf_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a settings_df class object into a data.frame class object — as.data.frame.snf_config","text":"","code":"# S3 method for class 'snf_config' as.data.frame(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.snf_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a settings_df class object into a data.frame class object — as.data.frame.snf_config","text":"x settings_df class object. ... Additional parameter passed .data.frame().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.snf_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a settings_df class object into a data.frame class object — as.data.frame.snf_config","text":"data.frame class object columns x contained solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a solutions_df class object into a data.frame class object — as.data.frame.solutions_df","title":"Coerce a solutions_df class object into a data.frame class object — as.data.frame.solutions_df","text":"Coerce solutions_df class object data.frame class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a solutions_df class object into a data.frame class object — as.data.frame.solutions_df","text":"","code":"# S3 method for class 'solutions_df' as.data.frame(   x,   row.names = NULL,   optional = FALSE,   keep_attributes = FALSE,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a solutions_df class object into a data.frame class object — as.data.frame.solutions_df","text":"x solutions_df class object. row.names Additional parameter passed .data.frame(). optional Additional parameter passed .data.frame(). keep_attributes TRUE, resulting data frame includes settings data frame weights matrix. ... Additional parameter passed .data.frame().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a solutions_df class object into a data.frame class object — as.data.frame.solutions_df","text":"data.frame class object columns x contained solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.t_ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a t_ext_solutions_df class object into a data.frame class object — as.data.frame.t_ext_solutions_df","title":"Coerce a t_ext_solutions_df class object into a data.frame class object — as.data.frame.t_ext_solutions_df","text":"Coerce t_ext_solutions_df class object data.frame class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.t_ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a t_ext_solutions_df class object into a data.frame class object — as.data.frame.t_ext_solutions_df","text":"","code":"# S3 method for class 't_ext_solutions_df' as.data.frame(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.t_ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a t_ext_solutions_df class object into a data.frame class object — as.data.frame.t_ext_solutions_df","text":"x t_ext_solutions_df class object. ... Additional parameter passed .data.frame().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.t_ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a t_ext_solutions_df class object into a data.frame class object — as.data.frame.t_ext_solutions_df","text":"data.frame class object columns x contained solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.t_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a t_solutions_df class object into a data.frame class object — as.data.frame.t_solutions_df","title":"Coerce a t_solutions_df class object into a data.frame class object — as.data.frame.t_solutions_df","text":"Coerce t_solutions_df class object data.frame class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.t_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a t_solutions_df class object into a data.frame class object — as.data.frame.t_solutions_df","text":"","code":"# S3 method for class 't_solutions_df' as.data.frame(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.t_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a t_solutions_df class object into a data.frame class object — as.data.frame.t_solutions_df","text":"x t_solutions_df class object. ... Additional parameter passed .data.frame().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.t_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a t_solutions_df class object into a data.frame class object — as.data.frame.t_solutions_df","text":"data.frame class object columns x contained solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a weights_matrix class object into a data.frame class object — as.data.frame.weights_matrix","title":"Coerce a weights_matrix class object into a data.frame class object — as.data.frame.weights_matrix","text":"Coerce weights_matrix class object data.frame class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a weights_matrix class object into a data.frame class object — as.data.frame.weights_matrix","text":"","code":"# S3 method for class 'weights_matrix' as.data.frame(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a weights_matrix class object into a data.frame class object — as.data.frame.weights_matrix","text":"x weights_matrix class object. ... Additional parameter passed .data.frame().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.data.frame.weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a weights_matrix class object into a data.frame class object — as.data.frame.weights_matrix","text":"data.frame class object columns x contained solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.clust_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a clust_fns_list class object into a list class object — as.list.clust_fns_list","title":"Coerce a clust_fns_list class object into a list class object — as.list.clust_fns_list","text":"Coerce clust_fns_list class object list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.clust_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a clust_fns_list class object into a list class object — as.list.clust_fns_list","text":"","code":"# S3 method for class 'clust_fns_list' as.list(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.list.clust_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a clust_fns_list class object into a list class object — as.list.clust_fns_list","text":"x clust_fns_list class object. ... Additional parameter passed .list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.clust_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a clust_fns_list class object into a list class object — as.list.clust_fns_list","text":"list class object functions x.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a data_list class object into a list class object — as.list.data_list","title":"Coerce a data_list class object into a list class object — as.list.data_list","text":"Coerce data_list class object list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a data_list class object into a list class object — as.list.data_list","text":"","code":"# S3 method for class 'data_list' as.list(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.list.data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a data_list class object into a list class object — as.list.data_list","text":"x data_list class object. ... Additional parameter passed .list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a data_list class object into a list class object — as.list.data_list","text":"list class object objects x.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.dist_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a dist_fns_list class object into a list class object — as.list.dist_fns_list","title":"Coerce a dist_fns_list class object into a list class object — as.list.dist_fns_list","text":"Coerce dist_fns_list class object list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.dist_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a dist_fns_list class object into a list class object — as.list.dist_fns_list","text":"","code":"# S3 method for class 'dist_fns_list' as.list(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.list.dist_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a dist_fns_list class object into a list class object — as.list.dist_fns_list","text":"x dist_fns_list class object. ... Additional parameter passed .list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.dist_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a dist_fns_list class object into a list class object — as.list.dist_fns_list","text":"list class object functions x.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.sim_mats_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a sim_mats_list class object into a list class object — as.list.sim_mats_list","title":"Coerce a sim_mats_list class object into a list class object — as.list.sim_mats_list","text":"Coerce sim_mats_list class object list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.sim_mats_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a sim_mats_list class object into a list class object — as.list.sim_mats_list","text":"","code":"# S3 method for class 'sim_mats_list' as.list(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.list.sim_mats_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a sim_mats_list class object into a list class object — as.list.sim_mats_list","text":"x sim_mats_list class object. ... Additional parameter passed .list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.sim_mats_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a sim_mats_list class object into a list class object — as.list.sim_mats_list","text":"list class object functions x.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.snf_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a snf_config class object into a list class object — as.list.snf_config","title":"Coerce a snf_config class object into a list class object — as.list.snf_config","text":"Coerce snf_config class object list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.snf_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a snf_config class object into a list class object — as.list.snf_config","text":"","code":"# S3 method for class 'snf_config' as.list(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.list.snf_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a snf_config class object into a list class object — as.list.snf_config","text":"x snf_config class object. ... Additional parameter passed .list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.list.snf_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a snf_config class object into a list class object — as.list.snf_config","text":"list class object functions x.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.matrix.ari_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a ari_matrix class object into a matrix class object — as.matrix.ari_matrix","title":"Coerce a ari_matrix class object into a matrix class object — as.matrix.ari_matrix","text":"Coerce ari_matrix class object matrix class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.matrix.ari_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a ari_matrix class object into a matrix class object — as.matrix.ari_matrix","text":"","code":"# S3 method for class 'ari_matrix' as.matrix(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.matrix.ari_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a ari_matrix class object into a matrix class object — as.matrix.ari_matrix","text":"x ari_matrix class object. ... Additional parameter passed .matrix().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.matrix.ari_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a ari_matrix class object into a matrix class object — as.matrix.ari_matrix","text":"matrix array class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.matrix.weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a weights_matrix class object into a matrix class object — as.matrix.weights_matrix","title":"Coerce a weights_matrix class object into a matrix class object — as.matrix.weights_matrix","text":"Coerce weights_matrix class object matrix class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.matrix.weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a weights_matrix class object into a matrix class object — as.matrix.weights_matrix","text":"","code":"# S3 method for class 'weights_matrix' as.matrix(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/as.matrix.weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a weights_matrix class object into a matrix class object — as.matrix.weights_matrix","text":"x weights_matrix class object. ... Additional parameter passed .matrix().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as.matrix.weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a weights_matrix class object into a matrix class object — as.matrix.weights_matrix","text":"matrix array class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_ari_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to an ARI matrix — as_ari_matrix","title":"Convert an object to an ARI matrix — as_ari_matrix","text":"function coerces non-ari_matrix class objects ari_matrix class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_ari_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to an ARI matrix — as_ari_matrix","text":"","code":"as_ari_matrix(x)"},{"path":"https://branchlab.github.io/metasnf/reference/as_ari_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to an ARI matrix — as_ari_matrix","text":"x object convert weights matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_ari_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to an ARI matrix — as_ari_matrix","text":"ari_matrix class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a data list — as_data_list","title":"Convert an object to a data list — as_data_list","text":"function coerces non-data_list class objects data_list class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a data list — as_data_list","text":"","code":"as_data_list(x)"},{"path":"https://branchlab.github.io/metasnf/reference/as_data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a data list — as_data_list","text":"x object convert data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a data list — as_data_list","text":"data_list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_settings_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a settings data frame — as_settings_df","title":"Convert an object to a settings data frame — as_settings_df","text":"function coerces non-settings_df class objects settings_df class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_settings_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a settings data frame — as_settings_df","text":"","code":"as_settings_df(x)"},{"path":"https://branchlab.github.io/metasnf/reference/as_settings_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a settings data frame — as_settings_df","text":"x object convert data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_settings_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a settings data frame — as_settings_df","text":"settings_df class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_sim_mats_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a similarity matrix list — as_sim_mats_list","title":"Convert an object to a similarity matrix list — as_sim_mats_list","text":"function converts non-sim_mats_list class objects sim_mats_list class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_sim_mats_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a similarity matrix list — as_sim_mats_list","text":"","code":"as_sim_mats_list(x)"},{"path":"https://branchlab.github.io/metasnf/reference/as_sim_mats_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a similarity matrix list — as_sim_mats_list","text":"x object convert sim_mats_list. Must list square matrices identical column row names.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_sim_mats_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a similarity matrix list — as_sim_mats_list","text":"sim_mats_list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_snf_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a snf config — as_snf_config","title":"Convert an object to a snf config — as_snf_config","text":"function coerces non-snf_config class objects snf_config class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_snf_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a snf config — as_snf_config","text":"","code":"as_snf_config(x)"},{"path":"https://branchlab.github.io/metasnf/reference/as_snf_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a snf config — as_snf_config","text":"x object convert snf config.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_snf_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a snf config — as_snf_config","text":"snf_config class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a weights matrix — as_weights_matrix","title":"Convert an object to a weights matrix — as_weights_matrix","text":"function converts non-weights_matrix objects weights_matrix class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a weights matrix — as_weights_matrix","text":"","code":"as_weights_matrix(x)"},{"path":"https://branchlab.github.io/metasnf/reference/as_weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a weights matrix — as_weights_matrix","text":"x object convert data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/as_weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a weights matrix — as_weights_matrix","text":"weights_matrix class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assemble_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a data frame and/or a data list into a single data frame — assemble_data","title":"Collapse a data frame and/or a data list into a single data frame — assemble_data","text":"Collapse data frame /data list single data frame","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assemble_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a data frame and/or a data list into a single data frame — assemble_data","text":"","code":"assemble_data(data, dl)"},{"path":"https://branchlab.github.io/metasnf/reference/assemble_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a data frame and/or a data list into a single data frame — assemble_data","text":"data data frame. dl nested list input data data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assemble_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse a data frame and/or a data list into a single data frame — assemble_data","text":"class \"data.frame\" object containing features provided data frame /data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assoc_pval_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of pairwise associations between features — assoc_pval_heatmap","title":"Heatmap of pairwise associations between features — assoc_pval_heatmap","text":"Heatmap pairwise associations features","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assoc_pval_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of pairwise associations between features — assoc_pval_heatmap","text":"","code":"assoc_pval_heatmap(   correlation_matrix,   scale_diag = \"max\",   cluster_rows = TRUE,   cluster_columns = TRUE,   show_row_names = TRUE,   show_column_names = TRUE,   show_heatmap_legend = FALSE,   confounders = NULL,   out_of_models = NULL,   annotation_colours = NULL,   labels_colour = NULL,   split_by_domain = FALSE,   dl = NULL,   significance_stars = TRUE,   slice_font_size = 8,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/assoc_pval_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of pairwise associations between features — assoc_pval_heatmap","text":"correlation_matrix Matrix containing pairwise association p-values. recommended way obtain matrix calc_assoc_pval function. scale_diag Parameter controls diagonals correlation_matrix adjusted heatmap. best viewing, set \"max\", match diagonals whichever pairwise association highest p-value. cluster_rows Parameter ComplexHeatmap::Heatmap. ignored split_by_domain also provided. cluster_columns Parameter ComplexHeatmap::Heatmap. ignored split_by_domain also provided. show_row_names Parameter ComplexHeatmap::Heatmap. show_column_names Parameter ComplexHeatmap::Heatmap. show_heatmap_legend Parameter ComplexHeatmap::Heatmap. confounders named list elements columns correlation_matrix names corresponding display names. out_of_models Like confounders, named list model measures (also present columns correlation_matrix). annotation_colours Named list heatmap annotations colours. labels_colour Vector colours use columns rows heatmap. split_by_domain Visually slice heatmap based feature domains. dl nested list input data data_list(). significance_stars TRUE (default), plots significance stars heatmap cells slice_font_size Font size domain separating labels. ... Additional parameters passed ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assoc_pval_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of pairwise associations between features — assoc_pval_heatmap","text":"Returns heatmap (class \"Heatmap\" package ComplexHeatmap) displays pairwise associations features provided correlation_matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assoc_pval_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap of pairwise associations between features — assoc_pval_heatmap","text":"","code":"#data_list <- data_list( #    list(income, \"household_income\", \"demographics\", \"ordinal\"), #    list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"), #    list(fav_colour, \"favourite_colour\", \"demographics\", \"categorical\"), #    list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"), #    list(depress, \"depressed\", \"behaviour\", \"ordinal\"), #    uid = \"unique_id\" #) # #assoc_pval_matrix <- calc_assoc_pval_matrix(data_list) #ap_heatmap <- assoc_pval_heatmap(assoc_pval_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/auto_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically plot features across clusters — auto_plot","title":"Automatically plot features across clusters — auto_plot","text":"Given single row solutions data frame data provided data list, function return series bar /jitter plots based feature types.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/auto_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically plot features across clusters — auto_plot","text":"","code":"auto_plot(   sol_df_row = NULL,   dl = NULL,   cluster_df = NULL,   return_plots = TRUE,   save = NULL,   jitter_width = 6,   jitter_height = 6,   bar_width = 6,   bar_height = 6,   verbose = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/auto_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically plot features across clusters — auto_plot","text":"sol_df_row single row solutions data frame. dl data list containing data plot. cluster_df Directly provide cluster_df rather solutions matrix. Useful plotting data label propagated results. return_plots TRUE, function return list plots. FALSE, function instead return full data frame used plotting. save string provided, plots saved string used prefix plot names. jitter_width Width jitter plots save specified. jitter_height Height jitter plots save specified. bar_width Width bar plots save specified. bar_height Height bar plots save specified. verbose TRUE, output progress console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/auto_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically plot features across clusters — auto_plot","text":"default, returns list plots (class \"gg\", \"ggplot\") one plot every feature provided data list /target list. return_plots FALSE, instead return single \"data.frame\" object containing every provided feature every observation long format.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/bar_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar plot separating a feature by cluster — bar_plot","title":"Bar plot separating a feature by cluster — bar_plot","text":"Bar plot separating feature cluster","code":""},{"path":"https://branchlab.github.io/metasnf/reference/bar_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar plot separating a feature by cluster — bar_plot","text":"","code":"bar_plot(df, feature)"},{"path":"https://branchlab.github.io/metasnf/reference/bar_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar plot separating a feature by cluster — bar_plot","text":"df data.frame containing cluster column feature plot. feature feature plot.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/bar_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar plot separating a feature by cluster — bar_plot","text":"bar plot (class \"gg\", \"ggplot\") showing distribution feature across clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_row_closure.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate closure function to run batch_snf in an apply-friendly format — batch_row_closure","title":"Generate closure function to run batch_snf in an apply-friendly format — batch_row_closure","text":"Generate closure function run batch_snf apply-friendly format","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_row_closure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate closure function to run batch_snf in an apply-friendly format — batch_row_closure","text":"","code":"batch_row_closure(   dl,   dfl,   cfl,   sdf,   wm,   similarity_matrix_dir,   return_sim_mats,   prog )"},{"path":"https://branchlab.github.io/metasnf/reference/batch_row_closure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate closure function to run batch_snf in an apply-friendly format — batch_row_closure","text":"dl nested list input data data_list(). dfl optional nested list containing distance metric function used various feature types (continuous, discrete, ordinal, categorical, mixed). See ?dist_fns_list details build . cfl List custom clustering algorithms apply final fused network. See ?clust_fns_list. sdf matrix indicating parameters iterate SNF . wm matrix containing feature weights use distance matrix calculation. See ?weights_matrix details build . similarity_matrix_dir specified, directory used save generated similarity matrices. return_sim_mats TRUE, function return list first element solutions data frame second element list similarity matrices row sol_df. Default FALSE. prog Progressr function update parallel processing progress","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_row_closure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate closure function to run batch_snf in an apply-friendly format — batch_row_closure","text":"\"function\" class object used run batch_snf lapply-form parallel processing.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":null,"dir":"Reference","previous_headings":"","what":"Run variations of SNF — batch_snf","title":"Run variations of SNF — batch_snf","text":"core function metasnf package. Using information stored settings_df (see ?settings_df) data list (see ?data_list), run repeated complete SNF pipelines generate broad space post-SNF cluster solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run variations of SNF — batch_snf","text":"","code":"batch_snf(dl, sc, processes = 1, return_sim_mats = FALSE, sim_mats_dir = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run variations of SNF — batch_snf","text":"dl nested list input data data_list(). sc snf_config class object stores sets hyperparameters used transform data dl cluster solutions. See ?settings_df https://branchlab.github.io/metasnf/articles/settings_df.html details. processes Specify number processes used complete SNF iterations 1 (default) Sequential processing: function iterate settings_df one row time loop. option make use multiple CPU cores, show progress bar. 2 higher: Parallel processing use future.apply::future_apply distribute SNF iterations across specified number CPU cores. higher number available cores, warning raised maximum number cores used. max: available cores used. return_sim_mats TRUE, function return list first element solutions data frame second element list similarity matrices row sol_df. Default FALSE. sim_mats_dir specified, directory used save generated similarity matrices.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run variations of SNF — batch_snf","text":"default, returns solutions data frame (class \"data.frame\"), data frame containing one row every row provided settings matrix, original columns settings data frame, new columns containing assigned cluster observation cluster solution derived row's settings. return_sim_mats TRUE, function instead return list containing solutions data frame well list final similarity matrices (class \"matrix\") generated SNF row settings data frame. suppress_clustering TRUE, solutions data frame returned output.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run variations of SNF — batch_snf","text":"","code":"input_dl <- data_list(     list(gender_df, \"gender\", \"demographics\", \"categorical\"),     list(diagnosis_df, \"diagnosis\", \"clinical\", \"categorical\"),     uid = \"patient_id\" )  sc <- snf_config(input_dl, n_solutions = 3) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  # A solutions data frame without similarity matrices: sol_df <- batch_snf(input_dl, sc)  # A solutions data frame with similarity matrices: sol_df <- batch_snf(input_dl, sc, return_sim_mats = TRUE) sim_mats_list(sol_df) #> A similarity matrix list storing 3 200x200 similarity matrices. #> Use `sim_mats_list[[i]]` to view the ith matrix. #>"},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_subsamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Run SNF clustering pipeline on a list of subsampled data lists — batch_snf_subsamples","title":"Run SNF clustering pipeline on a list of subsampled data lists — batch_snf_subsamples","text":"Run SNF clustering pipeline list subsampled data lists","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_subsamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run SNF clustering pipeline on a list of subsampled data lists — batch_snf_subsamples","text":"","code":"batch_snf_subsamples(   dl_subsamples,   sc,   processes = 1,   return_sim_mats = FALSE,   sim_mats_dir = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_subsamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run SNF clustering pipeline on a list of subsampled data lists — batch_snf_subsamples","text":"dl_subsamples list subsampled data lists. object generated function batch_snf_subsamples(). sc snf_config class object stores sets hyperparameters used transform data dl cluster solutions. See ?settings_df https://branchlab.github.io/metasnf/articles/settings_df.html details. processes Specify number processes used complete SNF iterations 1 (default) Sequential processing: function iterate settings_df one row time loop. option make use multiple CPU cores, show progress bar. 2 higher: Parallel processing use future.apply::future_apply distribute SNF iterations across specified number CPU cores. higher number available cores, warning raised maximum number cores used. max: available cores used. return_sim_mats TRUE, function return list first element solutions data frame second element list similarity matrices row sol_df. Default FALSE. sim_mats_dir specified, directory used save generated similarity matrices.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_subsamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run SNF clustering pipeline on a list of subsampled data lists — batch_snf_subsamples","text":"default, returns one-element list: cluster_solutions, list cluster solution data frames corresponding provided data list subsamples. Setting parameters return_sim_mats  return_solutions TRUE turn result function three-element list containing corresponding solutions data frames final fused similarity matrices cluster solutions, require objects stability calculations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_subsamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run SNF clustering pipeline on a list of subsampled data lists — batch_snf_subsamples","text":"","code":"# \\donttest{ my_dl <- data_list(     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(income, \"household_income\", \"demographics\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"unique_id\" ) #> ℹ 175 observations dropped due to incomplete data.  sc <- snf_config(my_dl, n_solutions = 5, max_k = 40) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  my_dl_subsamples <- subsample_dl(     my_dl,     n_subsamples = 20,     subsample_fraction = 0.85 )  batch_subsample_results <- batch_snf_subsamples(     my_dl_subsamples,     sc ) # }"},{"path":"https://branchlab.github.io/metasnf/reference/cache_a_complete_example_ext_sol_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Cached example extended solutions data frame — cache_a_complete_example_ext_sol_df","title":"Cached example extended solutions data frame — cache_a_complete_example_ext_sol_df","text":"extended solutions data frame used cached example \"a_complete_example.Rmd\" vignette.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cache_a_complete_example_ext_sol_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cached example extended solutions data frame — cache_a_complete_example_ext_sol_df","text":"","code":"cache_a_complete_example_ext_sol_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/cache_a_complete_example_ext_sol_df.html","id":"cache-a-complete-example-ext-sol-df","dir":"Reference","previous_headings":"","what":"cache_a_complete_example_ext_sol_df","title":"Cached example extended solutions data frame — cache_a_complete_example_ext_sol_df","text":"Contains 20 cluster solutions, 87 observations, p-values 336 features.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cache_a_complete_example_ext_sol_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cached example extended solutions data frame — cache_a_complete_example_ext_sol_df","text":"data came metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cache_a_complete_example_lp_ext_sol_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Cached example extended solutions data frame — cache_a_complete_example_lp_ext_sol_df","title":"Cached example extended solutions data frame — cache_a_complete_example_lp_ext_sol_df","text":"extended solutions data frame used cached example \"a_complete_example.Rmd\" vignette.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cache_a_complete_example_lp_ext_sol_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cached example extended solutions data frame — cache_a_complete_example_lp_ext_sol_df","text":"","code":"cache_a_complete_example_lp_ext_sol_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/cache_a_complete_example_lp_ext_sol_df.html","id":"cache-a-complete-example-lp-ext-sol-df","dir":"Reference","previous_headings":"","what":"cache_a_complete_example_lp_ext_sol_df","title":"Cached example extended solutions data frame — cache_a_complete_example_lp_ext_sol_df","text":"Contains 5 cluster solutions, 74 observations, p-values 2 features.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cache_a_complete_example_lp_ext_sol_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cached example extended solutions data frame — cache_a_complete_example_lp_ext_sol_df","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cache_a_complete_example_sol_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Cached example solutions data frame — cache_a_complete_example_sol_df","title":"Cached example solutions data frame — cache_a_complete_example_sol_df","text":"solutions data frame used cached example \"a_complete_example.Rmd\" vignette.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cache_a_complete_example_sol_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cached example solutions data frame — cache_a_complete_example_sol_df","text":"","code":"cache_a_complete_example_sol_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/cache_a_complete_example_sol_df.html","id":"cache-a-complete-example-sol-df","dir":"Reference","previous_headings":"","what":"cache_a_complete_example_sol_df","title":"Cached example solutions data frame — cache_a_complete_example_sol_df","text":"solutions data frame 20 cluster solutions 87 observations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cache_a_complete_example_sol_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cached example solutions data frame — cache_a_complete_example_sol_df","text":"data came metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_aris.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an ARI matrix storing inter-solution similarities — calc_aris","title":"Construct an ARI matrix storing inter-solution similarities — calc_aris","text":"function constructs ari_matrix class object solutions_df class object. ARI matrix stores pairwise adjusted Rand indices cluster solutions well numeric order solutions data frame based hierarchical clustering ARI matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_aris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an ARI matrix storing inter-solution similarities — calc_aris","text":"","code":"calc_aris(   sol_df,   processes = 1,   verbose = FALSE,   dist_method = \"euclidean\",   hclust_method = \"complete\" )"},{"path":"https://branchlab.github.io/metasnf/reference/calc_aris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an ARI matrix storing inter-solution similarities — calc_aris","text":"sol_df Solutions data frame containing cluster solutions calculate pairwise ARIs . processes Specify number processes used complete calculations 1 (default) Sequential processing 2 higher: Parallel processing use future.apply::future_apply distribute calculations across specified number CPU cores. higher number available cores, warning raised maximum number cores used. max: available cores used. Note progress indicator available multi-core processing. verbose TRUE, output progress console. dist_method Distance method use calculating sorting order matrix. Argument directly passed stats::dist. Options include \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\", \"minkowski\". hclust_method Agglomerative method use calculating sorting order stats::hclust. Options include \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_aris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an ARI matrix storing inter-solution similarities — calc_aris","text":"om_aris ARIs clustering solutions solutions data frame","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_aris.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct an ARI matrix storing inter-solution similarities — calc_aris","text":"","code":"dl <- data_list(     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"unique_id\" ) #> ℹ 168 observations dropped due to incomplete data.  sc <- snf_config(dl, n_solutions = 3) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults. sol_df <- batch_snf(dl, sc) calc_aris(sol_df) #> ARI matrix for 3 cluster solutions. #>           1         2         3 #> 1 1.0000000 0.9834037 0.9351973 #> 2 0.9834037 1.0000000 0.9179166 #> 3 0.9351973 0.9179166 1.0000000 #> ARI-based order: 3 1 2"},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-values based on feature vectors and their types — calc_assoc_pval","title":"Calculate p-values based on feature vectors and their types — calc_assoc_pval","text":"Calculate p-values based feature vectors types","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-values based on feature vectors and their types — calc_assoc_pval","text":"","code":"calc_assoc_pval(var1, var2, type1, type2, cat_test = \"chi_squared\")"},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-values based on feature vectors and their types — calc_assoc_pval","text":"var1 single vector containing feature. var2 single vector containing feature. type1 type var1 (continuous, discrete, ordinal, categorical). type2 type var2 (continuous, discrete, ordinal, categorical). cat_test String indicating statistical test used associate cluster categorical feature. Options \"chi_squared\" Chi-squared test \"fisher_exact\" Fisher's exact test.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-values based on feature vectors and their types — calc_assoc_pval","text":"pval p-value statistical test based provided types. Currently, either F-test p-value linear model least one feature non-categorical, chi-squared test p-value features categorical.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-values for all pairwise associations of features in a data list — calc_assoc_pval_matrix","title":"Calculate p-values for all pairwise associations of features in a data list — calc_assoc_pval_matrix","text":"Calculate p-values pairwise associations features data list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-values for all pairwise associations of features in a data list — calc_assoc_pval_matrix","text":"","code":"calc_assoc_pval_matrix(dl, verbose = FALSE, cat_test = \"chi_squared\")"},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-values for all pairwise associations of features in a data list — calc_assoc_pval_matrix","text":"dl nested list input data data_list(). verbose TRUE, output progress console. cat_test String indicating statistical test used associate cluster categorical feature. Options \"chi_squared\" Chi-squared test \"fisher_exact\" Fisher's exact test.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-values for all pairwise associations of features in a data list — calc_assoc_pval_matrix","text":"\"matrix\" class object containing pairwise association p-values features provided data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-values for all pairwise associations of features in a data list — calc_assoc_pval_matrix","text":"","code":"data_list <- data_list(     list(income, \"household_income\", \"demographics\", \"ordinal\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" ) #> ℹ 139 observations dropped due to incomplete data.  assoc_pval_matrix <- calc_assoc_pval_matrix(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/calc_nmis.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate feature NMIs for a data list and a solutions data frame — calc_nmis","title":"Calculate feature NMIs for a data list and a solutions data frame — calc_nmis","text":"Normalized mutual information scores can used indirectly measure important feature may producing cluster solution. function calculate normalized mutual information cluster solutions solutions data frame well cluster solutions created including single feature provided data list, otherwise using hyperparameters specified original SNF config. Note NMIs can calculated two cluster solutions regardless features actually used create cluster solutions. example, feature involved producing particular cluster solution may still high NMI cluster solution (typically highly correlated different feature used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_nmis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate feature NMIs for a data list and a solutions data frame — calc_nmis","text":"","code":"calc_nmis(   dl,   sol_df,   transpose = TRUE,   ignore_inclusions = TRUE,   processes = 1 )"},{"path":"https://branchlab.github.io/metasnf/reference/calc_nmis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate feature NMIs for a data list and a solutions data frame — calc_nmis","text":"dl nested list input data data_list(). sol_df Result batch_snf storing cluster solutions settings used generate . Use value used original call batch_snf(). transpose TRUE, transpose output data frame. ignore_inclusions TRUE, ignore inclusion columns solutions data frame calculate NMIs features. FALSE, give NAs features dropped given settings_df row. processes Specify number processes used complete SNF iterations 1 (default) Sequential processing: function iterate settings_df one row time loop. option make use multiple CPU cores, show progress bar. 2 higher: Parallel processing use future.apply::future_apply distribute SNF iterations across specified number CPU cores. higher number available cores, warning raised maximum number cores used. max: available cores used.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_nmis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate feature NMIs for a data list and a solutions data frame — calc_nmis","text":"\"data.frame\" class object containing one row every feature provided data list one column every solution provided solutions data frame. Populated values show calculated NMI score feature-solution combination.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_nmis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate feature NMIs for a data list and a solutions data frame — calc_nmis","text":"","code":"input_dl <- data_list(     list(gender_df, \"gender\", \"demographics\", \"categorical\"),     list(diagnosis_df, \"diagnosis\", \"clinical\", \"categorical\"),     uid = \"patient_id\" )  sc <- snf_config(input_dl, n_solutions = 2) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  sol_df <- batch_snf(input_dl, sc)  calc_nmis(input_dl, sol_df) #>     feature        s1        s2 #> 1    gender 0.2684083 0.2120130 #> 2 diagnosis 0.9035042 0.9240358"},{"path":"https://branchlab.github.io/metasnf/reference/calculate_coclustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate co-clustering data — calculate_coclustering","title":"Calculate co-clustering data — calculate_coclustering","text":"Calculate co-clustering data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_coclustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate co-clustering data — calculate_coclustering","text":"","code":"calculate_coclustering(subsample_solutions, sol_df, verbose = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/calculate_coclustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate co-clustering data — calculate_coclustering","text":"subsample_solutions list containing cluster solutions distinct subsamples data. object generated function batch_snf_subsamples(). solutions correspond ones solutions data frame. sol_df solutions data frame. object generated function batch_snf(). solutions solutions data frame correspond subsample solutions. verbose TRUE, output time remaining estimates console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_coclustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate co-clustering data — calculate_coclustering","text":"list containing following components: cocluster_dfs: list data frames, one per cluster solution, shows number times every pair observations original cluster solution occurred subsample, number times every pair clustered together subsample, corresponding fraction times every pair clustered together subsample. cocluster_ss_mats: number times every pair observations occurred subsample, formatted pairwise matrix. cocluster_sc_mats: number times every pair observations occurred cluster, formatted pairwise matrix. cocluster_cf_mats: fraction times every pair observations occurred cluster, formatted pairwise matrix. cocluster_summary: Specifically among pairs observations clustered together original full cluster solution, fraction pairs remained clustered together throughout subsample solutions. information formatted data frame one row per cluster solution.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_coclustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate co-clustering data — calculate_coclustering","text":"","code":"# \\donttest{     my_dl <- data_list(         list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),         list(income, \"household_income\", \"demographics\", \"continuous\"),         list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),         uid = \"unique_id\"     ) #> ℹ 175 observations dropped due to incomplete data.          sc <- snf_config(my_dl, n_solutions = 5, max_k = 40) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.          sol_df <- batch_snf(my_dl, sc)          my_dl_subsamples <- subsample_dl(         my_dl,         n_subsamples = 20,         subsample_fraction = 0.85     )          batch_subsample_results <- batch_snf_subsamples(         my_dl_subsamples,         sc     )          coclustering_results <- calculate_coclustering(         batch_subsample_results,         sol_df,         verbose = TRUE     ) #> Processing solution 1/5 #> Processing solution 2/5 #> Processing solution 3/5 #> Processing solution 4/5 #> Processing solution 5/5 # }"},{"path":"https://branchlab.github.io/metasnf/reference/cancer_diagnosis_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock diagnosis data — cancer_diagnosis_df","title":"Mock diagnosis data — cancer_diagnosis_df","text":"data diagnosis_df, renamed features columns.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cancer_diagnosis_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock diagnosis data — cancer_diagnosis_df","text":"","code":"cancer_diagnosis_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/cancer_diagnosis_df.html","id":"cancer-diagnosis-df","dir":"Reference","previous_headings":"","what":"cancer_diagnosis_df","title":"Mock diagnosis data — cancer_diagnosis_df","text":"data frame 200 rows 2 columns: patient_id Random three-digit number uniquely identifying patient diagnosis Mock cancer diagnosis feature (1, 2, 3)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cancer_diagnosis_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock diagnosis data — cancer_diagnosis_df","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cat_colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for generating categorical colour palette — cat_colours","title":"Helper function for generating categorical colour palette — cat_colours","text":"Helper function generating categorical colour palette","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cat_colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for generating categorical colour palette — cat_colours","text":"","code":"cat_colours(vector, palette)"},{"path":"https://branchlab.github.io/metasnf/reference/cat_colours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for generating categorical colour palette — cat_colours","text":"vector Vector categorical data generate palette . palette RColorBrewer palette used.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cat_colours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for generating categorical colour palette — cat_colours","text":"named list colours names correspond unique values vector values correspond colours.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cell_significance_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Place significance stars on ComplexHeatmap cells — cell_significance_fn","title":"Place significance stars on ComplexHeatmap cells — cell_significance_fn","text":"internal function meant used assoc_pval_heatmap function.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cell_significance_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Place significance stars on ComplexHeatmap cells — cell_significance_fn","text":"","code":"cell_significance_fn(data)"},{"path":"https://branchlab.github.io/metasnf/reference/cell_significance_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Place significance stars on ComplexHeatmap cells — cell_significance_fn","text":"data matrix containing cells base significance stars .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cell_significance_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Place significance stars on ComplexHeatmap cells — cell_significance_fn","text":"cell_fn Another function well-formatted usage cell_fun argument ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert character-type columns of a data frame to factor-type — char_to_fac","title":"Convert character-type columns of a data frame to factor-type — char_to_fac","text":"Convert character-type columns data frame factor-type","code":""},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert character-type columns of a data frame to factor-type — char_to_fac","text":"","code":"char_to_fac(df)"},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert character-type columns of a data frame to factor-type — char_to_fac","text":"df data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert character-type columns of a data frame to factor-type — char_to_fac","text":"data frame factor columns instead char columns.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_fn_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if functions in a distance metrics list-like have valid arguments — check_cfll_fn_args","title":"Check if functions in a distance metrics list-like have valid arguments — check_cfll_fn_args","text":"Check functions distance metrics list-like valid arguments","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_fn_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if functions in a distance metrics list-like have valid arguments — check_cfll_fn_args","text":"","code":"check_cfll_fn_args(cfll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_fn_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if functions in a distance metrics list-like have valid arguments — check_cfll_fn_args","text":"return value. Raises error functions dfll valid arguments.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_fns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if items of a clustering functions list-like object are functions — check_cfll_fns","title":"Check if items of a clustering functions list-like object are functions — check_cfll_fns","text":"Check items clustering functions list-like object functions","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_fns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if items of a clustering functions list-like object are functions — check_cfll_fns","text":"","code":"check_cfll_fns(cfll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_fns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if items of a clustering functions list-like object are functions — check_cfll_fns","text":"cfll clust_fns_list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_fns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if items of a clustering functions list-like object are functions — check_cfll_fns","text":"return value. Raises error items cfll functions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_named.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if clustering functions list-like object has named algorithms — check_cfll_named","title":"Check if clustering functions list-like object has named algorithms — check_cfll_named","text":"Check clustering functions list-like object named algorithms","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_named.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if clustering functions list-like object has named algorithms — check_cfll_named","text":"","code":"check_cfll_named(cfll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_named.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if clustering functions list-like object has named algorithms — check_cfll_named","text":"cfll clust_fns_list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_named.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if clustering functions list-like object has named algorithms — check_cfll_named","text":"return value. Raises error unnamed clustering functions cfll.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_unique_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if names in a clustering functions list-like object are unique — check_cfll_unique_names","title":"Check if names in a clustering functions list-like object are unique — check_cfll_unique_names","text":"Check names clustering functions list-like object unique","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_unique_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if names in a clustering functions list-like object are unique — check_cfll_unique_names","text":"","code":"check_cfll_unique_names(cfll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_unique_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if names in a clustering functions list-like object are unique — check_cfll_unique_names","text":"cfll clust_fns_list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_cfll_unique_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if names in a clustering functions list-like object are unique — check_cfll_unique_names","text":"return value. Raises error names cfll unique.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_compatible_sdf_cfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if settings_df exceeds bounds of clust_fns_list — check_compatible_sdf_cfl","title":"Check if settings_df exceeds bounds of clust_fns_list — check_compatible_sdf_cfl","text":"Check settings_df exceeds bounds clust_fns_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_compatible_sdf_cfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if settings_df exceeds bounds of clust_fns_list — check_compatible_sdf_cfl","text":"","code":"check_compatible_sdf_cfl(sdf, cfl)"},{"path":"https://branchlab.github.io/metasnf/reference/check_compatible_sdf_cfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if settings_df exceeds bounds of clust_fns_list — check_compatible_sdf_cfl","text":"sdf settings_df class object. cfl clust_fns_list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_compatible_sdf_cfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if settings_df exceeds bounds of clust_fns_list — check_compatible_sdf_cfl","text":"return value. Raises error sdf calls clustering function outside range cfl.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_compatible_sdf_dfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if settings_df exceeds bounds of dist_fns_list — check_compatible_sdf_dfl","title":"Check if settings_df exceeds bounds of dist_fns_list — check_compatible_sdf_dfl","text":"Check settings_df exceeds bounds dist_fns_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_compatible_sdf_dfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if settings_df exceeds bounds of dist_fns_list — check_compatible_sdf_dfl","text":"","code":"check_compatible_sdf_dfl(sdf, dfl)"},{"path":"https://branchlab.github.io/metasnf/reference/check_compatible_sdf_dfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if settings_df exceeds bounds of dist_fns_list — check_compatible_sdf_dfl","text":"sdf settings_df class object. dfl dist_fns_list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_compatible_sdf_dfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if settings_df exceeds bounds of dist_fns_list — check_compatible_sdf_dfl","text":"return value. Raises error sdf calls distance function outside range dfl.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_compatible_sdf_wm.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if settings_df and weights_matrix have same number of rows — check_compatible_sdf_wm","title":"Check if settings_df and weights_matrix have same number of rows — check_compatible_sdf_wm","text":"Check settings_df weights_matrix number rows","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_compatible_sdf_wm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if settings_df and weights_matrix have same number of rows — check_compatible_sdf_wm","text":"","code":"check_compatible_sdf_wm(sdf, wm)"},{"path":"https://branchlab.github.io/metasnf/reference/check_compatible_sdf_wm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if settings_df and weights_matrix have same number of rows — check_compatible_sdf_wm","text":"sdf settings_df class object. wm weights_matrix class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_compatible_sdf_wm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if settings_df and weights_matrix have same number of rows — check_compatible_sdf_wm","text":"return value. Raises error sdf wm number rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dataless_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to stop annotation building when no data was provided — check_dataless_annotations","title":"Helper function to stop annotation building when no data was provided — check_dataless_annotations","text":"Helper function stop annotation building data provided","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dataless_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to stop annotation building when no data was provided — check_dataless_annotations","text":"","code":"check_dataless_annotations(annotation_requests, data)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dataless_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to stop annotation building when no data was provided — check_dataless_annotations","text":"annotation_requests list requested annotations data data frame data build annotations","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dataless_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to stop annotation building when no data was provided — check_dataless_annotations","text":"return value. function just raises error annotations requested without provided data heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_fn_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if functions in a distance metrics list-like have valid arguments — check_dfll_fn_args","title":"Check if functions in a distance metrics list-like have valid arguments — check_dfll_fn_args","text":"Check functions distance metrics list-like valid arguments","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_fn_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if functions in a distance metrics list-like have valid arguments — check_dfll_fn_args","text":"","code":"check_dfll_fn_args(dfll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_fn_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if functions in a distance metrics list-like have valid arguments — check_dfll_fn_args","text":"dfll distance metrics list-like list object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_fn_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if functions in a distance metrics list-like have valid arguments — check_dfll_fn_args","text":"return value. Raises error functions dfll valid arguments.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_fn_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if functions in a distance metrics list-like have names — check_dfll_fn_names","title":"Check if functions in a distance metrics list-like have names — check_dfll_fn_names","text":"Check functions distance metrics list-like names","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_fn_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if functions in a distance metrics list-like have names — check_dfll_fn_names","text":"","code":"check_dfll_fn_names(dfll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_fn_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if functions in a distance metrics list-like have names — check_dfll_fn_names","text":"dfll distance metrics list-like list object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_fn_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if functions in a distance metrics list-like have names — check_dfll_fn_names","text":"return value. Raises error functions dfll names.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_item_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if items of a distance metrics list-like object have valid names — check_dfll_item_names","title":"Check if items of a distance metrics list-like object have valid names — check_dfll_item_names","text":"Check items distance metrics list-like object valid names","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_item_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if items of a distance metrics list-like object have valid names — check_dfll_item_names","text":"","code":"check_dfll_item_names(dfll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_item_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if items of a distance metrics list-like object have valid names — check_dfll_item_names","text":"dfll distance metrics list-like list object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_item_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if items of a distance metrics list-like object have valid names — check_dfll_item_names","text":"return value. Raises error items dfll valid formatted names.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_subitems_are_fns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if items of a distance metrics list-like object are functions — check_dfll_subitems_are_fns","title":"Check if items of a distance metrics list-like object are functions — check_dfll_subitems_are_fns","text":"Check items distance metrics list-like object functions","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_subitems_are_fns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if items of a distance metrics list-like object are functions — check_dfll_subitems_are_fns","text":"","code":"check_dfll_subitems_are_fns(dfll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_subitems_are_fns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if items of a distance metrics list-like object are functions — check_dfll_subitems_are_fns","text":"dfll distance metrics list-like list object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_subitems_are_fns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if items of a distance metrics list-like object are functions — check_dfll_subitems_are_fns","text":"return value. Raises error items dfll functions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_unique_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if names in a distance metrics list-like object are unique — check_dfll_unique_names","title":"Check if names in a distance metrics list-like object are unique — check_dfll_unique_names","text":"Check names distance metrics list-like object unique","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_unique_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if names in a distance metrics list-like object are unique — check_dfll_unique_names","text":"","code":"check_dfll_unique_names(dfll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_unique_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if names in a distance metrics list-like object are unique — check_dfll_unique_names","text":"dfll distance metrics list-like list object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dfll_unique_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if names in a distance metrics list-like object are unique — check_dfll_unique_names","text":"return value. Raises error items dfll unique across layer 1 within item layer 2.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_duplicate_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if data list contains any duplicate names — check_dll_duplicate_components","title":"Check if data list contains any duplicate names — check_dll_duplicate_components","text":"Check data list contains duplicate names","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_duplicate_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if data list contains any duplicate names — check_dll_duplicate_components","text":"","code":"check_dll_duplicate_components(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_duplicate_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if data list contains any duplicate names — check_dll_duplicate_components","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_duplicate_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if data list contains any duplicate names — check_dll_duplicate_components","text":"return value. Raises error features duplicate names generated data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_duplicate_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if data list contains any duplicate features — check_dll_duplicate_features","title":"Check if data list contains any duplicate features — check_dll_duplicate_features","text":"Check data list contains duplicate features","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_duplicate_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if data list contains any duplicate features — check_dll_duplicate_features","text":"","code":"check_dll_duplicate_features(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_duplicate_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if data list contains any duplicate features — check_dll_duplicate_features","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_duplicate_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if data list contains any duplicate features — check_dll_duplicate_features","text":"return value. Raises error features duplicate names generated data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_empty_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Error if empty input provided during data list initialization — check_dll_empty_input","title":"Error if empty input provided during data list initialization — check_dll_empty_input","text":"Error empty input provided data list initialization","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_empty_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error if empty input provided during data list initialization — check_dll_empty_input","text":"","code":"check_dll_empty_input(data_list_input)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_empty_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error if empty input provided during data list initialization — check_dll_empty_input","text":"data_list_input Input data provided data list initialization.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_empty_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error if empty input provided during data list initialization — check_dll_empty_input","text":"Raises error data_list_input 0 length.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_four_subitems.html","id":null,"dir":"Reference","previous_headings":"","what":"Error if data list-like list doesn't have only 4-item nested lists — check_dll_four_subitems","title":"Error if data list-like list doesn't have only 4-item nested lists — check_dll_four_subitems","text":"Error data list-like list 4-item nested lists","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_four_subitems.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error if data list-like list doesn't have only 4-item nested lists — check_dll_four_subitems","text":"","code":"check_dll_four_subitems(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_four_subitems.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error if data list-like list doesn't have only 4-item nested lists — check_dll_four_subitems","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_four_subitems.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error if data list-like list doesn't have only 4-item nested lists — check_dll_four_subitems","text":"Raises error dll 4-item nested lists","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_inherits_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Error if data list-like structure isn't a list — check_dll_inherits_list","title":"Error if data list-like structure isn't a list — check_dll_inherits_list","text":"Error data list-like structure list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_inherits_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error if data list-like structure isn't a list — check_dll_inherits_list","text":"","code":"check_dll_inherits_list(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_inherits_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error if data list-like structure isn't a list — check_dll_inherits_list","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_inherits_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error if data list-like structure isn't a list — check_dll_inherits_list","text":"Raises error data list-like structure list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_subitem_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if UID columns in a nested list have valid structure for a data list — check_dll_subitem_classes","title":"Check if UID columns in a nested list have valid structure for a data list — check_dll_subitem_classes","text":"Check UID columns nested list valid structure data list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_subitem_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if UID columns in a nested list have valid structure for a data list — check_dll_subitem_classes","text":"","code":"check_dll_subitem_classes(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_subitem_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if UID columns in a nested list have valid structure for a data list — check_dll_subitem_classes","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_subitem_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if UID columns in a nested list have valid structure for a data list — check_dll_subitem_classes","text":"Raises error UID columns valid structure.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_subitem_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check valid item names for a data list-like list — check_dll_subitem_names","title":"Check valid item names for a data list-like list — check_dll_subitem_names","text":"Error data list-like structure nested names \"data\", \"name\", \"domain\", \"type\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_subitem_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check valid item names for a data list-like list — check_dll_subitem_names","text":"","code":"check_dll_subitem_names(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_subitem_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check valid item names for a data list-like list — check_dll_subitem_names","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_subitem_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check valid item names for a data list-like list — check_dll_subitem_names","text":"Raises error dll 4-item nested lists","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Error if data list-like structure has invalid feature types — check_dll_types","title":"Error if data list-like structure has invalid feature types — check_dll_types","text":"Error data list-like structure invalid feature types","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error if data list-like structure has invalid feature types — check_dll_types","text":"","code":"check_dll_types(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error if data list-like structure has invalid feature types — check_dll_types","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error if data list-like structure has invalid feature types — check_dll_types","text":"Raises error loaded types among continuous, discrete, ordinal, categorical, mixed.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_uid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if UID columns in a nested list have valid structure for a data list — check_dll_uid","title":"Check if UID columns in a nested list have valid structure for a data list — check_dll_uid","text":"Check UID columns nested list valid structure data list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_uid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if UID columns in a nested list have valid structure for a data list — check_dll_uid","text":"","code":"check_dll_uid(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_uid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if UID columns in a nested list have valid structure for a data list — check_dll_uid","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_dll_uid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if UID columns in a nested list have valid structure for a data list — check_dll_uid","text":"Raises error UID columns valid structure.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_hm_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for ComplexHeatmap and circlize dependencies — check_hm_dependencies","title":"Check for ComplexHeatmap and circlize dependencies — check_hm_dependencies","text":"Check ComplexHeatmap circlize dependencies","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_hm_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for ComplexHeatmap and circlize dependencies — check_hm_dependencies","text":"","code":"check_hm_dependencies()"},{"path":"https://branchlab.github.io/metasnf/reference/check_hm_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for ComplexHeatmap and circlize dependencies — check_hm_dependencies","text":"return value. function just checks ComplexHeatmap circlize packages installed.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_sdfl_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if settings data frame inherits class data.frame — check_sdfl_colnames","title":"Check if settings data frame inherits class data.frame — check_sdfl_colnames","text":"Check settings data frame inherits class data.frame","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_sdfl_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if settings data frame inherits class data.frame — check_sdfl_colnames","text":"","code":"check_sdfl_colnames(sdfl)"},{"path":"https://branchlab.github.io/metasnf/reference/check_sdfl_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if settings data frame inherits class data.frame — check_sdfl_colnames","text":"sdfl settings data frame-like matrix object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_sdfl_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if settings data frame inherits class data.frame — check_sdfl_colnames","text":"return value. Raises error features duplicate names generated data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_sdfl_is_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if settings data frame inherits class data.frame — check_sdfl_is_df","title":"Check if settings data frame inherits class data.frame — check_sdfl_is_df","text":"Check settings data frame inherits class data.frame","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_sdfl_is_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if settings data frame inherits class data.frame — check_sdfl_is_df","text":"","code":"check_sdfl_is_df(sdfl)"},{"path":"https://branchlab.github.io/metasnf/reference/check_sdfl_is_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if settings data frame inherits class data.frame — check_sdfl_is_df","text":"sdfl settings data frame-like matrix object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_sdfl_is_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if settings data frame inherits class data.frame — check_sdfl_is_df","text":"return value. Raises error features duplicate names generated data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_sdfl_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if settings data frame is numeric — check_sdfl_numeric","title":"Check if settings data frame is numeric — check_sdfl_numeric","text":"Check settings data frame numeric","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_sdfl_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if settings data frame is numeric — check_sdfl_numeric","text":"","code":"check_sdfl_numeric(sdfl)"},{"path":"https://branchlab.github.io/metasnf/reference/check_sdfl_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if settings data frame is numeric — check_sdfl_numeric","text":"sdfl settings data frame-like matrix object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_sdfl_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if settings data frame is numeric — check_sdfl_numeric","text":"return value. Raises error features duplicate names generated data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_similarity_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Check validity of similarity matrices — check_similarity_matrices","title":"Check validity of similarity matrices — check_similarity_matrices","text":"Check see similarity matrices list following properties: maximum value entire matrix 0.5 Every value diagonal 0.5","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_similarity_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check validity of similarity matrices — check_similarity_matrices","text":"","code":"check_similarity_matrices(similarity_matrices)"},{"path":"https://branchlab.github.io/metasnf/reference/check_similarity_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check validity of similarity matrices — check_similarity_matrices","text":"similarity_matrices list similarity matrices","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_similarity_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check validity of similarity matrices — check_similarity_matrices","text":"valid_matrices Boolean indicating properties met similarity matrices","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_valid_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if max K exceeds the number of observations — check_valid_k","title":"Check if max K exceeds the number of observations — check_valid_k","text":"Check max K exceeds number observations","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_valid_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if max K exceeds the number of observations — check_valid_k","text":"","code":"check_valid_k(sdf, dl)"},{"path":"https://branchlab.github.io/metasnf/reference/check_valid_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if max K exceeds the number of observations — check_valid_k","text":"sdf settings_df class object. dl nested list input data data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_valid_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if max K exceeds the number of observations — check_valid_k","text":"return value. Raises error max K exceeds number observations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_valid_sc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if SNF config has valid structure — check_valid_sc","title":"Check if SNF config has valid structure — check_valid_sc","text":"Check SNF config valid structure","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_valid_sc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if SNF config has valid structure — check_valid_sc","text":"","code":"check_valid_sc(sc)"},{"path":"https://branchlab.github.io/metasnf/reference/check_valid_sc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if SNF config has valid structure — check_valid_sc","text":"sc snf_config class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_valid_sc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if SNF config has valid structure — check_valid_sc","text":"return value. Raises error snf_config snf_config class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_squared_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Chi-squared test p-value (generic) — chi_squared_pval","title":"Chi-squared test p-value (generic) — chi_squared_pval","text":"Return p-value chi-squared test two features","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_squared_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chi-squared test p-value (generic) — chi_squared_pval","text":"","code":"chi_squared_pval(cat_var1, cat_var2)"},{"path":"https://branchlab.github.io/metasnf/reference/chi_squared_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chi-squared test p-value (generic) — chi_squared_pval","text":"cat_var1 categorical feature. cat_var2 categorical feature.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_squared_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chi-squared test p-value (generic) — chi_squared_pval","text":"pval p-value (class \"numeric\").","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clust_fns.html","id":null,"dir":"Reference","previous_headings":"","what":"Built-in clustering algorithms — clust_fns","title":"Built-in clustering algorithms — clust_fns","text":"functions can used building metasnf clustering functions list. function converts similarity matrix (matrix class object) cluster solution (numeric vector). Note functions (custom clustering functions) accept number clusters parameter; value must built function necessary.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clust_fns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Built-in clustering algorithms — clust_fns","text":"","code":"spectral_eigen(similarity_matrix)  spectral_rot(similarity_matrix)  spectral_eigen_classic(similarity_matrix)  spectral_rot_classic(similarity_matrix)  spectral_two(similarity_matrix)  spectral_three(similarity_matrix)  spectral_four(similarity_matrix)  spectral_five(similarity_matrix)  spectral_six(similarity_matrix)  spectral_seven(similarity_matrix)  spectral_eight(similarity_matrix)  spectral_nine(similarity_matrix)  spectral_ten(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/clust_fns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Built-in clustering algorithms — clust_fns","text":"similarity_matrix similarity matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clust_fns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Built-in clustering algorithms — clust_fns","text":"solution_data vector cluster assignments","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clust_fns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Built-in clustering algorithms — clust_fns","text":"spectral_eigen: Spectral clustering number clusters based eigen-gap heuristic spectral_rot: Spectral clustering number clusters based rotation-cost heuristic spectral_(C): Spectral clustering C-cluster solution.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clust_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a clustering algorithms list — clust_fns_list","title":"Build a clustering algorithms list — clust_fns_list","text":"function can used specify custom clustering algorithms apply final similarity matrices produced run batch_snf function.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clust_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a clustering algorithms list — clust_fns_list","text":"","code":"clust_fns_list(clust_fns = NULL, use_default_clust_fns = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/clust_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a clustering algorithms list — clust_fns_list","text":"clust_fns list named clustering functions use_default_clust_fns TRUE, prepend base clustering algorithms (spectral_eigen spectral_rot, apply spectral clustering use eigen-gap rotation cost heuristics respectively determining number clusters graph) clust_fns.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clust_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a clustering algorithms list — clust_fns_list","text":"list clustering algorithm functions can passed batch_snf generate_settings_list functions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clust_fns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a clustering algorithms list — clust_fns_list","text":"","code":"# Using just the base clustering algorithms -------------------------------- # This will just contain spectral_eigen and spectral_rot cfl <- clust_fns_list(use_default_clust_fns = TRUE)  # Adding algorithms provided by the package -------------------------------- # This will contain the base clustering algorithms (spectral_eigen, #  spectral_rot) as well as two pre-defined spectral clustering functions #  that force the number of clusters to be two or five cfl <- clust_fns_list(      clust_fns = list(         \"two_cluster_spectral\" = spectral_two,         \"five_cluster_spectral\" = spectral_five     ) )  # Adding your own algorithms ----------------------------------------------- # This will contain the base and user-provided clustering algorithms my_clustering_algorithm <- function(similarity_matrix) {     # your code that converts similarity matrix to clusters here... }  # Suppress the base algorithms---------------------------------------------- # This will contain only user-provided clustering algorithms cfl <- clust_fns_list(     clust_fns = list(         \"two_cluster_spectral\" = spectral_two,         \"five_cluster_spectral\" = spectral_five     ) )"},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot of co-clustering stability across subsampled data — cocluster_density","title":"Density plot of co-clustering stability across subsampled data — cocluster_density","text":"function creates density plot shows, pairs observations originally clustered together, distribution fractions pairs clustered together across subsampled data.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot of co-clustering stability across subsampled data — cocluster_density","text":"","code":"cocluster_density(cocluster_df)"},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot of co-clustering stability across subsampled data — cocluster_density","text":"cocluster_df data frame containing co-clustering data single cluster solution. object generated calculate_coclustering function.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plot of co-clustering stability across subsampled data — cocluster_density","text":"Density plot (class \"gg\", \"ggplot\") distribution co-clustering across pairs subsamples data.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density plot of co-clustering stability across subsampled data — cocluster_density","text":"","code":"# \\donttest{ my_dl <- data_list(     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(income, \"household_income\", \"demographics\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"unique_id\" ) #> ℹ 175 observations dropped due to incomplete data.  sc <- snf_config(my_dl, n_solutions = 5, max_k = 40) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  sol_df <- batch_snf(my_dl, sc)  my_dl_subsamples <- subsample_dl(     my_dl,     n_subsamples = 20,     subsample_fraction = 0.85 )  batch_subsample_results <- batch_snf_subsamples(     my_dl_subsamples,     sc )  coclustering_results <- calculate_coclustering(     batch_subsample_results,     sol_df,     verbose = TRUE ) #> Processing solution 1/5 #> Processing solution 2/5 #> Processing solution 3/5 #> Processing solution 4/5 #> Processing solution 5/5  cocluster_dfs <- coclustering_results$\"cocluster_dfs\"  cocluster_density(cocluster_dfs[[1]])  # }"},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of observation co-clustering across resampled data — cocluster_heatmap","title":"Heatmap of observation co-clustering across resampled data — cocluster_heatmap","text":"Create heatmap shows distribution observation co-clustering across resampled data.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of observation co-clustering across resampled data — cocluster_heatmap","text":"","code":"cocluster_heatmap(   cocluster_df,   cluster_rows = TRUE,   cluster_columns = TRUE,   show_row_names = FALSE,   show_column_names = FALSE,   dl = NULL,   data = NULL,   left_bar = NULL,   right_bar = NULL,   top_bar = NULL,   bottom_bar = NULL,   left_hm = NULL,   right_hm = NULL,   top_hm = NULL,   bottom_hm = NULL,   annotation_colours = NULL,   min_colour = NULL,   max_colour = NULL,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of observation co-clustering across resampled data — cocluster_heatmap","text":"cocluster_df data frame containing co-clustering data single cluster solution. object generated calculate_coclustering function. cluster_rows Argument passed ComplexHeatmap::Heatmap(). cluster_columns Argument passed ComplexHeatmap::Heatmap(). show_row_names Argument passed ComplexHeatmap::Heatmap(). show_column_names Argument passed ComplexHeatmap::Heatmap(). dl See ?similarity_matrix_heatmap. data See ?similarity_matrix_heatmap. left_bar See ?similarity_matrix_heatmap. right_bar See ?similarity_matrix_heatmap. top_bar See ?similarity_matrix_heatmap. bottom_bar See ?similarity_matrix_heatmap. left_hm See ?similarity_matrix_heatmap. right_hm See ?similarity_matrix_heatmap. top_hm See ?similarity_matrix_heatmap. bottom_hm See ?similarity_matrix_heatmap. annotation_colours See ?similarity_matrix_heatmap. min_colour See ?similarity_matrix_heatmap. max_colour See ?similarity_matrix_heatmap. ... Arguments passed ComplexHeatmap::Heatmap().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of observation co-clustering across resampled data — cocluster_heatmap","text":"Heatmap (class \"Heatmap\" ComplexHeatmap) object showing distribution observation co-clustering across resampled data.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap of observation co-clustering across resampled data — cocluster_heatmap","text":"","code":"# \\donttest{     my_dl <- data_list(         list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),         list(income, \"household_income\", \"demographics\", \"continuous\"),         list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),         uid = \"unique_id\"     ) #> ℹ 175 observations dropped due to incomplete data.          sc <- snf_config(my_dl, n_solutions = 5, max_k = 40) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.          sol_df <- batch_snf(my_dl, sc)          my_dl_subsamples <- subsample_dl(         my_dl,         n_subsamples = 20,         subsample_fraction = 0.85     )          batch_subsample_results <- batch_snf_subsamples(         my_dl_subsamples,         sc     )          coclustering_results <- calculate_coclustering(         batch_subsample_results,          sol_df,         verbose = TRUE     ) #> Processing solution 1/5 #> Processing solution 2/5 #> Processing solution 3/5 #> Processing solution 4/5 #> Processing solution 5/5          cocluster_dfs <- coclustering_results$\"cocluster_dfs\"          cocluster_heatmap(         cocluster_dfs[[1]],         dl = my_dl,         top_hm = list(             \"Income\" = \"household_income\",             \"Pubertal Status\" = \"pubertal_status\"         ),         annotation_colours = list(             \"Pubertal Status\" = colour_scale(                 c(1, 4),                 min_colour = \"black\",                 max_colour = \"purple\"             ),             \"Income\" = colour_scale(                 c(0, 4),                 min_colour = \"black\",                 max_colour = \"red\"             )         )     )  # }"},{"path":"https://branchlab.github.io/metasnf/reference/coclustering_coverage_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Co-clustering coverage check — coclustering_coverage_check","title":"Co-clustering coverage check — coclustering_coverage_check","text":"Check co-clustered data least one subsample every pair observations part simultaneously.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/coclustering_coverage_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Co-clustering coverage check — coclustering_coverage_check","text":"","code":"coclustering_coverage_check(cocluster_df, action = \"warn\")"},{"path":"https://branchlab.github.io/metasnf/reference/coclustering_coverage_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Co-clustering coverage check — coclustering_coverage_check","text":"cocluster_df data frame containing co-clustering data. action Control parent function warn stop.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/coclustering_coverage_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Co-clustering coverage check — coclustering_coverage_check","text":"function return value. checks cocluster_df complete coverage (pairs occur solution least ). raise warning error coverage incomplete depending value action parameter.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/collapse_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data list into a data frame — collapse_dl","title":"Convert a data list into a data frame — collapse_dl","text":"Defunct function converting data list data frame. Please use .data.frame() instead.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/collapse_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data list into a data frame — collapse_dl","text":"","code":"collapse_dl(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/collapse_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data list into a data frame — collapse_dl","text":"data_list nested list input data generate_data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/collapse_dl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data list into a data frame — collapse_dl","text":"\"data.frame\"-formatted version provided data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/colour_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a colour ramp for a given vector — colour_scale","title":"Return a colour ramp for a given vector — colour_scale","text":"Given numeric vector min max colour values, return colour ramp assigns colour element vector. function wrapper circlize::colorRamp2.'","code":""},{"path":"https://branchlab.github.io/metasnf/reference/colour_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a colour ramp for a given vector — colour_scale","text":"","code":"colour_scale(data, min_colour, max_colour)"},{"path":"https://branchlab.github.io/metasnf/reference/colour_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a colour ramp for a given vector — colour_scale","text":"data Vector numeric values. min_colour Minimum colour value. max_colour Maximum colour value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/colour_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a colour ramp for a given vector — colour_scale","text":"\"function\" class object can build circlize-style colour ramp.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert unique identifiers of data list to ","title":"Convert unique identifiers of data list to ","text":"Column name \"uid\" reserved unique identifier observations. function ensures data frames UID set \"uid\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert unique identifiers of data list to ","text":"","code":"convert_uids(dll, uid)"},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert unique identifiers of data list to ","text":"dll data list-like list class object. uid (string) name uid column currently used data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert unique identifiers of data list to ","text":"provided nested list \"uid\" UID.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cort_sa.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD cortical surface area data — cort_sa","title":"Mock ABCD cortical surface area data — cort_sa","text":"Like mock data frame \"abcd_cort_sa\", \"unique_id\" \"uid\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cort_sa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD cortical surface area data — cort_sa","text":"","code":"cort_sa"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/cort_sa.html","id":"cort-sa","dir":"Reference","previous_headings":"","what":"cort_sa","title":"Mock ABCD cortical surface area data — cort_sa","text":"data frame 188 rows 152 columns: unique_id unique identifier ABCD dataset ... Cortical surface areas various ROIs (mm^2, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cort_sa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD cortical surface area data — cort_sa","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cort_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD cortical thickness data — cort_t","title":"Mock ABCD cortical thickness data — cort_t","text":"Like mock data frame \"abcd_cort_t\", \"unique_id\" \"uid\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cort_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD cortical thickness data — cort_t","text":"","code":"cort_t"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/cort_t.html","id":"cort-t","dir":"Reference","previous_headings":"","what":"cort_t","title":"Mock ABCD cortical thickness data — cort_t","text":"data frame 188 rows 152 columns: unique_id unique identifier ABCD dataset ... Cortical thicknesses various ROIs (mm^3, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cort_t.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD cortical thickness data — cort_t","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a data_list class object — data_list","title":"Build a data_list class object — data_list","text":"data_list() constructs data list object inherits classes data_list list. object primary way features used along metasnf clustering pipeline stored. data list fundamentally 2-level nested list object inner list contains data frame associated metadata data frame. metadata includes name data frame, 'domain' data frame (broader source information input data frame capturing, determined user's domain knowledge), type feature stored data frame (continuous, discrete, ordinal, categorical, mixed).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a data_list class object — data_list","text":"","code":"data_list(..., uid)"},{"path":"https://branchlab.github.io/metasnf/reference/data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a data_list class object — data_list","text":"... number lists formatted (df, \"df_name\", \"df_domain\", \"df_type\") /number lists lists formatted (df, \"df_name\", \"df_domain\", \"df_type\"). uid (character) name uid column currently used data. data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/data_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a data_list class object — data_list","text":"","code":"heart_rate_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var1 = c(0.04, 0.1, 0.3),     var2 = c(30, 2, 0.3) )  personality_test_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var3 = c(900, 1990, 373),     var4 = c(509, 2209, 83) )  survey_response_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var5 = c(1, 3, 3),     var6 = c(2, 3, 3) )  city_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var7 = c(\"toronto\", \"montreal\", \"vancouver\") )  # Explicitly (Name each nested list element): dl <- data_list(     list(         data = heart_rate_df,         name = \"heart_rate\",         domain = \"clinical\",         type = \"continuous\"     ),     list(         data = personality_test_df,         name = \"personality_test\",         domain = \"surveys\",         type = \"continuous\"     ),     list(         data = survey_response_df,         name = \"survey_response\",         domain = \"surveys\",         type = \"ordinal\"     ),     list(         data = city_df,         name = \"city\",         domain = \"location\",         type = \"categorical\"     ),     uid = \"patient_id\" )  # Compact loading dl <- data_list(     list(heart_rate_df, \"heart_rate\", \"clinical\", \"continuous\"),     list(personality_test_df, \"personality_test\", \"surveys\", \"continuous\"),     list(survey_response_df, \"survey_response\", \"surveys\", \"ordinal\"),     list(city_df, \"city\", \"location\", \"categorical\"),     uid = \"patient_id\" )  # Printing data list summaries summary(dl) #>               name        type   domain length width #> 1       heart_rate  continuous clinical      3     2 #> 2 personality_test  continuous  surveys      3     2 #> 3  survey_response     ordinal  surveys      3     2 #> 4             city categorical location      3     1  # Alternative loading: providing a single list of lists list_of_lists <- list(     list(heart_rate_df, \"data1\", \"domain1\", \"continuous\"),     list(personality_test_df, \"data2\", \"domain2\", \"continuous\") )  dl <- data_list(     list_of_lists,     uid = \"patient_id\" )"},{"path":"https://branchlab.github.io/metasnf/reference/depress.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD depression data — depress","title":"Mock ABCD depression data — depress","text":"Like mock data frame \"abcd_depress\", \"unique_id\" \"uid\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/depress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD depression data — depress","text":"","code":"depress"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/depress.html","id":"depress","dir":"Reference","previous_headings":"","what":"depress","title":"Mock ABCD depression data — depress","text":"data frame 275 rows 2 columns: unique_id unique identifier ABCD dataset cbcl_depress_r Ordinal value impairment CBCL anxiety, either 0 (impairment), 1 (borderline clinical), 2 (clinically impaired)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/depress.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD depression data — depress","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/diagnosis_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock diagnosis data — diagnosis_df","title":"Mock diagnosis data — diagnosis_df","text":"data cancer_diagnosis_df, renamed features columns.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/diagnosis_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock diagnosis data — diagnosis_df","text":"","code":"diagnosis_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/diagnosis_df.html","id":"diagnosis-df","dir":"Reference","previous_headings":"","what":"diagnosis_df","title":"Mock diagnosis data — diagnosis_df","text":"data frame 200 rows 2 columns: patient_id Random three-digit number uniquely identifying patient diagnosis Mock diagnosis feature","code":""},{"path":"https://branchlab.github.io/metasnf/reference/diagnosis_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock diagnosis data — diagnosis_df","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/discretisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function for estimate_nclust_given_graph — discretisation","title":"Internal function for estimate_nclust_given_graph — discretisation","text":"Internal function taken SNFtool use number cluster estimation.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/discretisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function for estimate_nclust_given_graph — discretisation","text":"","code":"discretisation(eigenvectors)"},{"path":"https://branchlab.github.io/metasnf/reference/discretisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function for estimate_nclust_given_graph — discretisation","text":"eigenvectors Matrix eigenvectors.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/discretisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function for estimate_nclust_given_graph — discretisation","text":"\"Matrix\" class object, intermediate product spectral clustering.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/discretisation_evec_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function for estimate_nclust_given_graph — discretisation_evec_data","title":"Internal function for estimate_nclust_given_graph — discretisation_evec_data","text":"Internal function taken SNFtool use number cluster estimation.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/discretisation_evec_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function for estimate_nclust_given_graph — discretisation_evec_data","text":"","code":"discretisation_evec_data(eigenvector)"},{"path":"https://branchlab.github.io/metasnf/reference/discretisation_evec_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function for estimate_nclust_given_graph — discretisation_evec_data","text":"eigenvector Matrix eigenvectors","code":""},{"path":"https://branchlab.github.io/metasnf/reference/discretisation_evec_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function for estimate_nclust_given_graph — discretisation_evec_data","text":"\"Matrix\" class object discretized provided eigenvector values 0 1.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dist_fns.html","id":null,"dir":"Reference","previous_headings":"","what":"Built-in distance functions — dist_fns","title":"Built-in distance functions — dist_fns","text":"functions can used building metasnf distance functions list. function converts data frame distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dist_fns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Built-in distance functions — dist_fns","text":"","code":"euclidean_distance(df, weights_row)  gower_distance(df, weights_row)  sn_euclidean_distance(df, weights_row)  sew_euclidean_distance(df, weights_row)  hamming_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/dist_fns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Built-in distance functions — dist_fns","text":"df Data frame containing least 1 data column weights_row Single-row data frame column names contain column names df row contains corresponding weights_row.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dist_fns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Built-in distance functions — dist_fns","text":"matrix class object containing pairwise distances.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dist_fns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Built-in distance functions — dist_fns","text":"Functions work numeric data: euclidean_distance: typical Euclidean distance sn_euclidean_distance: Data frame first standardized normalized typical Euclidean distance applied siw_euclidean_distance: Squared (including weights) Euclidean distance, weights also squared sew_euclidean_distance: Squared (excluding weights) Euclidean distance, weights also squared Functions work binary data: hamming_distance: typical Hamming distance Functions work type data: gower_distance: Gower distance (cluster::daisy)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dist_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a distance metrics list — dist_fns_list","title":"Build a distance metrics list — dist_fns_list","text":"distance metrics list object (inherits classes dist_fns_list list) list stores R functions can convert data frame features matrix pairwise distances. list nested one, first layer list can hold 5 items (one metasnf recognized feature types, continuous, discrete, ordinal, categorical, mixed), second layer can hold arbitrary number distance functions types.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dist_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a distance metrics list — dist_fns_list","text":"","code":"dist_fns_list(   cnt_dist_fns = NULL,   dsc_dist_fns = NULL,   ord_dist_fns = NULL,   cat_dist_fns = NULL,   mix_dist_fns = NULL,   automatic_standard_normalize = FALSE,   use_default_dist_fns = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/dist_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a distance metrics list — dist_fns_list","text":"cnt_dist_fns named list continuous distance metric functions. dsc_dist_fns named list discrete distance metric functions. ord_dist_fns named list ordinal distance metric functions. cat_dist_fns named list categorical distance metric functions. mix_dist_fns named list mixed distance metric functions. automatic_standard_normalize TRUE, automatically use standard normalization prior calculation numeric distances. parameter overrides distance functions list-related parameters. use_default_dist_fns TRUE, prepend base distance metrics (euclidean distance continuous, discrete, ordinal data gower distance categorical mixed data) resulting distance metrics list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dist_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a distance metrics list — dist_fns_list","text":"distance metrics list object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dist_fns_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a distance metrics list — dist_fns_list","text":"Call ?distance_metrics see distance metric functions provided metasnf.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dist_fns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a distance metrics list — dist_fns_list","text":"","code":"# Using just the base distance metrics  ------------------------------------ dist_fns_list <- dist_fns_list() #> ℹ No distance functions specified. Using defaults.  # Adding your own metrics -------------------------------------------------- # This will contain only the and user-provided distance function: cubed_euclidean <- function(df, weights_row) {     # (your code that converts a data frame to a distance metric here...)     weights <- diag(weights_row, nrow = length(weights_row))     weighted_df <- as.matrix(df) %*% weights     distance_matrix <- weighted_df |>         stats::dist(method = \"euclidean\") |>         as.matrix()     distance_matrix <- distance_matrix^3     return(distance_matrix) }  dist_fns_list <- dist_fns_list(     cnt_dist_fns = list(          \"my_cubed_euclidean\" = cubed_euclidean     ) )  # Using default base metrics------------------------------------------------ # Call ?distance_metrics to see all distance metric functions provided in # metasnf. The code below will contain a mix of user-provided and built-in # distance metric functions. dist_fns_list <- dist_fns_list(     cnt_dist_fns = list(          \"my_distance_metric\" = cubed_euclidean     ),     dsc_dist_fns = list(          \"my_distance_metric\" = cubed_euclidean     ),     ord_dist_fns = list(          \"my_distance_metric\" = cubed_euclidean     ),     cat_dist_fns = list(          \"my_distance_metric\" = gower_distance     ),     mix_dist_fns = list(          \"my_distance_metric\" = gower_distance     ),     use_default_dist_fns = TRUE )"},{"path":"https://branchlab.github.io/metasnf/reference/dl_variable_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable-level summary of a data list — dl_variable_summary","title":"Variable-level summary of a data list — dl_variable_summary","text":"Defunct function summarize data list. Please use summary() argument scope = \"feature\" instead.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dl_variable_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable-level summary of a data list — dl_variable_summary","text":"","code":"dl_variable_summary(dl)"},{"path":"https://branchlab.github.io/metasnf/reference/dl_variable_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable-level summary of a data list — dl_variable_summary","text":"dl nested list input data data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dl_variable_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable-level summary of a data list — dl_variable_summary","text":"variable_level_summary data frame containing name, type, domain every variable data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dlapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply-like function for data list objects — dlapply","title":"Apply-like function for data list objects — dlapply","text":"function enables manipulating data_list class object lapply syntax without removing object's data_list class attribute. function preserve attribute result apply call valid data list structure.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dlapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply-like function for data list objects — dlapply","text":"","code":"dlapply(X, FUN, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/dlapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply-like function for data list objects — dlapply","text":"X data_list class object. FUN function applied data list component. ... Optional arguments FUN.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dlapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply-like function for data list objects — dlapply","text":"FUN applied component X yields valid data list, data list. Otherwise, list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dlapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply-like function for data list objects — dlapply","text":"","code":"# Convert all UID values to lowercase dl <- data_list(     list(abcd_income, \"income\", \"demographics\", \"discrete\"),     list(abcd_colour, \"colour\", \"likes\", \"categorical\"),     uid = \"patient\" ) #> ℹ 49 observations dropped due to incomplete data.  dl_lower <- dlapply(     dl,     function(x) {         x$\"data\"$\"uid\" <- tolower(x$\"data\"$\"uid\")         return(x)     } )"},{"path":"https://branchlab.github.io/metasnf/reference/dll_uid_first_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Make the uid UID columns of a data list first — dll_uid_first_col","title":"Make the uid UID columns of a data list first — dll_uid_first_col","text":"Make uid UID columns data list first","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dll_uid_first_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make the uid UID columns of a data list first — dll_uid_first_col","text":"","code":"dll_uid_first_col(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/dll_uid_first_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make the uid UID columns of a data list first — dll_uid_first_col","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dll_uid_first_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make the uid UID columns of a data list first — dll_uid_first_col","text":"object \"uid\" positioned first data frame column.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull domains from a data list — domains","title":"Pull domains from a data list — domains","text":"Pull domains data list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull domains from a data list — domains","text":"","code":"domains(dl)"},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull domains from a data list — domains","text":"dl nested list input data data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull domains from a data list — domains","text":"character vector domains.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dplyr_row_slice.ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to extend dplyr to extended solutions data frame objects — dplyr_row_slice.ext_solutions_df","title":"Function to extend dplyr to extended solutions data frame objects — dplyr_row_slice.ext_solutions_df","text":"Function extend dplyr extended solutions data frame objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dplyr_row_slice.ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to extend dplyr to extended solutions data frame objects — dplyr_row_slice.ext_solutions_df","text":"","code":"dplyr_row_slice.ext_solutions_df(data, i, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/dplyr_row_slice.ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to extend dplyr to extended solutions data frame objects — dplyr_row_slice.ext_solutions_df","text":"data extended solutions data frame. vector row indices. ... Additional arguments.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dplyr_row_slice.ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to extend dplyr to extended solutions data frame objects — dplyr_row_slice.ext_solutions_df","text":"Row sliced object appropriately preserved attributes.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dplyr_row_slice.solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to extend dplyr to solutions data frame objects — dplyr_row_slice.solutions_df","title":"Function to extend dplyr to solutions data frame objects — dplyr_row_slice.solutions_df","text":"Function extend dplyr solutions data frame objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dplyr_row_slice.solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to extend dplyr to solutions data frame objects — dplyr_row_slice.solutions_df","text":"","code":"dplyr_row_slice.solutions_df(data, i, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/dplyr_row_slice.solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to extend dplyr to solutions data frame objects — dplyr_row_slice.solutions_df","text":"data solutions data frame. vector row indices. ... Additional arguments.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dplyr_row_slice.solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to extend dplyr to solutions data frame objects — dplyr_row_slice.solutions_df","text":"Row sliced object appropriately preserved attributes.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/drop_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to remove columns from a data frame — drop_cols","title":"Helper function to remove columns from a data frame — drop_cols","text":"Helper function remove columns data frame","code":""},{"path":"https://branchlab.github.io/metasnf/reference/drop_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to remove columns from a data frame — drop_cols","text":"","code":"drop_cols(x, cols)"},{"path":"https://branchlab.github.io/metasnf/reference/drop_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to remove columns from a data frame — drop_cols","text":"x data frame cols Vector column names removed","code":""},{"path":"https://branchlab.github.io/metasnf/reference/drop_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to remove columns from a data frame — drop_cols","text":"x without columns cols","code":""},{"path":"https://branchlab.github.io/metasnf/reference/drop_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute inclusion — drop_inputs","title":"Execute inclusion — drop_inputs","text":"Given data list settings data frame row, returns data list selected inputs.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/drop_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute inclusion — drop_inputs","text":"","code":"drop_inputs(sdf_row, dl)"},{"path":"https://branchlab.github.io/metasnf/reference/drop_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute inclusion — drop_inputs","text":"sdf_row Row settings data frame. dl nested list input data data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/drop_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute inclusion — drop_inputs","text":"data list (class \"list\") component corresponding 0 value provided settings data frame row removed.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ensure_dll_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure the data item of each component is a data.frame class object — ensure_dll_df","title":"Ensure the data item of each component is a data.frame class object — ensure_dll_df","text":"Ensure data item component data.frame class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ensure_dll_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure the data item of each component is a data.frame class object — ensure_dll_df","text":"","code":"ensure_dll_df(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/ensure_dll_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure the data item of each component is a data.frame class object — ensure_dll_df","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ensure_dll_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure the data item of each component is a data.frame class object — ensure_dll_df","text":"provided dll data item component data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/esm_manhattan_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Manhattan plot of feature-cluster association p-values — esm_manhattan_plot","title":"Manhattan plot of feature-cluster association p-values — esm_manhattan_plot","text":"Manhattan plot feature-cluster association p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/esm_manhattan_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manhattan plot of feature-cluster association p-values — esm_manhattan_plot","text":"","code":"esm_manhattan_plot(   esm,   neg_log_pval_thresh = 5,   threshold = NULL,   point_size = 5,   jitter_width = 0.1,   jitter_height = 0.1,   text_size = 15,   plot_title = NULL,   hide_x_labels = FALSE,   bonferroni_line = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/esm_manhattan_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manhattan plot of feature-cluster association p-values — esm_manhattan_plot","text":"esm Extended solutions data frame storing associations features cluster assignments. See ?extend_solutions. neg_log_pval_thresh Threshold negative log p-values. threshold P-value threshold plot dashed line . point_size Size points plot. jitter_width Width jitter. jitter_height Height jitter. text_size Size text plot. plot_title Title plot. hide_x_labels TRUE, hides x-axis labels. bonferroni_line TRUE, plots dashed black line Bonferroni-corrected equivalent p-value threshold.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/esm_manhattan_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manhattan plot of feature-cluster association p-values — esm_manhattan_plot","text":"Manhattan plot (class \"gg\", \"ggplot\") showing association p-values features solution provided solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/esm_manhattan_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manhattan plot of feature-cluster association p-values — esm_manhattan_plot","text":"","code":"# full_dl <- data_list( #     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"), #     list(income, \"household_income\", \"demographics\", \"continuous\"), #     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"), #     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"), #     list(depress, \"depressed\", \"behaviour\", \"ordinal\"), #     uid = \"unique_id\" # ) #  # dl <- full_dl[1:3] # target_dl <- full_dl[4:5] #  # set.seed(42) # sc <- snf_config( #     dl = dl, #     n_solutions = 20, #     min_k = 20, #     max_k = 50 # ) #  # sol_df <- batch_snf(dl, sc) #  # ext_sol_df <- extend_solutions( #     sol_df, #     dl = dl, #     target = target_dl, #     min_pval = 1e-10 # p-values below 1e-10 will be thresholded to 1e-10 # ) #  # esm_manhattan <- esm_manhattan_plot( #     ext_sol_df[1:5, ], #     neg_log_pval_thresh = 5, #     threshold = 0.05, #     point_size = 3, #     jitter_width = 0.1, #     jitter_height = 0.1, #     plot_title = \"Feature-Solution Associations\", #     text_size = 14, #     bonferroni_line = TRUE # )"},{"path":"https://branchlab.github.io/metasnf/reference/estimate_nclust_given_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate number of clusters for a similarity matrix — estimate_nclust_given_graph","title":"Estimate number of clusters for a similarity matrix — estimate_nclust_given_graph","text":"Calculate eigengap rotation-cost estimates number clusters use clustering similarity matrix. function adapted SNFtool::estimateClustersGivenGraph, scales Laplacian operator prior eigenvalue calculations minimize risk floating point-related errors.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/estimate_nclust_given_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate number of clusters for a similarity matrix — estimate_nclust_given_graph","text":"","code":"estimate_nclust_given_graph(W, NUMC = 2:10)"},{"path":"https://branchlab.github.io/metasnf/reference/estimate_nclust_given_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate number of clusters for a similarity matrix — estimate_nclust_given_graph","text":"W Similarity matrix calculate number clusters . NUMC Range cluster counts consider among picking best number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/estimate_nclust_given_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate number of clusters for a similarity matrix — estimate_nclust_given_graph","text":"list containing top two eigengap rotation-cost estimates number clusters given similarity matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/estimate_nclust_given_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate number of clusters for a similarity matrix — estimate_nclust_given_graph","text":"","code":"input_dl <- data_list(     list(gender_df, \"gender\", \"demographics\", \"categorical\"),     list(diagnosis_df, \"diagnosis\", \"clinical\", \"categorical\"),     uid = \"patient_id\" )  sc <- snf_config(input_dl, n_solutions = 1) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults. sol_df <- batch_snf(input_dl, sc, return_sim_mats = TRUE) sim_mat <- sim_mats_list(sol_df)[[1]] estimate_nclust_given_graph(sim_mat) #> $`Eigen-gap best` #> [1] 4 #>  #> $`Eigen-gap 2nd best` #> [1] 3 #>  #> $`Rotation cost best` #> [1] 4 #>  #> $`Rotation cost 2nd best` #> [1] 3 #>"},{"path":"https://branchlab.github.io/metasnf/reference/expression_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Modification of SNFtool mock data frame ","title":"Modification of SNFtool mock data frame ","text":"Modification SNFtool mock data frame \"Data1\"","code":""},{"path":"https://branchlab.github.io/metasnf/reference/expression_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modification of SNFtool mock data frame ","text":"","code":"expression_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/expression_df.html","id":"expression-df","dir":"Reference","previous_headings":"","what":"expression_df","title":"Modification of SNFtool mock data frame ","text":"data frame 200 rows 3 columns: gene_1_expression Mock gene expression feature gene_2_expression Mock gene expression feature patient_id Random three-digit number uniquely identifying patient","code":""},{"path":"https://branchlab.github.io/metasnf/reference/expression_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Modification of SNFtool mock data frame ","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for ext_solutions_df class object — ext_solutions_df","title":"Constructor for ext_solutions_df class object — ext_solutions_df","text":"extended solutions data frame column-extended variation solutions data frame. contains association p-values relating cluster membership feature distribution solutions solutions data frame features provided data list (data lists). target data list used call extend_solutions, extended solutions data frame also columns \"min_pval\", \"mean_pval\", \"max_pval\" summarizing p-values just features part target list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for ext_solutions_df class object — ext_solutions_df","text":"","code":"ext_solutions_df(ext_sol_dfl, sol_df, fts, target_dl)"},{"path":"https://branchlab.github.io/metasnf/reference/ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for ext_solutions_df class object — ext_solutions_df","text":"ext_sol_dfl extended solutions data frame-like object. sol_df Result batch_snf storing cluster solutions settings used generate . fts vector features association p-values stored resulting extended solutions data frame. target_dl data list features calculate p-values . Features target list included p-value summary measure calculations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for ext_solutions_df class object — ext_solutions_df","text":"ext_solutions_df class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend a solutions data frame to include outcome evaluations — extend_solutions","title":"Extend a solutions data frame to include outcome evaluations — extend_solutions","text":"Extend solutions data frame include outcome evaluations","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend a solutions data frame to include outcome evaluations — extend_solutions","text":"","code":"extend_solutions(   sol_df,   target_dl = NULL,   dl = NULL,   cat_test = \"chi_squared\",   min_pval = 1e-10,   processes = 1,   verbose = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend a solutions data frame to include outcome evaluations — extend_solutions","text":"sol_df Result batch_snf storing cluster solutions settings used generate . target_dl data list features calculate p-values . Features target list included p-value summary measure calculations. dl data list features calculate p-values , incorporated p-value summary measure columns (.e., min/mean/max p-value columns). cat_test String indicating statistical test used associate cluster categorical feature. Options \"chi_squared\" Chi-squared test \"fisher_exact\" Fisher's exact test. min_pval assigned value, p-value less replaced value. processes number processes use parallelization. Progress reported sequential processing (processes = 1). verbose TRUE, output progress console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend a solutions data frame to include outcome evaluations — extend_solutions","text":"extended solutions data frame (ext_sol_df class object) contains p-value columns outcome provided data lists","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extend a solutions data frame to include outcome evaluations — extend_solutions","text":"","code":"if (FALSE) { # \\dontrun{     input_dl <- data_list(         list(gender_df, \"gender\", \"demographics\", \"categorical\"),         list(diagnosis_df, \"diagnosis\", \"clinical\", \"categorical\"),         uid = \"patient_id\"     )          sc <- snf_config(input_dl, n_solutions = 2)          sol_df <- batch_snf(input_dl, sc)          ext_sol_df <- extend_solutions(sol_df, input_dl) } # }"},{"path":"https://branchlab.github.io/metasnf/reference/fav_colour.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD ","title":"Mock ABCD ","text":"Like mock data frame \"abcd_colour\", \"unique_id\" \"uid\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fav_colour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD ","text":"","code":"fav_colour"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/fav_colour.html","id":"fav-colour","dir":"Reference","previous_headings":"","what":"fav_colour","title":"Mock ABCD ","text":"data frame 275 rows 2 columns: unique_id unique identifier ABCD dataset colour Categorical transformation cbcl_depress.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fav_colour.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD ","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/features.html","id":null,"dir":"Reference","previous_headings":"","what":"Return character vector of features stored in an object — features","title":"Return character vector of features stored in an object — features","text":"Return character vector features stored object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return character vector of features stored in an object — features","text":"","code":"features(x)"},{"path":"https://branchlab.github.io/metasnf/reference/features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return character vector of features stored in an object — features","text":"x object pull features .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return character vector of features stored in an object — features","text":"character vector features x.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fisher_exact_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher exact test p-value — fisher_exact_pval","title":"Fisher exact test p-value — fisher_exact_pval","text":"Return p-value Fisher exact test two features","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fisher_exact_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher exact test p-value — fisher_exact_pval","text":"","code":"fisher_exact_pval(cat_var1, cat_var2)"},{"path":"https://branchlab.github.io/metasnf/reference/fisher_exact_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher exact test p-value — fisher_exact_pval","text":"cat_var1 categorical feature. cat_var2 categorical feature.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fisher_exact_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher exact test p-value — fisher_exact_pval","text":"pval p-value (class \"numeric\").","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gender_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock gender data — gender_df","title":"Mock gender data — gender_df","text":"Mock gender data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gender_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock gender data — gender_df","text":"","code":"gender_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/gender_df.html","id":"gender-df","dir":"Reference","previous_headings":"","what":"gender_df","title":"Mock gender data — gender_df","text":"data frame 200 rows 2 columns: patient_id Random three-digit number uniquely identifying patient gender_df Mock gene methylation feature","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gender_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock gender data — gender_df","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_annotations_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate annotations list — generate_annotations_list","title":"Generate annotations list — generate_annotations_list","text":"Intermediate function takes formatted lists features annotations viewed returns annotation objects usable ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_annotations_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate annotations list — generate_annotations_list","text":"","code":"generate_annotations_list(   df,   left_bar = NULL,   right_bar = NULL,   top_bar = NULL,   bottom_bar = NULL,   left_hm = NULL,   right_hm = NULL,   top_hm = NULL,   bottom_hm = NULL,   show_legend = TRUE,   annotation_colours = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_annotations_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate annotations list — generate_annotations_list","text":"df data frame containing data specified remaining arguments. left_bar Named list strings, strings features df used barplot annotation left plot names names used caption plots legends. right_bar See left_bar. top_bar See left_bar. bottom_bar See left_bar. left_hm Like left_bar, heatmap annotation instead barplot annotation. right_hm See left_hm. top_hm See left_hm. bottom_hm See left_hm. show_legend Add legends annotations. annotation_colours Named list heatmap annotations colours.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_annotations_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate annotations list — generate_annotations_list","text":"annotations_list named list annotations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a clustering algorithms list — generate_clust_algs_list","title":"Generate a clustering algorithms list — generate_clust_algs_list","text":"Deprecated function building clustering algorithms list. Please use clust_fns_list() (better yet, snf_config()) instead.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a clustering algorithms list — generate_clust_algs_list","text":"","code":"generate_clust_algs_list(..., disable_base = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a clustering algorithms list — generate_clust_algs_list","text":"... arbitrary number named clustering functions disable_base TRUE, prepend base clustering algorithms (spectral_eigen spectral_rot, apply spectral clustering use eigen-gap rotation cost heuristics respectively determining number clusters graph.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a clustering algorithms list — generate_clust_algs_list","text":"list clustering algorithm functions can passed batch_snf generate_settings_list functions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of distance metrics — generate_distance_metrics_list","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"Deprecated function building distance metrics list. Please use dist_fns_list() (better yet, snf_config()) instead.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"","code":"generate_distance_metrics_list(   continuous_distances = NULL,   discrete_distances = NULL,   ordinal_distances = NULL,   categorical_distances = NULL,   mixed_distances = NULL,   keep_defaults = TRUE )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"continuous_distances named list distance metric functions discrete_distances named list distance metric functions ordinal_distances named list distance metric functions categorical_distances named list distance metric functions mixed_distances named list distance metric functions keep_defaults TRUE (default), prepend base distance metrics (euclidean standard normalized euclidean)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"nested named list distance metrics functions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_settings_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a settings data frame — generate_settings_matrix","title":"Build a settings data frame — generate_settings_matrix","text":"Deprecated function building settings matrix. Please use settings_df() instead.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_settings_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a settings data frame — generate_settings_matrix","text":"","code":"generate_settings_matrix(...)"},{"path":"https://branchlab.github.io/metasnf/reference/generate_settings_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a settings data frame — generate_settings_matrix","text":"... Arguments used generate settings matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_settings_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a settings data frame — generate_settings_matrix","text":"Raises deprecated error.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cluster membership information from one solutions data frame row — get_cluster_df","title":"Extract cluster membership information from one solutions data frame row — get_cluster_df","text":"Deprecated function building extracting cluster solutions solutions data frame. Please use t() instead. function takes single row solutions data frame returns data frame containing cluster assignments uid. similar get_clusters(), takes one solutions data frame row returns vector cluster assignments' get_cluster_solutions(), takes solutions data frame number rows returns data frame indicating cluster assignments rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cluster membership information from one solutions data frame row — get_cluster_df","text":"","code":"get_cluster_df(sol_df_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cluster membership information from one solutions data frame row — get_cluster_df","text":"sol_df_row One row solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract cluster membership information from one solutions data frame row — get_cluster_df","text":"cluster_df data frame cluster uid.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_solutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cluster membership information from a sol_df — get_cluster_solutions","title":"Extract cluster membership information from a sol_df — get_cluster_solutions","text":"Deprecated function building extracting cluster solutions solutions data frame. Please use t() instead. function takes solutions data frame returns data frame containing cluster assignments uid. similar 'get_clusters(), takes one solutions data frame row returns vector cluster assignments' get_cluster_df(), takes solutions matrix one row returns data frame two columns: \"cluster\" \"uid\" (UID observation).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_solutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cluster membership information from a sol_df — get_cluster_solutions","text":"","code":"get_cluster_solutions(sol_df)"},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_solutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cluster membership information from a sol_df — get_cluster_solutions","text":"sol_df sol_df.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_solutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract cluster membership information from a sol_df — get_cluster_solutions","text":"\"data.frame\" object row observation column (apart uid column) indicates cluster observation assigned corresponding solutions data frame row.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cluster membership vector from one solutions data frame row — get_clusters","title":"Extract cluster membership vector from one solutions data frame row — get_clusters","text":"Deprecated function building extracting cluster solutions solutions data frame. Please use t() instead. function takes single row solutions data frame returns vector containing cluster assignments observation. similar get_cluster_df(), takes solutions data frame one row returns data frame two columns: \"cluster\" \"uid\" '(UID observation) get_cluster_solutions(), takes solutions data frame number rows returns data frame indicating cluster assignments rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cluster membership vector from one solutions data frame row — get_clusters","text":"","code":"get_clusters(sol_df_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cluster membership vector from one solutions data frame row — get_clusters","text":"sol_df_row Output matrix row.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract cluster membership vector from one solutions data frame row — get_clusters","text":"clusters Vector assigned clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_complete_uids.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull complete-data UIDs from a list of data frames — get_complete_uids","title":"Pull complete-data UIDs from a list of data frames — get_complete_uids","text":"function identifies observations within list data frames missing data across data frames. function useful constructing data lists distinct feature sets sample observations. data_list() strips away observations missing data, distinct sets observations may generated building data list group observations different sets features. Reducing pool observations complete UIDs first avoid downstream generation data lists differing sizes.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_complete_uids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull complete-data UIDs from a list of data frames — get_complete_uids","text":"","code":"get_complete_uids(list_of_dfs, uid)"},{"path":"https://branchlab.github.io/metasnf/reference/get_complete_uids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull complete-data UIDs from a list of data frames — get_complete_uids","text":"list_of_dfs List data frames. uid Name column across data frames containing UIDs","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_complete_uids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull complete-data UIDs from a list of data frames — get_complete_uids","text":"character vector UIDs observations complete data across provided list data frames.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_complete_uids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull complete-data UIDs from a list of data frames — get_complete_uids","text":"","code":"complete_uids <- get_complete_uids(     list(income, pubertal, anxiety, depress),     uid = \"unique_id\" )  income <- income[income$\"unique_id\" %in% complete_uids, ] pubertal <- pubertal[pubertal$\"unique_id\" %in% complete_uids, ] anxiety <- anxiety[anxiety$\"unique_id\" %in% complete_uids, ] depress <- depress[depress$\"unique_id\" %in% complete_uids, ]  input_dl <- data_list(     list(income, \"income\", \"demographics\", \"ordinal\"),     list(pubertal, \"pubertal\", \"demographics\", \"continuous\"),     uid = \"unique_id\" )  target_dl <- data_list(     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" )"},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance matrices — get_dist_matrix","title":"Calculate distance matrices — get_dist_matrix","text":"Given data frame numerical features, return euclidean distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance matrices — get_dist_matrix","text":"","code":"get_dist_matrix(   df,   input_type,   cnt_dist_fn,   dsc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row )"},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance matrices — get_dist_matrix","text":"df Raw data frame subject IDs column \"uid\" input_type Either \"numeric\" (resulting euclidean distances), \"categorical\" (resulting binary distances), \"mixed\" (resulting gower distances) cnt_dist_fn distance metric function continuous data dsc_dist_fn distance metric function discrete data ord_dist_fn distance metric function ordinal data cat_dist_fn distance metric function categorical data mix_dist_fn distance metric function mixed data weights_row Single-row data frame column names contain column names df row contains corresponding weights_row.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance matrices — get_dist_matrix","text":"dist_matrix Matrix inter-observation distances.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dl_uids.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract UIDs from a data list — get_dl_uids","title":"Extract UIDs from a data list — get_dl_uids","text":"Deprecated function extracting UIDs data list. Please use uids() instead.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dl_uids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract UIDs from a data list — get_dl_uids","text":"","code":"get_dl_uids(dl, prefix = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/get_dl_uids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract UIDs from a data list — get_dl_uids","text":"dl nested list input data data_list(). prefix TRUE, preserves \"uid_\" prefix added UIDs creating data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dl_uids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract UIDs from a data list — get_dl_uids","text":"character vector UID labels contained data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_heatmap_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the row or column ordering present in a heatmap — get_heatmap_order","title":"Return the row or column ordering present in a heatmap — get_heatmap_order","text":"Return row column ordering present heatmap","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_heatmap_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the row or column ordering present in a heatmap — get_heatmap_order","text":"","code":"get_heatmap_order(heatmap, type = \"rows\")"},{"path":"https://branchlab.github.io/metasnf/reference/get_heatmap_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the row or column ordering present in a heatmap — get_heatmap_order","text":"heatmap heatmap object collect ordering . type type ordering return. Either \"rows\" \"columns\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_heatmap_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the row or column ordering present in a heatmap — get_heatmap_order","text":"numeric vector ordering used within provided ComplexHeatmap \"Heatmap\" object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_matrix_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the hierarchical clustering order of a matrix — get_matrix_order","title":"Return the hierarchical clustering order of a matrix — get_matrix_order","text":"Return hierarchical clustering order matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_matrix_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the hierarchical clustering order of a matrix — get_matrix_order","text":"","code":"get_matrix_order(matrix, dist_method = \"euclidean\", hclust_method = \"complete\")"},{"path":"https://branchlab.github.io/metasnf/reference/get_matrix_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the hierarchical clustering order of a matrix — get_matrix_order","text":"matrix Matrix cluster. dist_method Distance method use calculating sorting order matrix. Argument directly passed stats::dist. Options include \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\", \"minkowski\". hclust_method Agglomerative method use calculating sorting order stats::hclust. Options include \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_matrix_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the hierarchical clustering order of a matrix — get_matrix_order","text":"numeric vector ordering derived specified hierarchical clustering method applied provided matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_matrix_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the hierarchical clustering order of a matrix — get_matrix_order","text":"","code":"# dl <- data_list( #     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"), #     list(income, \"household_income\", \"demographics\", \"continuous\"), #     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"), #     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"), #     list(depress, \"depressed\", \"behaviour\", \"ordinal\"), #     uid = \"unique_id\" # ) #  # sc <- snf_config( #     dl = dl, #     n_solutions = 20, #     min_k = 20, #     max_k = 50 # ) #  # sol_df <- batch_snf(dl, sc) #  # ext_sol_df <- extend_solutions( #     sol_df, #     dl = dl, #     min_pval = 1e-10 # p-values below 1e-10 will be thresholded to 1e-10 # ) #  # # Calculate pairwise similarities between cluster solutions # sol_aris <- calc_aris(sol_df) #  # # Extract hierarchical clustering order of the cluster solutions # meta_cluster_order <- get_matrix_order(sol_aris)"},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mean p-value — get_mean_pval","title":"Get mean p-value — get_mean_pval","text":"Given solutions data frame row containing evaluated p-values, returns mean.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mean p-value — get_mean_pval","text":"","code":"get_mean_pval(sol_df_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mean p-value — get_mean_pval","text":"sol_df_row row sol_df object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mean p-value — get_mean_pval","text":"mean_pval mean p-value","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_min_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Get minimum p-value — get_min_pval","title":"Get minimum p-value — get_min_pval","text":"Given solutions data frame row containing evaluated p-values, returns min.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_min_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get minimum p-value — get_min_pval","text":"","code":"get_min_pval(sol_df_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_min_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get minimum p-value — get_min_pval","text":"sol_df_row row sol_df object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_min_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get minimum p-value — get_min_pval","text":"min_pval minimum p-value","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_pvals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get p-values from an extended solutions data frame — get_pvals","title":"Get p-values from an extended solutions data frame — get_pvals","text":"function can used neatly format p-values associated extended solutions data frame. can also calculate negative logs p-values make easier interpret large-scale differences.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_pvals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get p-values from an extended solutions data frame — get_pvals","text":"","code":"get_pvals(ext_sol_df, negative_log = FALSE, keep_summaries = TRUE)"},{"path":"https://branchlab.github.io/metasnf/reference/get_pvals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get p-values from an extended solutions data frame — get_pvals","text":"ext_sol_df output extend_solutions. data frame contains least one p-value column ending \"_pval\". negative_log TRUE, replace p-values negative log p-values. keep_summaries FALSE, remove mean, min, max p-value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_pvals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get p-values from an extended solutions data frame — get_pvals","text":"\"data.frame\" class object p-value related columns provided ext_sol_df.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_representative_solutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract representative solutions from a matrix of ARIs — get_representative_solutions","title":"Extract representative solutions from a matrix of ARIs — get_representative_solutions","text":"Following clustering batch_snf, matrix pairwise ARIs show related cluster solution can generated calc_aris function. Partitioning ARI matrix can done visual inspection meta_cluster_heatmap() results shiny_annotator. Given indices meta cluster boundaries, function return single representative solution meta cluster based maximum average ARI solutions within meta cluster.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_representative_solutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract representative solutions from a matrix of ARIs — get_representative_solutions","text":"","code":"get_representative_solutions(aris, sol_df, filter_fn = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/get_representative_solutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract representative solutions from a matrix of ARIs — get_representative_solutions","text":"aris Matrix adjusted rand indices calc_aris() sol_df Output batch_snf containing cluster solutions. filter_fn Optional function filter meta-cluster prior maximum average ARI determination. can useful explicitly trying select solution meets certain condition, picking 4 cluster solutions within meta cluster. example valid function fn <- function(x) x[x$\"nclust\" == 4, ].","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_representative_solutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract representative solutions from a matrix of ARIs — get_representative_solutions","text":"provided solutions data frame reduced just one row per meta cluster defined split vector.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_representative_solutions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract representative solutions from a matrix of ARIs — get_representative_solutions","text":"","code":"# dl <- data_list( #     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"), #     list(income, \"household_income\", \"demographics\", \"continuous\"), #     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"), #     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"), #     list(depress, \"depressed\", \"behaviour\", \"ordinal\"), #     uid = \"unique_id\" # ) #  # sc <- snf_config( #     dl = dl, #     n_solutions = 20, #     min_k = 20, #     max_k = 50 # ) #  # sol_df <- batch_snf(dl, sc) #  # ext_sol_df <- extend_solutions( #     sol_df, #     dl = dl, #     min_pval = 1e-10 # p-values below 1e-10 will be thresholded to 1e-10 # ) #  # # Calculate pairwise similarities between cluster solutions # sol_aris <- calc_aris(sol_df) #  # # Extract hierarchical clustering order of the cluster solutions # meta_cluster_order <- get_matrix_order(sol_aris) #  # # Identify meta cluster boundaries with shiny app or trial and error # # ari_hm <- meta_cluster_heatmap(sol_aris, order = meta_cluster_order) # # shiny_annotator(ari_hm) #  # # Result of meta cluster examination # split_vec <- c(2, 5, 12, 17) #  # ext_sol_df <- label_meta_clusters(ext_sol_df, split_vec, meta_cluster_order) #  # # Extracting representative solutions from each defined meta cluster # rep_solutions <- get_representative_solutions(sol_aris, ext_sol_df)"},{"path":"https://branchlab.github.io/metasnf/reference/gexclude.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to drop columns from a data frame by grepl search — gexclude","title":"Helper function to drop columns from a data frame by grepl search — gexclude","text":"Helper function drop columns data frame grepl search","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gexclude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to drop columns from a data frame by grepl search — gexclude","text":"","code":"gexclude(x, pattern)"},{"path":"https://branchlab.github.io/metasnf/reference/gexclude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to drop columns from a data frame by grepl search — gexclude","text":"x Data frame drop columns . pattern Pattern used match columns drop.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gexclude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to drop columns from a data frame by grepl search — gexclude","text":"x without columns matching pattern.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to pick columns from a data frame by grepl search — gselect","title":"Helper function to pick columns from a data frame by grepl search — gselect","text":"Helper function pick columns data frame grepl search","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to pick columns from a data frame by grepl search — gselect","text":"","code":"gselect(x, pattern)"},{"path":"https://branchlab.github.io/metasnf/reference/gselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to pick columns from a data frame by grepl search — gselect","text":"x Data frame select columns . pattern Pattern used match columns select.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to pick columns from a data frame by grepl search — gselect","text":"x columns matching pattern.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/income.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD income data — income","title":"Mock ABCD income data — income","text":"Like mock data frame \"abcd_h_income\", \"unique_id\" \"uid\". Like mock data frame \"abcd_cort_sa\", \"unique_id\" \"uid\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD income data — income","text":"","code":"income  income"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/income.html","id":"income","dir":"Reference","previous_headings":"","what":"income","title":"Mock ABCD income data — income","text":"data frame 300 rows 2 columns: unique_id unique identifier ABCD dataset household_income Household income 3 category levels (low = 1, medium = 2, high = 3)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/income.html","id":"income-1","dir":"Reference","previous_headings":"","what":"income","title":"Mock ABCD income data — income","text":"data frame 300 rows 2 columns: unique_id unique identifier ABCD dataset household_income Household income 3 category levels (low = 1, medium = 2, high = 3)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/income.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD income data — income","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators. Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/is_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a data list — is_data_list","title":"Test if the object is a data list — is_data_list","text":"Given object, returns TRUE object inherits data_list class.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/is_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a data list — is_data_list","text":"","code":"is_data_list(x)"},{"path":"https://branchlab.github.io/metasnf/reference/is_data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a data list — is_data_list","text":"x object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/is_data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a data list — is_data_list","text":"TRUE object inherits data_list class.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/jitter_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Jitter plot separating a feature by cluster — jitter_plot","title":"Jitter plot separating a feature by cluster — jitter_plot","text":"Jitter plot separating feature cluster","code":""},{"path":"https://branchlab.github.io/metasnf/reference/jitter_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jitter plot separating a feature by cluster — jitter_plot","text":"","code":"jitter_plot(df, feature)"},{"path":"https://branchlab.github.io/metasnf/reference/jitter_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jitter plot separating a feature by cluster — jitter_plot","text":"df data.frame containing cluster column feature plot. feature feature plot.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/jitter_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jitter plot separating a feature by cluster — jitter_plot","text":"jitter+violin plot (class \"gg\", \"ggplot\") showing distribution feature across clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_meta_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign meta cluster labels to rows of a solutions data frame or extended solutions data frame — label_meta_clusters","title":"Assign meta cluster labels to rows of a solutions data frame or extended solutions data frame — label_meta_clusters","text":"Given solutions data frame extended solutions data frame class object numeric vector indicating rows correspond meta clusters, assigns meta clustering information \"meta_clusters\" attribute data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_meta_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign meta cluster labels to rows of a solutions data frame or extended solutions data frame — label_meta_clusters","text":"","code":"label_meta_clusters(sol_df, split_vector, order = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/label_meta_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign meta cluster labels to rows of a solutions data frame or extended solutions data frame — label_meta_clusters","text":"sol_df solutions data frame extended solutions data frame assign meta clusters . split_vector numeric vector indicating rows sol_df split points meta cluster labeling. order optional numeric vector indicating solutions data frame reordered prior meta cluster labeling. vector can obtained running get_matrix_order() ARI matrix, can obtained calling calc_aris() solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_meta_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign meta cluster labels to rows of a solutions data frame or extended solutions data frame — label_meta_clusters","text":"solutions data frame populated \"meta_clusters\" attribute.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_meta_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign meta cluster labels to rows of a solutions data frame or extended solutions data frame — label_meta_clusters","text":"","code":"#dl <- data_list( #    list(cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"), #    list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"), #    list(income, \"household_income\", \"demographics\", \"continuous\"), #    list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"), #    uid = \"unique_id\" #) # #set.seed(42) #my_sc <- snf_config( #    dl = dl, #    n_solutions = 20, #    min_k = 20, #    max_k = 50 #) # #sol_df <- batch_snf(dl, my_sc) # #sol_df # #sol_aris <- calc_aris(sol_df) # #meta_cluster_order <- get_matrix_order(sol_aris) # ## `split_vec` found by iteratively plotting ari_hm or by ?shiny_annotator() #split_vec <- c(6, 10, 16) #ari_hm <- meta_cluster_heatmap( #    sol_aris, #    order = meta_cluster_order, #    split_vector = split_vec #) # #mc_sol_df <- label_meta_clusters( #    sol_df, #    order = meta_cluster_order, #    split_vector = split_vec #) # #mc_sol_df"},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Label propagation — label_prop","title":"Label propagation — label_prop","text":"Given full fused network (one containing pre-clustered observations --clustered observations) clusters pre-clustered observations, return label propagated list clusters observations. function derived SNFtool::groupPredict. Modifications made take full fused network input, rather taking input data frames running SNF internally. ensures alternative approaches data normalization distance matrix calculations can chosen user.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label propagation — label_prop","text":"","code":"label_prop(full_fused_network, clusters)"},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label propagation — label_prop","text":"full_fused_network network made running SNF training test observations together. clusters vector assigned clusters training observations matching order appear full_fused_network.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label propagation — label_prop","text":"list cluster labels observations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_propagate.html","id":null,"dir":"Reference","previous_headings":"","what":"Label propagate cluster solutions to non-clustered observations — label_propagate","title":"Label propagate cluster solutions to non-clustered observations — label_propagate","text":"Given solutions data frame containing clustered observations data list containing clustered observations well additional --clustered observations, function re-run SNF generate similarity matrix observations use label propagation algorithm assigned predicted clusters non-clustered observations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_propagate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label propagate cluster solutions to non-clustered observations — label_propagate","text":"","code":"label_propagate(partial_sol_df, full_dl, verbose = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/label_propagate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label propagate cluster solutions to non-clustered observations — label_propagate","text":"partial_sol_df solutions data frame derived training set. full_dl data list containing observations training testing sets. verbose TRUE, output progress console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_propagate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label propagate cluster solutions to non-clustered observations — label_propagate","text":"data frame one row per observation containing column UIDs, column whether observation train (original) test (held ) set, one column per row solutions data frame indicating original propagated clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_propagate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label propagate cluster solutions to non-clustered observations — label_propagate","text":"","code":"## Function to identify observations with complete data #uids_with_complete_obs <- get_complete_uids( #    list(subc_v, income, pubertal, anxiety, depress), #    uid = \"unique_id\" #) # ## Dataframe assigning 80% of observations to train and 20% to test #train_test_split <- train_test_assign( #    train_frac = 0.8, #    uids = uids_with_complete_obs #) # ## Pulling the training and testing observations specifically #train_obs <- train_test_split$\"train\" #test_obs <- train_test_split$\"test\" # ## Partition a training set #train_subc_v <- subc_v[subc_v$\"unique_id\" %in% train_obs, ] #train_income <- income[income$\"unique_id\" %in% train_obs, ] #train_pubertal <- pubertal[pubertal$\"unique_id\" %in% train_obs, ] #train_anxiety <- anxiety[anxiety$\"unique_id\" %in% train_obs, ] #train_depress <- depress[depress$\"unique_id\" %in% train_obs, ] # ## Partition a test set #test_subc_v <- subc_v[subc_v$\"unique_id\" %in% test_obs, ] #test_income <- income[income$\"unique_id\" %in% test_obs, ] #test_pubertal <- pubertal[pubertal$\"unique_id\" %in% test_obs, ] #test_anxiety <- anxiety[anxiety$\"unique_id\" %in% test_obs, ] #test_depress <- depress[depress$\"unique_id\" %in% test_obs, ] # ## Find cluster solutions in the training set #train_dl <- data_list( #    list(train_subc_v, \"subc_v\", \"neuroimaging\", \"continuous\"), #    list(train_income, \"household_income\", \"demographics\", \"continuous\"), #    list(train_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"), #    uid = \"unique_id\" #) # ## We'll pick a solution that has good separation over our target features #train_target_dl <- data_list( #    list(train_anxiety, \"anxiety\", \"behaviour\", \"ordinal\"), #    list(train_depress, \"depressed\", \"behaviour\", \"ordinal\"), #    uid = \"unique_id\" #) # #sc <- snf_config( #    train_dl, #    n_solutions = 5, #    min_k = 10, #    max_k = 30 #) # #train_sol_df <- batch_snf( #    train_dl, #    sc, #    return_sim_mats = TRUE #) # #ext_sol_df <- extend_solutions( #    train_sol_df, #    train_target_dl #) # ## Determining solution with the lowest minimum p-value #lowest_min_pval <- min(ext_sol_df$\"min_pval\") #which(ext_sol_df$\"min_pval\" == lowest_min_pval) #top_row <- ext_sol_df[1, ] # ## Propagate that solution to the observations in the test set ## data list below has both training and testing observations #full_dl <- data_list( #    list(subc_v, \"subc_v\", \"neuroimaging\", \"continuous\"), #    list(income, \"household_income\", \"demographics\", \"continuous\"), #    list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"), #    uid = \"unique_id\" #) # ## Use the solutions data frame from the training observations and the data list ## from the training and testing observations to propagate labels to the test observations #propagated_labels <- label_propagate(top_row, full_dl) # #propagated_labels_all <- label_propagate(ext_sol_df, full_dl) # #head(propagated_labels_all) #tail(propagated_labels_all)"},{"path":"https://branchlab.github.io/metasnf/reference/label_splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a vector of partition indices into meta cluster labels — label_splits","title":"Convert a vector of partition indices into meta cluster labels — label_splits","text":"Convert vector partition indices meta cluster labels","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a vector of partition indices into meta cluster labels — label_splits","text":"","code":"label_splits(split_vector, nrow)"},{"path":"https://branchlab.github.io/metasnf/reference/label_splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a vector of partition indices into meta cluster labels — label_splits","text":"split_vector vector partition indices. nrow number rows data partitioned.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_splits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a vector of partition indices into meta cluster labels — label_splits","text":"character vector expands split_vector nrow-length sequence ascending letters alphabet. split vector c(3, 6) number rows 8, result vector two \"\"s (first index, 3), three \"B\"s (second index, 6), three \"C\"s (including last index, 8).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_adjust.html","id":null,"dir":"Reference","previous_headings":"","what":"Linearly correct data list by features with unwanted signal — linear_adjust","title":"Linearly correct data list by features with unwanted signal — linear_adjust","text":"Given data list correct another data list categorical features linearly adjust , corrects first data list based residuals linear model relating numeric features first data list unwanted signal features second data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_adjust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linearly correct data list by features with unwanted signal — linear_adjust","text":"","code":"linear_adjust(dl, unwanted_signal_list, sig_digs = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/linear_adjust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linearly correct data list by features with unwanted signal — linear_adjust","text":"dl nested list input data data_list(). unwanted_signal_list data list categorical features mean differences removed first data list. sig_digs Number significant digits round residuals .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_adjust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linearly correct data list by features with unwanted signal — linear_adjust","text":"data list (\"list\") data component converted contain residuals linear model built features unwanted_signal_list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_adjust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linearly correct data list by features with unwanted signal — linear_adjust","text":"","code":"has_tutor <- sample(c(1, 0), size = 9, replace = TRUE) math_score <- 70 + 30 * has_tutor + rnorm(9, mean = 0, sd = 5)  math_df <- data.frame(uid = paste0(\"id_\", 1:9), math = math_score) tutor_df <- data.frame(uid = paste0(\"id_\", 1:9), tutor = has_tutor)  dl <- data_list(     list(math_df, \"math_score\", \"school\", \"continuous\"),     uid = \"uid\" )  adjustment_dl <- data_list(     list(tutor_df, \"tutoring\", \"school\", \"categorical\"),     uid = \"uid\" )  adjusted_dl <- linear_adjust(dl, adjustment_dl)  adjusted_dl[[1]]$\"data\"$\"math\" #> [1] -1.85684236  2.95945100  5.12168924 -4.25801238 -4.13358586  6.93626788 #> [7]  0.03797306 -2.12868508 -2.67825550  # Equivalent to: as.numeric(resid(lm(math_score ~ has_tutor))) #> [1] -1.85684236  2.95945100  5.12168924 -4.25801238 -4.13358586  6.93626788 #> [7]  0.03797306 -2.12868508 -2.67825550"},{"path":"https://branchlab.github.io/metasnf/reference/linear_model_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear model p-value (generic) — linear_model_pval","title":"Linear model p-value (generic) — linear_model_pval","text":"Return p-value F-test linear model two features","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_model_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear model p-value (generic) — linear_model_pval","text":"","code":"linear_model_pval(predictor, response)"},{"path":"https://branchlab.github.io/metasnf/reference/linear_model_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear model p-value (generic) — linear_model_pval","text":"predictor categorical numeric feature. response numeric feature.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_model_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear model p-value (generic) — linear_model_pval","text":"pval p-value (class \"numeric\").","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mc_manhattan_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Manhattan plot of feature-meta cluster association p-values — mc_manhattan_plot","title":"Manhattan plot of feature-meta cluster association p-values — mc_manhattan_plot","text":"Given data frame representative meta cluster solutions (see get_representative_solutions(), returns Manhattan plot showing feature separation across features provided data/target lists.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mc_manhattan_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manhattan plot of feature-meta cluster association p-values — mc_manhattan_plot","text":"","code":"mc_manhattan_plot(   ext_sol_df,   dl = NULL,   target_dl = NULL,   variable_order = NULL,   neg_log_pval_thresh = 5,   threshold = NULL,   point_size = 5,   text_size = 20,   plot_title = NULL,   xints = NULL,   hide_x_labels = FALSE,   domain_colours = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/mc_manhattan_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manhattan plot of feature-meta cluster association p-values — mc_manhattan_plot","text":"ext_sol_df sol_df contains \"_pval\" columns containing values plotted. object output extend_solutions(). dl List data frames containing data information. target_dl List data frames containing target information. variable_order Order features displayed plot. neg_log_pval_thresh Threshold negative log p-values. threshold p-value threshold plot horizontal dashed line . point_size Size points plot. text_size Size text plot. plot_title Title plot. xints Either \"outcomes\" vector numeric values plot vertical lines . hide_x_labels TRUE, hides x-axis labels. domain_colours Named vector colours domains.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mc_manhattan_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manhattan plot of feature-meta cluster association p-values — mc_manhattan_plot","text":"Manhattan plot (class \"gg\", \"ggplot\") showing association p-values features solution provided solutions data frame, stratified meta cluster label.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mc_manhattan_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manhattan plot of feature-meta cluster association p-values — mc_manhattan_plot","text":"","code":"# dl <- data_list( #     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"), #     list(income, \"household_income\", \"demographics\", \"continuous\"), #     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"), #     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"), #     list(depress, \"depressed\", \"behaviour\", \"ordinal\"), #     uid = \"unique_id\" # ) #  # sc <- snf_config( #     dl = dl, #     n_solutions = 20, #     min_k = 20, #     max_k = 50 # ) #  # sol_df <- batch_snf(dl, sc) #  # ext_sol_df <- extend_solutions( #     sol_df, #     dl = dl, #     min_pval = 1e-10 # p-values below 1e-10 will be thresholded to 1e-10 # ) #  # # Calculate pairwise similarities between cluster solutions # sol_aris <- calc_aris(sol_df) #  # # Extract hierarchical clustering order of the cluster solutions # meta_cluster_order <- get_matrix_order(sol_aris) #  # # Identify meta cluster boundaries with shiny app or trial and error # # ari_hm <- meta_cluster_heatmap(sol_aris, order = meta_cluster_order) # # shiny_annotator(ari_hm) #  # # Result of meta cluster examination # split_vec <- c(2, 5, 12, 17) #  # ext_sol_df <- label_meta_clusters(ext_sol_df, split_vec, meta_cluster_order) #  # # Extracting representative solutions from each defined meta cluster # rep_solutions <- get_representative_solutions(sol_aris, ext_sol_df) #  # mc_manhattan <- mc_manhattan_plot( #     rep_solutions, #     dl = dl, #     point_size = 3, #     text_size = 12, #     plot_title = \"Feature-Meta Cluster Associations\", #     threshold = 0.05, #     neg_log_pval_thresh = 5 # ) #  # mc_manhattan"},{"path":"https://branchlab.github.io/metasnf/reference/merge.clust_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge clust_fns_list objects — merge.clust_fns_list","title":"Merge clust_fns_list objects — merge.clust_fns_list","text":"Merge clust_fns_list objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.clust_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge clust_fns_list objects — merge.clust_fns_list","text":"","code":"# S3 method for class 'clust_fns_list' merge(x, y, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/merge.clust_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge clust_fns_list objects — merge.clust_fns_list","text":"x first clust_fns_list object merge. y second clust_fns_list object merge. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.clust_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge clust_fns_list objects — merge.clust_fns_list","text":"new clust_fns_list object containing merged clustering functions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge observations between two compatible data lists — merge.data_list","title":"Merge observations between two compatible data lists — merge.data_list","text":"Join two data lists components (data frames) separate observations. instead merge two data lists observations different components, simply use c().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge observations between two compatible data lists — merge.data_list","text":"","code":"# S3 method for class 'data_list' merge(x, y, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/merge.data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge observations between two compatible data lists — merge.data_list","text":"x first data list merge. y second data list merge. ... Additional arguments passed merge function.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge observations between two compatible data lists — merge.data_list","text":"data list (\"list\"-class object) containing observations provided data lists.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.dist_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge dist_fns_list objects — merge.dist_fns_list","title":"Merge dist_fns_list objects — merge.dist_fns_list","text":"Merge dist_fns_list objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.dist_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge dist_fns_list objects — merge.dist_fns_list","text":"","code":"# S3 method for class 'dist_fns_list' merge(x, y, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/merge.dist_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge dist_fns_list objects — merge.dist_fns_list","text":"x first clust_fns_list object merge. y second clust_fns_list object merge. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.dist_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge dist_fns_list objects — merge.dist_fns_list","text":"new clust_fns_list object containing merged clustering functions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge ext_solutions_df objects — merge.ext_solutions_df","title":"Merge ext_solutions_df objects — merge.ext_solutions_df","text":"Merge ext_solutions_df objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge ext_solutions_df objects — merge.ext_solutions_df","text":"","code":"# S3 method for class 'ext_solutions_df' merge(x, y, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/merge.ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge ext_solutions_df objects — merge.ext_solutions_df","text":"x first ext_solutions_df object merge. y second ext_solutions_df object merge. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge ext_solutions_df objects — merge.ext_solutions_df","text":"Error message indicating merge function applicable ext_solutions_df objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.settings_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge settings_df objects — merge.settings_df","title":"Merge settings_df objects — merge.settings_df","text":"Merge settings_df objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.settings_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge settings_df objects — merge.settings_df","text":"","code":"# S3 method for class 'settings_df' merge(x, y, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/merge.settings_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge settings_df objects — merge.settings_df","text":"x first settings_df object merge. y second settings_df object merge. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.settings_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge settings_df objects — merge.settings_df","text":"Error message indicating merge function applicable settings_df objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.sim_mats_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge sim_mats_list objects — merge.sim_mats_list","title":"Merge sim_mats_list objects — merge.sim_mats_list","text":"Merge sim_mats_list objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.sim_mats_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge sim_mats_list objects — merge.sim_mats_list","text":"","code":"# S3 method for class 'sim_mats_list' merge(x, y, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/merge.sim_mats_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge sim_mats_list objects — merge.sim_mats_list","text":"x first sim_mats_list object merge. y second sim_mats_list object merge. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.sim_mats_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge sim_mats_list objects — merge.sim_mats_list","text":"merged sim_mats_list object containing similarity matrices input objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.snf_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge method for SNF config objects — merge.snf_config","title":"Merge method for SNF config objects — merge.snf_config","text":"Merge method SNF config objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.snf_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge method for SNF config objects — merge.snf_config","text":"","code":"# S3 method for class 'snf_config' merge(x, y, reset_indices = TRUE, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/merge.snf_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge method for SNF config objects — merge.snf_config","text":"x SNF config merge. y SNF config merge. reset_indices TRUE (default), re-labels \"solutions\" indices config 1 number defined settings. ... Additional arguments passed merge function.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.snf_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge method for SNF config objects — merge.snf_config","text":"SNF config combining rows prior configurations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge solutions_df objects — merge.solutions_df","title":"Merge solutions_df objects — merge.solutions_df","text":"Merge solutions_df objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge solutions_df objects — merge.solutions_df","text":"","code":"# S3 method for class 'solutions_df' merge(x, y, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/merge.solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge solutions_df objects — merge.solutions_df","text":"x first solutions_df object merge. y second solutions_df object merge. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge solutions_df objects — merge.solutions_df","text":"Error message indicating merge function applicable solutions_df objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.t_ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge t_ext_solutions_df objects — merge.t_ext_solutions_df","title":"Merge t_ext_solutions_df objects — merge.t_ext_solutions_df","text":"Merge t_ext_solutions_df objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.t_ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge t_ext_solutions_df objects — merge.t_ext_solutions_df","text":"","code":"# S3 method for class 't_ext_solutions_df' merge(x, y, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/merge.t_ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge t_ext_solutions_df objects — merge.t_ext_solutions_df","text":"x first t_ext_solutions_df object merge. y second t_ext_solutions_df object merge. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.t_ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge t_ext_solutions_df objects — merge.t_ext_solutions_df","text":"Error message indicating merge function applicable t_ext_solutions_df objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.t_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge t_solutions_df objects — merge.t_solutions_df","title":"Merge t_solutions_df objects — merge.t_solutions_df","text":"Merge t_solutions_df objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.t_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge t_solutions_df objects — merge.t_solutions_df","text":"","code":"# S3 method for class 't_solutions_df' merge(x, y, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/merge.t_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge t_solutions_df objects — merge.t_solutions_df","text":"x first t_solutions_df object merge. y second t_solutions_df object merge. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.t_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge t_solutions_df objects — merge.t_solutions_df","text":"Error message indicating merge function applicable t_solutions_df objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge weights_matrix objects — merge.weights_matrix","title":"Merge weights_matrix objects — merge.weights_matrix","text":"Merge weights_matrix objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge weights_matrix objects — merge.weights_matrix","text":"","code":"# S3 method for class 'weights_matrix' merge(x, y, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/merge.weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge weights_matrix objects — merge.weights_matrix","text":"x first weights_matrix object merge. y second weights_matrix object merge. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge.weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge weights_matrix objects — merge.weights_matrix","text":"Error message indicating merge function applicable weights_matrix objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge list of data frames into a single data frame — merge_df_list","title":"Merge list of data frames into a single data frame — merge_df_list","text":"helper function combines data frames single-level list single data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge list of data frames into a single data frame — merge_df_list","text":"","code":"merge_df_list(df_list, join = \"inner\", uid = \"uid\", no_na = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge list of data frames into a single data frame — merge_df_list","text":"df_list list data frames. join String indicating join \"inner\" \"full\". uid Column name join . Default \"uid\". no_na Whether remove NA values merged data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge list of data frames into a single data frame — merge_df_list","text":"Inner join data frames list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge list of data frames into a single data frame — merge_df_list","text":"","code":"merge_df_list(list(income, pubertal), uid = \"unique_id\") #> # A tibble: 275 × 3 #>    unique_id        household_income pubertal_status #>    <chr>                       <dbl>           <dbl> #>  1 NDAR_INV0567T2Y9                3            1.33 #>  2 NDAR_INV0GLZNC2W               NA            1    #>  3 NDAR_INV0IZ157F8                1            2.33 #>  4 NDAR_INV0J4PYA5F                2            3    #>  5 NDAR_INV0OYE291Q                1          NaN    #>  6 NDAR_INV0SM1JLXQ               NA          NaN    #>  7 NDAR_INV0Z87UJDR                3          NaN    #>  8 NDAR_INV10OMKVLE                1            1    #>  9 NDAR_INV15FPCW4O                2            1    #> 10 NDAR_INV19NB4RJK                1            2    #> # ℹ 265 more rows"},{"path":"https://branchlab.github.io/metasnf/reference/metasnf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"metasnf: Meta Clustering with Similarity Network Fusion — metasnf-package","title":"metasnf: Meta Clustering with Similarity Network Fusion — metasnf-package","text":"Framework facilitate patient subtyping similarity network fusion meta clustering. similarity network fusion (SNF) algorithm introduced Wang et al. (2014) doi:10.1038/nmeth.2810 . SNF data integration approach can transform high-dimensional diverse data types single similarity network suitable clustering minimal loss information initial data source. meta clustering approach introduced Caruana et al. (2006) doi:10.1109/ICDM.2006.103 . Meta clustering involves generating wide range cluster solutions adjusting clustering hyperparameters, clustering solutions manageable number qualitatively similar solutions, finally characterizing representative solutions find ones best user's specific context. package provides framework easily transform multi-modal data wide range similarity network fusion-derived cluster solutions well visualize, characterize, validate solutions. Core package functionality includes easy customization distance metrics, clustering algorithms, SNF hyperparameters generate diverse clustering solutions; calculation plotting associations features, patients, cluster solutions; standard cluster validation approaches including resampled measures cluster stability, standard metrics cluster quality, label propagation evaluate generalizability unseen data. Associated vignettes guide user using package identify patient subtypes adhering best practices unsupervised learning.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/metasnf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"metasnf: Meta Clustering with Similarity Network Fusion — metasnf-package","text":"Maintainer: Prashanth S Velayudhan psvelayu@gmail.com Authors: Xiaoqiao Xu Prajkta Kallurkar Ana Patricia Balbon Maria T Secara Adam Taback Denise Sabac Nicholas Chan Shihao Ma Bo Wang Daniel Felsky Stephanie H Ameis Brian Cox Colin Hawco Lauren Erdman Anne L Wheeler anne.wheeler@sickkids.ca [thesis advisor]","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_alert.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for raising alerts — metasnf_alert","title":"Helper function for raising alerts — metasnf_alert","text":"Helper function raising alerts","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_alert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for raising alerts — metasnf_alert","text":"","code":"metasnf_alert(..., env = 1)"},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_alert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for raising alerts — metasnf_alert","text":"... Arbitrary number strings pasted together alert message. env Environment evaluate expressions .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_alert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for raising alerts — metasnf_alert","text":"Returns value. Raises alert cli::cli_alert_info.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for defunct function errors — metasnf_defunct","title":"Helper function for defunct function errors — metasnf_defunct","text":"Helper function defunct function errors","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for defunct function errors — metasnf_defunct","text":"","code":"metasnf_defunct(version, alternative, env = 1)"},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for defunct function errors — metasnf_defunct","text":"version Version metasnf function made defunct. alternative Recommended alternative approach. env Environment evaluate expressions .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_defunct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for defunct function errors — metasnf_defunct","text":"Returns value. Raises error cli::cli_abort.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for deprecated function warnings — metasnf_deprecated","title":"Helper function for deprecated function warnings — metasnf_deprecated","text":"Helper function deprecated function warnings","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for deprecated function warnings — metasnf_deprecated","text":"","code":"metasnf_deprecated(version, alternative, env = 1)"},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for deprecated function warnings — metasnf_deprecated","text":"version Version metasnf function deprecated. alternative Recommended alternative approach. env Environment evaluate expressions .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for deprecated function warnings — metasnf_deprecated","text":"Returns value. Raises warning cli::cli_warn.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for raising errors — metasnf_error","title":"Helper function for raising errors — metasnf_error","text":"Helper function raising errors","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for raising errors — metasnf_error","text":"","code":"metasnf_error(..., env = 1)"},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for raising errors — metasnf_error","text":"... Arbitrary number strings pasted together error message. env","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for raising errors — metasnf_error","text":"Returns value. Raises error cli::cli_abort.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_warning.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for raising warnings — metasnf_warning","title":"Helper function for raising warnings — metasnf_warning","text":"Helper function raising warnings","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_warning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for raising warnings — metasnf_warning","text":"","code":"metasnf_warning(..., env = 1)"},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_warning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for raising warnings — metasnf_warning","text":"... Arbitrary number strings pasted together warning message. env Environment evaluate expressions .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/metasnf_warning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for raising warnings — metasnf_warning","text":"Returns value. Raises warning cli::cli_warn","code":""},{"path":"https://branchlab.github.io/metasnf/reference/methylation_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Modification of SNFtool mock data frame ","title":"Modification of SNFtool mock data frame ","text":"Modification SNFtool mock data frame \"Data2\"","code":""},{"path":"https://branchlab.github.io/metasnf/reference/methylation_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modification of SNFtool mock data frame ","text":"","code":"methylation_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/methylation_df.html","id":"methylation-df","dir":"Reference","previous_headings":"","what":"methylation_df","title":"Modification of SNFtool mock data frame ","text":"data frame 200 rows 3 columns: gene_1_expression Mock gene methylation feature gene_2_expression Mock gene methylation feature patient_id Random three-digit number uniquely identifying patient","code":""},{"path":"https://branchlab.github.io/metasnf/reference/methylation_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Modification of SNFtool mock data frame ","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_ari_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of an ari_matrix metasnf object — mock_ari_matrix","title":"Mock example of an ari_matrix metasnf object — mock_ari_matrix","text":"ari_matrix class object containing adjusted Rand indices (ARIs) 20 cluster solutions. Used example ari_matrix metasnf object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_ari_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of an ari_matrix metasnf object — mock_ari_matrix","text":"","code":"mock_ari_matrix"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_ari_matrix.html","id":"mock-ari-matrix","dir":"Reference","previous_headings":"","what":"mock_ari_matrix","title":"Mock example of an ari_matrix metasnf object — mock_ari_matrix","text":"20 20 ARI matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_ari_matrix.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of an ari_matrix metasnf object — mock_ari_matrix","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_clust_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of a clust_fns_list metasnf object — mock_clust_fns_list","title":"Mock example of a clust_fns_list metasnf object — mock_clust_fns_list","text":"Mock example clust_fns_list metasnf object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_clust_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of a clust_fns_list metasnf object — mock_clust_fns_list","text":"","code":"mock_clust_fns_list"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_clust_fns_list.html","id":"mock-clust-fns-list","dir":"Reference","previous_headings":"","what":"mock_clust_fns_list","title":"Mock example of a clust_fns_list metasnf object — mock_clust_fns_list","text":"clust_fns_list object containing two clustering functions covering 2 5 five cluster solution versions spectral clustering. Extracted mock_snf_config.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_clust_fns_list.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of a clust_fns_list metasnf object — mock_clust_fns_list","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of a data_list metasnf object — mock_data_list","title":"Mock example of a data_list metasnf object — mock_data_list","text":"Mock example data_list metasnf object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of a data_list metasnf object — mock_data_list","text":"","code":"mock_data_list"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_data_list.html","id":"mock-data-list","dir":"Reference","previous_headings":"","what":"mock_data_list","title":"Mock example of a data_list metasnf object — mock_data_list","text":"data list containing 4 data frames 100 observations : - subcortical volume (30 features) - cortical surface area (151 features) - household income (1 feature) - pubertal status (1 feature) Used example data_list metasnf object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_data_list.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of a data_list metasnf object — mock_data_list","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_dist_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of a dist_fns_list metasnf object — mock_dist_fns_list","title":"Mock example of a dist_fns_list metasnf object — mock_dist_fns_list","text":"Mock example dist_fns_list metasnf object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_dist_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of a dist_fns_list metasnf object — mock_dist_fns_list","text":"","code":"mock_dist_fns_list"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_dist_fns_list.html","id":"mock-dist-fns-list","dir":"Reference","previous_headings":"","what":"mock_dist_fns_list","title":"Mock example of a dist_fns_list metasnf object — mock_dist_fns_list","text":"dist_fns_list object containing variety distance metrics. Extracted mock_snf_config.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_dist_fns_list.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of a dist_fns_list metasnf object — mock_dist_fns_list","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of a ext_solutions_df metasnf object — mock_ext_solutions_df","title":"Mock example of a ext_solutions_df metasnf object — mock_ext_solutions_df","text":"ext_solutions_df class object generated extending mock_rep_solutions_df object mock_data_list target data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of a ext_solutions_df metasnf object — mock_ext_solutions_df","text":"","code":"mock_ext_solutions_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_ext_solutions_df.html","id":"mock-ext-solutions-df","dir":"Reference","previous_headings":"","what":"mock_ext_solutions_df","title":"Mock example of a ext_solutions_df metasnf object — mock_ext_solutions_df","text":"Contains 20 cluster solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_ext_solutions_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of a ext_solutions_df metasnf object — mock_ext_solutions_df","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_mc_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of a mc_solutions_df metasnf object — mock_mc_solutions_df","title":"Mock example of a mc_solutions_df metasnf object — mock_mc_solutions_df","text":"Mock example mc_solutions_df metasnf object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_mc_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of a mc_solutions_df metasnf object — mock_mc_solutions_df","text":"","code":"mock_mc_solutions_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_mc_solutions_df.html","id":"mock-mc-solutions-df","dir":"Reference","previous_headings":"","what":"mock_mc_solutions_df","title":"Mock example of a mc_solutions_df metasnf object — mock_mc_solutions_df","text":"meta cluster labeled solutions data frame derived mock_solutions_df. Contains 20 cluster solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_mc_solutions_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of a mc_solutions_df metasnf object — mock_mc_solutions_df","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_rep_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of a rep_solutions_df metasnf object — mock_rep_solutions_df","title":"Mock example of a rep_solutions_df metasnf object — mock_rep_solutions_df","text":"solutions_df class object derived filtering mock_mc_solutions_df representative solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_rep_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of a rep_solutions_df metasnf object — mock_rep_solutions_df","text":"","code":"mock_rep_solutions_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_rep_solutions_df.html","id":"mock-rep-solutions-df","dir":"Reference","previous_headings":"","what":"mock_rep_solutions_df","title":"Mock example of a rep_solutions_df metasnf object — mock_rep_solutions_df","text":"Contains 4 cluster solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_rep_solutions_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of a rep_solutions_df metasnf object — mock_rep_solutions_df","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_settings_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of a settings_df metasnf object — mock_settings_df","title":"Mock example of a settings_df metasnf object — mock_settings_df","text":"Mock example settings_df metasnf object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_settings_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of a settings_df metasnf object — mock_settings_df","text":"","code":"mock_settings_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_settings_df.html","id":"mock-settings-df","dir":"Reference","previous_headings":"","what":"mock_settings_df","title":"Mock example of a settings_df metasnf object — mock_settings_df","text":"Settings 20 cluster solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_settings_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of a settings_df metasnf object — mock_settings_df","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_sim_mats_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of an sim_mats_list metasnf object — mock_sim_mats_list","title":"Mock example of an sim_mats_list metasnf object — mock_sim_mats_list","text":"Used example sim_mats_list metasnf object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_sim_mats_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of an sim_mats_list metasnf object — mock_sim_mats_list","text":"","code":"mock_sim_mats_list"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_sim_mats_list.html","id":"mock-sim-mats-list","dir":"Reference","previous_headings":"","what":"mock_sim_mats_list","title":"Mock example of an sim_mats_list metasnf object — mock_sim_mats_list","text":"sim_mats_list class object containing pairwise similarities 100 observations across 20 cluster solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_sim_mats_list.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of an sim_mats_list metasnf object — mock_sim_mats_list","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_snf_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of a snf_config metasnf object — mock_snf_config","title":"Mock example of a snf_config metasnf object — mock_snf_config","text":"Mock example snf_config metasnf object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_snf_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of a snf_config metasnf object — mock_snf_config","text":"","code":"mock_snf_config"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_snf_config.html","id":"mock-snf-config","dir":"Reference","previous_headings":"","what":"mock_snf_config","title":"Mock example of a snf_config metasnf object — mock_snf_config","text":"SNF config containing hyperparameters functions defined generating 20 cluster solutions data list. config specified : - limit k hyperparameter 40 - make use uniformly distributed random weights - randomly select using spectral clustering number clusters can 2, 5, decided eigen-gap heuristic, decided rotation cost heuristic - use Gower distance categorical mixed data, Euclidean distance ordinal data, randomly select Euclidean distance standard/normalized Euclidean distance continuous discrete data config built using mock_data_list loaded namespace calling library(\"metasnf\"). Used example snf_config metasnf object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_snf_config.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of a snf_config metasnf object — mock_snf_config","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of a solutions_df metasnf object — mock_solutions_df","title":"Mock example of a solutions_df metasnf object — mock_solutions_df","text":"Mock example solutions_df metasnf object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of a solutions_df metasnf object — mock_solutions_df","text":"","code":"mock_solutions_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_solutions_df.html","id":"mock-solutions-df","dir":"Reference","previous_headings":"","what":"mock_solutions_df","title":"Mock example of a solutions_df metasnf object — mock_solutions_df","text":"solutions data frame containing 20 cluster solutions generated mock_snf_config mock_data_list. Used example solutions_df metasnf object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_solutions_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of a solutions_df metasnf object — mock_solutions_df","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_t_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of a t_solutions_df metasnf object — mock_t_solutions_df","title":"Mock example of a t_solutions_df metasnf object — mock_t_solutions_df","text":"Mock example t_solutions_df metasnf object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_t_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of a t_solutions_df metasnf object — mock_t_solutions_df","text":"","code":"mock_t_solutions_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_t_solutions_df.html","id":"mock-t-solutions-df","dir":"Reference","previous_headings":"","what":"mock_t_solutions_df","title":"Mock example of a t_solutions_df metasnf object — mock_t_solutions_df","text":"transposed solutions data frame containing 20 cluster solutions generated mock_solutions_df. Used example t_solutions_df metasnf object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_t_solutions_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of a t_solutions_df metasnf object — mock_t_solutions_df","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock example of a weights_matrix metasnf object — mock_weights_matrix","title":"Mock example of a weights_matrix metasnf object — mock_weights_matrix","text":"Mock example weights_matrix metasnf object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock example of a weights_matrix metasnf object — mock_weights_matrix","text":"","code":"mock_weights_matrix"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/mock_weights_matrix.html","id":"mock-weights-matrix","dir":"Reference","previous_headings":"","what":"mock_weights_matrix","title":"Mock example of a weights_matrix metasnf object — mock_weights_matrix","text":"weights_matrix class object containing 20 sets weights 183 features.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mock_weights_matrix.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock example of a weights_matrix metasnf object — mock_weights_matrix","text":"data comes metasnf package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/n_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of features stored in an object — n_features","title":"Extract number of features stored in an object — n_features","text":"Extract number features stored object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/n_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of features stored in an object — n_features","text":"","code":"n_features(x)"},{"path":"https://branchlab.github.io/metasnf/reference/n_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of features stored in an object — n_features","text":"x object extract number features .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/n_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract number of features stored in an object — n_features","text":"number features x.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/n_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of observations stored in an object — n_observations","title":"Extract number of observations stored in an object — n_observations","text":"Extract number observations stored object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/n_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of observations stored in an object — n_observations","text":"","code":"n_observations(x)"},{"path":"https://branchlab.github.io/metasnf/reference/n_observations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of observations stored in an object — n_observations","text":"x object extract number observations .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/n_observations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract number of observations stored in an object — n_observations","text":"number observations x.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_ari_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for ari_matrix class object — new_ari_matrix","title":"Constructor for ari_matrix class object — new_ari_matrix","text":"Constructor ari_matrix class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_ari_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for ari_matrix class object — new_ari_matrix","text":"","code":"new_ari_matrix(aml, dist_method, hclust_method)"},{"path":"https://branchlab.github.io/metasnf/reference/new_ari_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for ari_matrix class object — new_ari_matrix","text":"aml ari_matrix-like matrix object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_ari_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for ari_matrix class object — new_ari_matrix","text":"ari_matrix object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_clust_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for clust_fns_list class object — new_clust_fns_list","title":"Constructor for clust_fns_list class object — new_clust_fns_list","text":"Constructor clust_fns_list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_clust_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for clust_fns_list class object — new_clust_fns_list","text":"","code":"new_clust_fns_list(cfll)"},{"path":"https://branchlab.github.io/metasnf/reference/new_clust_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for clust_fns_list class object — new_clust_fns_list","text":"cfll clust_fns_list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_clust_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for clust_fns_list class object — new_clust_fns_list","text":"clust_fns_list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for data_list class object — new_data_list","title":"Constructor for data_list class object — new_data_list","text":"Constructor data_list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for data_list class object — new_data_list","text":"","code":"new_data_list(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/new_data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for data_list class object — new_data_list","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for data_list class object — new_data_list","text":"data_list object, nested list class data_list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_dist_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for dist_fns_list class object — new_dist_fns_list","title":"Constructor for dist_fns_list class object — new_dist_fns_list","text":"Constructor dist_fns_list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_dist_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for dist_fns_list class object — new_dist_fns_list","text":"","code":"new_dist_fns_list(dfll)"},{"path":"https://branchlab.github.io/metasnf/reference/new_dist_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for dist_fns_list class object — new_dist_fns_list","text":"dfll distance metrics list-like list object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_dist_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for dist_fns_list class object — new_dist_fns_list","text":"dist_fns_list object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for ext_solutions_df class object — new_ext_solutions_df","title":"Constructor for ext_solutions_df class object — new_ext_solutions_df","text":"Constructor ext_solutions_df class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for ext_solutions_df class object — new_ext_solutions_df","text":"","code":"new_ext_solutions_df(ext_sol_dfl)"},{"path":"https://branchlab.github.io/metasnf/reference/new_ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for ext_solutions_df class object — new_ext_solutions_df","text":"ext_sol_dfl extended solutions data frame-like object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for ext_solutions_df class object — new_ext_solutions_df","text":"ext_solutions_df object, data frame class ext_solutions_df.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_settings_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for settings_df class object — new_settings_df","title":"Constructor for settings_df class object — new_settings_df","text":"Constructor settings_df class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_settings_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for settings_df class object — new_settings_df","text":"","code":"new_settings_df(sdfl)"},{"path":"https://branchlab.github.io/metasnf/reference/new_settings_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for settings_df class object — new_settings_df","text":"sdfl settings data frame-like matrix object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_settings_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for settings_df class object — new_settings_df","text":"settings_df object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_sim_mats_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for similarity_matrix_list class object — new_sim_mats_list","title":"Constructor for similarity_matrix_list class object — new_sim_mats_list","text":"Constructor similarity_matrix_list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_sim_mats_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for similarity_matrix_list class object — new_sim_mats_list","text":"","code":"new_sim_mats_list(smll)"},{"path":"https://branchlab.github.io/metasnf/reference/new_sim_mats_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for similarity_matrix_list class object — new_sim_mats_list","text":"smll similarity matrix list-like object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_sim_mats_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for similarity_matrix_list class object — new_sim_mats_list","text":"similarity_matrix_list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_snf_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for snf_config class object — new_snf_config","title":"Constructor for snf_config class object — new_snf_config","text":"Constructor snf_config class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_snf_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for snf_config class object — new_snf_config","text":"","code":"new_snf_config(scl)"},{"path":"https://branchlab.github.io/metasnf/reference/new_snf_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for snf_config class object — new_snf_config","text":"scl SNF config-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_snf_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for snf_config class object — new_snf_config","text":"snf_config object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for solutions_df class object — new_solutions_df","title":"Constructor for solutions_df class object — new_solutions_df","text":"Constructor solutions_df class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for solutions_df class object — new_solutions_df","text":"","code":"new_solutions_df(sol_dfl)"},{"path":"https://branchlab.github.io/metasnf/reference/new_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for solutions_df class object — new_solutions_df","text":"sol_dfl solutions data frame-like object validated converted solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for solutions_df class object — new_solutions_df","text":"solutions_df class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for weights_matrix class object — new_weights_matrix","title":"Constructor for weights_matrix class object — new_weights_matrix","text":"Constructor weights_matrix class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for weights_matrix class object — new_weights_matrix","text":"","code":"new_weights_matrix(wml)"},{"path":"https://branchlab.github.io/metasnf/reference/new_weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for weights_matrix class object — new_weights_matrix","text":"wml weights_matrix-like matrix object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/new_weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for weights_matrix class object — new_weights_matrix","text":"weights_matrix object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/not_shown_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for creating what hidden ft/obs/sols message — not_shown_message","title":"Helper function for creating what hidden ft/obs/sols message — not_shown_message","text":"Helper function creating hidden ft/obs/sols message","code":""},{"path":"https://branchlab.github.io/metasnf/reference/not_shown_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for creating what hidden ft/obs/sols message — not_shown_message","text":"","code":"not_shown_message(   hidden_solutions = NULL,   hidden_observations = NULL,   hidden_features = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/not_shown_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for creating what hidden ft/obs/sols message — not_shown_message","text":"hidden_solutions Number hidden solutions. hidden_observations Number hidden observations. hidden_features Number hidden features.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/not_shown_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for creating what hidden ft/obs/sols message — not_shown_message","text":"arguments NULL 0, returns NULL. Otherwise, output neatly formatted string indicating many observations, features, /observations shown.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert columns of a data frame to numeric type (if possible) — numcol_to_numeric","title":"Convert columns of a data frame to numeric type (if possible) — numcol_to_numeric","text":"Converts columns data frame can converted numeric type numeric type.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert columns of a data frame to numeric type (if possible) — numcol_to_numeric","text":"","code":"numcol_to_numeric(df)"},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert columns of a data frame to numeric type (if possible) — numcol_to_numeric","text":"df data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert columns of a data frame to numeric type (if possible) — numcol_to_numeric","text":"data frame coercible columns converted type numeric.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordinal regression p-value — ord_reg_pval","title":"Ordinal regression p-value — ord_reg_pval","text":"Returns overall p-value ordinal regression categorical predictor response vectors.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordinal regression p-value — ord_reg_pval","text":"","code":"ord_reg_pval(predictor, response)"},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordinal regression p-value — ord_reg_pval","text":"predictor categorical numeric feature. response numeric feature.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordinal regression p-value — ord_reg_pval","text":"pval p-value (class \"numeric\").","code":""},{"path":"https://branchlab.github.io/metasnf/reference/parallel_batch_snf.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel processing form of batch_snf — parallel_batch_snf","title":"Parallel processing form of batch_snf — parallel_batch_snf","text":"Parallel processing form batch_snf","code":""},{"path":"https://branchlab.github.io/metasnf/reference/parallel_batch_snf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel processing form of batch_snf — parallel_batch_snf","text":"","code":"parallel_batch_snf(   dl,   dfl,   cfl,   sdf,   wm,   similarity_matrix_dir,   return_sim_mats,   processes )"},{"path":"https://branchlab.github.io/metasnf/reference/parallel_batch_snf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel processing form of batch_snf — parallel_batch_snf","text":"dl data list. dfl optional nested list containing distance metric function used various feature types (continuous, discrete, ordinal, categorical, mixed). See ?dist_fns_list details build . cfl List custom clustering algorithms apply final fused network. See ?clust_fns_list. sdf matrix indicating parameters iterate SNF . wm matrix containing feature weights use distance matrix calculation. See ?weights_matrix details build . similarity_matrix_dir specified, directory used save generated similarity matrices. return_sim_mats TRUE, function return list first element solutions data frame second element list similarity matrices row sol_df. Default FALSE. processes Number parallel processes used executing SNF.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/parallel_batch_snf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel processing form of batch_snf — parallel_batch_snf","text":"values ?batch_snf().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pick_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to pick columns from a data frame — pick_cols","title":"Helper function to pick columns from a data frame — pick_cols","text":"Helper function pick columns data frame","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pick_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to pick columns from a data frame — pick_cols","text":"","code":"pick_cols(x, cols)"},{"path":"https://branchlab.github.io/metasnf/reference/pick_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to pick columns from a data frame — pick_cols","text":"x data frame cols Vector column names picked","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pick_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to pick columns from a data frame — pick_cols","text":"x columns cols","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pl.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to pluralize a string — pl","title":"Helper function to pluralize a string — pl","text":"Helper function pluralize string","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to pluralize a string — pl","text":"","code":"pl(x)"},{"path":"https://branchlab.github.io/metasnf/reference/pl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to pluralize a string — pl","text":"x vector length 1 greater.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to pluralize a string — pl","text":"string \"s\" length x greater 1, otherwise empty string.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.ari_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of pairwise adjusted rand indices between solutions — plot.ari_matrix","title":"Heatmap of pairwise adjusted rand indices between solutions — plot.ari_matrix","text":"Heatmap pairwise adjusted rand indices solutions","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.ari_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of pairwise adjusted rand indices between solutions — plot.ari_matrix","text":"","code":"# S3 method for class 'ari_matrix' plot(   x,   order = NULL,   cluster_rows = FALSE,   cluster_columns = FALSE,   log_graph = FALSE,   scale_diag = \"none\",   min_colour = \"#282828\",   max_colour = \"firebrick2\",   col = circlize::colorRamp2(c(min(x), max(x)), c(min_colour, max_colour)),   ... )  meta_cluster_heatmap(   x,   order = NULL,   cluster_rows = FALSE,   cluster_columns = FALSE,   log_graph = FALSE,   scale_diag = \"none\",   min_colour = \"#282828\",   max_colour = \"firebrick2\",   col = circlize::colorRamp2(c(min(x), max(x)), c(min_colour, max_colour)),   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/plot.ari_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of pairwise adjusted rand indices between solutions — plot.ari_matrix","text":"x Matrix adjusted rand indices calc_aris() order Numeric vector containing row order heatmap. cluster_rows Whether rows clustered. cluster_columns Whether columns clustered. log_graph TRUE, log transforms graph. scale_diag Method rescaling matrix diagonals. Can \"none\" (change diagonals), \"mean\" (replace diagonals average value -diagonals), \"zero\" (replace diagonals 0). min_colour Colour used lowest value heatmap. max_colour Colour used highest value heatmap. col Colour ramp use heatmap. ... Additional parameters passed similarity_matrix_heatmap(), function function wraps.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.ari_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of pairwise adjusted rand indices between solutions — plot.ari_matrix","text":"Returns heatmap (class \"Heatmap\" package ComplexHeatmap) displays pairwise adjusted Rand indices (similarities) cluster solutions provided solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.ari_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap of pairwise adjusted rand indices between solutions — plot.ari_matrix","text":"","code":"#dl <- data_list( #    list(cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"), #    list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"), #    list(income, \"household_income\", \"demographics\", \"continuous\"), #    list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"), #    uid = \"unique_id\" #) # #set.seed(42) #my_sc <- snf_config( #    dl = dl, #    n_solutions = 20, #    min_k = 20, #    max_k = 50 #) # #sol_df <- batch_snf(dl, my_sc) # #sol_df # #sol_aris <- calc_aris(sol_df) # #meta_cluster_order <- get_matrix_order(sol_aris) # ## `split_vec` found by iteratively plotting ari_hm or by ?shiny_annotator() #split_vec <- c(6, 10, 16) #ari_hm <- plot( #    sol_aris, #    order = meta_cluster_order, #    split_vector = split_vec #)"},{"path":"https://branchlab.github.io/metasnf/reference/plot.data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of feature values in a data list — plot.data_list","title":"Plot of feature values in a data list — plot.data_list","text":"plot, built ComplexHeatmap::Heatmap(), visualizes feature values data list continuous heatmap observations along columns features along rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of feature values in a data list — plot.data_list","text":"","code":"# S3 method for class 'data_list' plot(   x,   y = NULL,   cluster_rows = TRUE,   cluster_columns = TRUE,   heatmap_legend_param = NULL,   row_title = \"Observation\",   column_title = \"Feature\",   show_row_names = FALSE,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/plot.data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of feature values in a data list — plot.data_list","text":"x data_list object. y Optional argument plot, used method. cluster_rows Logical indicating whether cluster rows (observations). cluster_columns Logical indicating whether cluster columns (features). heatmap_legend_param list parameters heatmap legend. row_title Title rows (observations). column_title Title columns (features). show_row_names Logical indicating whether show row names. ... Additional arguments passed ComplexHeatmap::Heatmap().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of feature values in a data list — plot.data_list","text":"heatmap visualization feature values.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of cluster assignments in an extended solutions data frame — plot.ext_solutions_df","title":"Plot of cluster assignments in an extended solutions data frame — plot.ext_solutions_df","text":"plot, built ComplexHeatmap::Heatmap(), visualizes cluster assignments solutions data frame categorical heatmap observations along columns clusters along rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of cluster assignments in an extended solutions data frame — plot.ext_solutions_df","text":"","code":"# S3 method for class 'ext_solutions_df' plot(   x,   y = NULL,   cluster_rows = TRUE,   cluster_columns = TRUE,   show_row_names = TRUE,   show_column_names = TRUE,   heatmap_legend_param = NULL,   row_title = \"Solution\",   column_title = \"Observation\",   ... )  # S3 method for class 't_ext_solutions_df' plot(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/plot.ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of cluster assignments in an extended solutions data frame — plot.ext_solutions_df","text":"x ext_solutions_df object. y Optional argument plot, used method. cluster_rows value logical, controls whether make cluster rows. value can also hclust dendrogram already contains clustering. Check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#clustering . cluster_columns Whether make cluster columns? settings cluster_rows. show_row_names Whether show row names. show_column_names Whether show column names. heatmap_legend_param list contains parameters heatmap legends. See color_mapping_legend,ColorMapping-method available parameters. row_title Title row. column_title Title column. ... Additional arguments passed ComplexHeatmap::Heatmap().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of cluster assignments in an extended solutions data frame — plot.ext_solutions_df","text":"ComplexHeatmap::Heatmap() object visualization cluster assignments.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.snf_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap for visualizing an SNF config — plot.snf_config","title":"Heatmap for visualizing an SNF config — plot.snf_config","text":"Create heatmap row corresponds different set hyperparameters SNF config object. Numeric parameters scaled normalized non-numeric parameters added heatmap annotations. Rows can reordered match prior meta clustering results.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.snf_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap for visualizing an SNF config — plot.snf_config","text":"","code":"# S3 method for class 'snf_config' plot(   x,   order = NULL,   hide_fixed = FALSE,   show_column_names = TRUE,   show_row_names = TRUE,   rect_gp = grid::gpar(col = \"black\"),   colour_breaks = c(0, 1),   colours = c(\"black\", \"darkseagreen\"),   column_split_vector = NULL,   row_split_vector = NULL,   column_split = NULL,   row_split = NULL,   column_title = NULL,   include_weights = TRUE,   include_settings = TRUE,   ... )  config_heatmap(   x,   order = NULL,   hide_fixed = FALSE,   show_column_names = TRUE,   show_row_names = TRUE,   rect_gp = grid::gpar(col = \"black\"),   colour_breaks = c(0, 1),   colours = c(\"black\", \"darkseagreen\"),   column_split_vector = NULL,   row_split_vector = NULL,   column_split = NULL,   row_split = NULL,   column_title = NULL,   include_weights = TRUE,   include_settings = TRUE,   ... )  # S3 method for class 'settings_df' plot(   x,   order = NULL,   hide_fixed = FALSE,   show_column_names = TRUE,   show_row_names = TRUE,   rect_gp = grid::gpar(col = \"black\"),   colour_breaks = c(0, 1),   colours = c(\"black\", \"darkseagreen\"),   column_split_vector = NULL,   row_split_vector = NULL,   column_split = NULL,   row_split = NULL,   column_title = NULL,   include_weights = TRUE,   include_settings = TRUE,   ... )  # S3 method for class 'weights_matrix' plot(   x,   order = NULL,   hide_fixed = FALSE,   show_column_names = TRUE,   show_row_names = TRUE,   rect_gp = grid::gpar(col = \"black\"),   colour_breaks = c(0, 1),   colours = c(\"black\", \"darkseagreen\"),   column_split_vector = NULL,   row_split_vector = NULL,   column_split = NULL,   row_split = NULL,   column_title = NULL,   include_weights = TRUE,   include_settings = TRUE,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/plot.snf_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap for visualizing an SNF config — plot.snf_config","text":"x snf_config class object. order Numeric vector indicating row ordering SNF config. hide_fixed Whether fixed parameters removed. show_column_names Whether show column names. show_row_names Whether show row names. rect_gp Graphic parameters drawing rectangles (heatmap body). value specified gpar fill parameter ignored. colour_breaks Numeric vector breaks legend. colours Vector colours use heatmap. match length colour_breaks. column_split_vector Vector indices split columns . row_split_vector Vector indices split rows . column_split Split columns. heatmap splitting, please refer https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#heatmap-split . row_split split. column_title Title column. include_weights TRUE, includes feature weights weights matrix config heatmap. include_settings TRUE, includes columns settings data frame config heatmap. ... Additional parameters passed ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.snf_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap for visualizing an SNF config — plot.snf_config","text":"Returns heatmap (class \"Heatmap\" package ComplexHeatmap) displays scaled values provided SNF config.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.snf_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap for visualizing an SNF config — plot.snf_config","text":"","code":"dl <- data_list(     list(income, \"household_income\", \"demographics\", \"ordinal\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(fav_colour, \"favourite_colour\", \"demographics\", \"categorical\"),     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" ) #> ℹ 139 observations dropped due to incomplete data.  sc <- snf_config(     dl,     n_solutions = 10,     dropout_dist = \"uniform\" ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  plot(sc)"},{"path":"https://branchlab.github.io/metasnf/reference/plot.solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of cluster assignments in a solutions data frame — plot.solutions_df","title":"Plot of cluster assignments in a solutions data frame — plot.solutions_df","text":"plot, built ComplexHeatmap::Heatmap(), visualizes cluster assignments solutions data frame categorical heatmap observations along columns clusters along rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of cluster assignments in a solutions data frame — plot.solutions_df","text":"","code":"# S3 method for class 'solutions_df' plot(   x,   y = NULL,   cluster_rows = FALSE,   cluster_columns = TRUE,   heatmap_legend_param = NULL,   row_title = \"Solution\",   column_title = \"Observation\",   ... )  # S3 method for class 't_solutions_df' plot(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/plot.solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of cluster assignments in a solutions data frame — plot.solutions_df","text":"x solutions_df object. y Optional argument plot, used method. cluster_rows value logical, controls whether make cluster rows. value can also hclust dendrogram already contains clustering. Check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#clustering . cluster_columns Whether make cluster columns? settings cluster_rows. heatmap_legend_param list contains parameters heatmap legends. See color_mapping_legend,ColorMapping-method available parameters. row_title Title row. column_title Title column. ... Additional arguments passed ComplexHeatmap::Heatmap().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot.solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of cluster assignments in a solutions data frame — plot.solutions_df","text":"ComplexHeatmap::Heatmap() object visualization cluster assignments.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dll_uid.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ","title":"Add ","text":"Add \"uid_\" prefix UID values uid column","code":""},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dll_uid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ","text":"","code":"prefix_dll_uid(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dll_uid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dll_uid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add ","text":"data list UIDs prefixed string \"uid_\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.ari_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class ari_matrix — print.ari_matrix","title":"Print method for class ari_matrix — print.ari_matrix","text":"Custom formatted print weights matrices outputs information feature weights functions console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.ari_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class ari_matrix — print.ari_matrix","text":"","code":"# S3 method for class 'ari_matrix' print(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/print.ari_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class ari_matrix — print.ari_matrix","text":"x ari_matrix class object. ... arguments passed print (used function)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.ari_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class ari_matrix — print.ari_matrix","text":"Function prints console return value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.clust_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class clust_fns_list — print.clust_fns_list","title":"Print method for class clust_fns_list — print.clust_fns_list","text":"Custom formatted print clustering functions list objects outputs information contained clustering functions console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.clust_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class clust_fns_list — print.clust_fns_list","text":"","code":"# S3 method for class 'clust_fns_list' print(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/print.clust_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class clust_fns_list — print.clust_fns_list","text":"x clust_fns_list class object. ... arguments passed print (used function)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.clust_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class clust_fns_list — print.clust_fns_list","text":"Function prints console return value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class data_list — print.data_list","title":"Print method for class data_list — print.data_list","text":"Custom formatted print data list objects outputs information contained observations components console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class data_list — print.data_list","text":"","code":"# S3 method for class 'data_list' print(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/print.data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class data_list — print.data_list","text":"x data_list class object. ... arguments passed print (used function)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class data_list — print.data_list","text":"Function prints console return value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.dist_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class dist_fns_list — print.dist_fns_list","title":"Print method for class dist_fns_list — print.dist_fns_list","text":"Custom formatted print distance metrics list objects outputs information contained distance metrics console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.dist_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class dist_fns_list — print.dist_fns_list","text":"","code":"# S3 method for class 'dist_fns_list' print(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/print.dist_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class dist_fns_list — print.dist_fns_list","text":"x dist_fns_list class object. ... arguments passed print (used function)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.dist_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class dist_fns_list — print.dist_fns_list","text":"Function prints console return value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class ext_solutions_df — print.ext_solutions_df","title":"Print method for class ext_solutions_df — print.ext_solutions_df","text":"Custom formatted print extended solutions data frame class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class ext_solutions_df — print.ext_solutions_df","text":"","code":"# S3 method for class 'ext_solutions_df' print(x, n = NULL, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/print.ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class ext_solutions_df — print.ext_solutions_df","text":"x ext_solutions_df class object. n Number rows print, passed tibble::print.tbl_df(). ... arguments passed print (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class ext_solutions_df — print.ext_solutions_df","text":"Function prints console return value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.settings_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class settings_df — print.settings_df","title":"Print method for class settings_df — print.settings_df","text":"Custom formatted print settings data frame outputs information SNF hyperparameters console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.settings_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class settings_df — print.settings_df","text":"","code":"# S3 method for class 'settings_df' print(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/print.settings_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class settings_df — print.settings_df","text":"x settings_df class object. ... arguments passed print (used function)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.settings_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class settings_df — print.settings_df","text":"Function prints console return value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.sim_mats_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class sim_mats_list — print.sim_mats_list","title":"Print method for class sim_mats_list — print.sim_mats_list","text":"Custom formatted print similarity matrix list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.sim_mats_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class sim_mats_list — print.sim_mats_list","text":"","code":"# S3 method for class 'sim_mats_list' print(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/print.sim_mats_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class sim_mats_list — print.sim_mats_list","text":"x sim_mats_list class object. ... arguments passed print (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.snf_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class snf_config — print.snf_config","title":"Print method for class snf_config — print.snf_config","text":"Custom formatted print SNF config","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.snf_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class snf_config — print.snf_config","text":"","code":"# S3 method for class 'snf_config' print(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/print.snf_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class snf_config — print.snf_config","text":"x snf_config class object. ... arguments passed print (used function)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.snf_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class snf_config — print.snf_config","text":"Function prints console return value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class solutions_df — print.solutions_df","title":"Print method for class solutions_df — print.solutions_df","text":"Custom formatted print weights matrices outputs information feature weights functions console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class solutions_df — print.solutions_df","text":"","code":"# S3 method for class 'solutions_df' print(x, n = NULL, tips = TRUE, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/print.solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class solutions_df — print.solutions_df","text":"x weights_matrix class object. n Number rows print, passed tibble::print.tbl_df(). tips TRUE, include lines print rows / transposed. ... arguments passed print (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class solutions_df — print.solutions_df","text":"Function prints console return value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.t_ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class t_ext_solutions_df — print.t_ext_solutions_df","title":"Print method for class t_ext_solutions_df — print.t_ext_solutions_df","text":"Custom formatted print transposed solutions data frame class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.t_ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class t_ext_solutions_df — print.t_ext_solutions_df","text":"","code":"# S3 method for class 't_ext_solutions_df' print(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/print.t_ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class t_ext_solutions_df — print.t_ext_solutions_df","text":"x t_solutions_df class object. ... arguments passed print (used function)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.t_ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class t_ext_solutions_df — print.t_ext_solutions_df","text":"Function prints console return value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.t_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class t_solutions_df — print.t_solutions_df","title":"Print method for class t_solutions_df — print.t_solutions_df","text":"Custom formatted print transposed solutions data frame class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.t_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class t_solutions_df — print.t_solutions_df","text":"","code":"# S3 method for class 't_solutions_df' print(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/print.t_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class t_solutions_df — print.t_solutions_df","text":"x t_solutions_df class object. ... arguments passed print (used function)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.t_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class t_solutions_df — print.t_solutions_df","text":"Function prints console return value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class weights_matrix — print.weights_matrix","title":"Print method for class weights_matrix — print.weights_matrix","text":"Custom formatted print weights matrices outputs information feature weights functions console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class weights_matrix — print.weights_matrix","text":"","code":"# S3 method for class 'weights_matrix' print(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/print.weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class weights_matrix — print.weights_matrix","text":"x weights_matrix class object. ... arguments passed print (used function)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print.weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class weights_matrix — print.weights_matrix","text":"Function prints console return value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print_with_n_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for outputting tip on changing rows printed — print_with_n_message","title":"Helper function for outputting tip on changing rows printed — print_with_n_message","text":"Helper function outputting tip changing rows printed","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print_with_n_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for outputting tip on changing rows printed — print_with_n_message","text":"","code":"print_with_n_message()"},{"path":"https://branchlab.github.io/metasnf/reference/print_with_n_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for outputting tip on changing rows printed — print_with_n_message","text":"Output message use print n change displayed rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print_with_t_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for transposing solutions_df message — print_with_t_message","title":"Helper function for transposing solutions_df message — print_with_t_message","text":"Helper function transposing solutions_df message","code":""},{"path":"https://branchlab.github.io/metasnf/reference/print_with_t_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for transposing solutions_df message — print_with_t_message","text":"","code":"print_with_t_message()"},{"path":"https://branchlab.github.io/metasnf/reference/print_with_t_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for transposing solutions_df message — print_with_t_message","text":"Output message use print n change displayed rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pubertal.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD pubertal status data — pubertal","title":"Mock ABCD pubertal status data — pubertal","text":"Like mock data frame \"abcd_pubertal\", \"unique_id\" \"uid\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pubertal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD pubertal status data — pubertal","text":"","code":"pubertal"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/pubertal.html","id":"pubertal","dir":"Reference","previous_headings":"","what":"pubertal","title":"Mock ABCD pubertal status data — pubertal","text":"data frame 275 rows 2 columns: unique_id unique identifier ABCD dataset pubertal_status Average reported pubertal status child parent (1-5 categorical scale)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pubertal.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD pubertal status data — pubertal","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pval_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of p-values — pval_heatmap","title":"Heatmap of p-values — pval_heatmap","text":"Heatmap p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pval_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of p-values — pval_heatmap","text":"","code":"pval_heatmap(   ext_sol_df,   order = NULL,   cluster_columns = TRUE,   cluster_rows = FALSE,   show_row_names = FALSE,   show_column_names = TRUE,   min_colour = \"red2\",   max_colour = \"white\",   legend_breaks = c(0, 1),   col = circlize::colorRamp2(legend_breaks, c(min_colour, max_colour)),   heatmap_legend_param = list(color_bar = \"continuous\", title = \"p-value\", at = c(0, 1)),   rect_gp = grid::gpar(col = \"black\"),   column_split_vector = NULL,   row_split_vector = NULL,   column_split = NULL,   row_split = NULL,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/pval_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of p-values — pval_heatmap","text":"ext_sol_df ext_solutions_df class object (produced function extend_solutions. order Numeric vector containing row order heatmap. cluster_columns Whether columns sorted hierarchical clustering. cluster_rows Whether rows sorted hierarchical clustering. show_row_names Whether row names shown. show_column_names Whether column names shown. min_colour Colour used lowest value heatmap. max_colour Colour used highest value heatmap. legend_breaks Numeric vector breaks legend. col Colour function ComplexHeatmap::Heatmap() heatmap_legend_param Legend function ComplexHeatmap::Heatmap() rect_gp Cell border function ComplexHeatmap::Heatmap() column_split_vector Vector indices split columns . row_split_vector Vector indices split rows . column_split Standard parameter ComplexHeatmap::Heatmap. row_split Standard parameter ComplexHeatmap::Heatmap. ... Additional parameters passed ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pval_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of p-values — pval_heatmap","text":"Returns heatmap (class \"Heatmap\" package ComplexHeatmap) displays provided p-values.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pval_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap of p-values — pval_heatmap","text":"","code":"#dl <- data_list( #    list(income, \"household_income\", \"demographics\", \"ordinal\"), #    list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"), #    list(fav_colour, \"favourite_colour\", \"demographics\", \"categorical\"), #    list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"), #    list(depress, \"depressed\", \"behaviour\", \"ordinal\"), #    uid = \"unique_id\" #) # #sc <- snf_config( #    dl, #    n_solutions = 4, #    dropout_dist = \"uniform\", #    max_k = 50 #) # #sol_df <- batch_snf(dl, sc) # #ext_sol_df <- extend_solutions(sol_df, dl) # #pval_heatmap(ext_sol_df)"},{"path":"https://branchlab.github.io/metasnf/reference/quality_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality metrics — quality_measures","title":"Quality metrics — quality_measures","text":"functions calculate conventional metrics cluster solution quality.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/quality_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality metrics — quality_measures","text":"","code":"calculate_silhouettes(sol_df)  calculate_dunn_indices(sol_df)  calculate_db_indices(sol_df)"},{"path":"https://branchlab.github.io/metasnf/reference/quality_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality metrics — quality_measures","text":"sol_df solutions_df class object created batch_snf() parameter return_sim_mats = TRUE.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/quality_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality metrics — quality_measures","text":"list silhouette class objects, vector Dunn indices, vector Davies-Bouldin indices depending function used.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/quality_measures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quality metrics — quality_measures","text":"calculate_silhouettes: wrapper cluster::silhouette calculates silhouette scores cluster solutions provided solutions data frame. Silhouette values range -1 +1 indicate overall ratio close together observations within cluster far apart observations across clusters . can learn interpreting results function calling ?cluster::silhouette. calculate_dunn_indices: wrapper clv::clv.Dunn calculates Dunn indices cluster solutions provided solutions data frame. Dunn indices, like silhouette scores, similarly reflect similarity within clusters separation across clusters. can learn interpreting results function calling ?clv::clv.Dunn. calculate_db_indices: wrapper clv::clv.Davies.Bouldin calculates Davies-Bouldin indices cluster solutions provided solutions data frame. values can interpreted similarly . can learn interpreting results function calling ?clv::clv.Davies.Bouldin.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/quality_measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality metrics — quality_measures","text":"","code":"if (FALSE) { # \\dontrun{ input_dl <- data_list(     list(gender_df, \"gender\", \"demographics\", \"categorical\"),     list(diagnosis_df, \"diagnosis\", \"clinical\", \"categorical\"),     uid = \"patient_id\" )  sc <- snf_config(input_dl, n_solutions = 5)  sol_df <- batch_snf(input_dl, sc, return_sim_mats = TRUE)  # calculate Davies-Bouldin indices davies_bouldin_indices <- calculate_db_indices(sol_df)  # calculate Dunn indices dunn_indices <- calculate_dunn_indices(sol_df)  # calculate silhouette scores silhouette_scores <- calculate_silhouettes(sol_df) } # }"},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random removal sequence — random_removal","title":"Generate random removal sequence — random_removal","text":"Helper function contribute rows within settings data frame. Number columns removed follows uniform exponential probability distribution.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random removal sequence — random_removal","text":"","code":"random_removal(   columns,   min_removed_inputs,   max_removed_inputs,   dropout_dist = \"exponential\" )"},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random removal sequence — random_removal","text":"columns Columns settings_df passed min_removed_inputs smallest number input data frames may randomly removed. max_removed_inputs largest number input data frames may randomly removed. dropout_dist Indication input data frames dropped. can \"none\" (dropout), \"uniform\" (uniformly draw number min max removed inputs), \"exponential\" (like uniform, using exponential distribution; default).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random removal sequence — random_removal","text":"Settings data frame row containing inclusion information.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rbind.ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Row-binding of solutions data frame class objects — rbind.ext_solutions_df","title":"Row-binding of solutions data frame class objects — rbind.ext_solutions_df","text":"Row-binding solutions data frame class objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rbind.ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row-binding of solutions data frame class objects — rbind.ext_solutions_df","text":"","code":"# S3 method for class 'ext_solutions_df' rbind(..., reset_indices = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/rbind.ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row-binding of solutions data frame class objects — rbind.ext_solutions_df","text":"... arbitrary number ext_solutions_df class objects. reset_indices TRUE, re-labels \"solutions\" indices solutions data frame 1 number defined settings.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rbind.ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row-binding of solutions data frame class objects — rbind.ext_solutions_df","text":"ext_solutions_df class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rbind.solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Row-binding of solutions data frame class objects — rbind.solutions_df","title":"Row-binding of solutions data frame class objects — rbind.solutions_df","text":"Row-binding solutions data frame class objects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rbind.solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row-binding of solutions data frame class objects — rbind.solutions_df","text":"","code":"# S3 method for class 'solutions_df' rbind(..., reset_indices = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/rbind.solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row-binding of solutions data frame class objects — rbind.solutions_df","text":"... arbitrary number solutions_df class objects. reset_indices TRUE, re-labels \"solutions\" indices solutions data frame 1 number defined settings.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rbind.solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row-binding of solutions data frame class objects — rbind.solutions_df","text":"solutions_df class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rbind.t_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Row-binding of t_solutions_df class objects — rbind.t_solutions_df","title":"Row-binding of t_solutions_df class objects — rbind.t_solutions_df","text":"Vertically stack two t_solutions_df class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rbind.t_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row-binding of t_solutions_df class objects — rbind.t_solutions_df","text":"","code":"# S3 method for class 't_solutions_df' rbind(...)"},{"path":"https://branchlab.github.io/metasnf/reference/rbind.t_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row-binding of t_solutions_df class objects — rbind.t_solutions_df","text":"... arbitrary number t_solutions_df class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rbind.t_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row-binding of t_solutions_df class objects — rbind.t_solutions_df","text":"t_solutions_df class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rbind.weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Row-bind weights matrices — rbind.weights_matrix","title":"Row-bind weights matrices — rbind.weights_matrix","text":"Vertically stack two weights_matrix class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rbind.weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row-bind weights matrices — rbind.weights_matrix","text":"","code":"# S3 method for class 'weights_matrix' rbind(...)"},{"path":"https://branchlab.github.io/metasnf/reference/rbind.weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row-bind weights matrices — rbind.weights_matrix","text":"... arbitrary number weights_matrix class objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rbind.weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row-bind weights matrices — rbind.weights_matrix","text":"weights_matrix class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/remove_dll_incomplete.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove observations with incomplete data from a data list-like list object — remove_dll_incomplete","title":"Remove observations with incomplete data from a data list-like list object — remove_dll_incomplete","text":"Helper function data_list class initialization. First applies stats::na.omit() data frames named \"data\" within nested list. removes observations present across data frames.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/remove_dll_incomplete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove observations with incomplete data from a data list-like list object — remove_dll_incomplete","text":"","code":"remove_dll_incomplete(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/remove_dll_incomplete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove observations with incomplete data from a data list-like list object — remove_dll_incomplete","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/remove_dll_incomplete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove observations with incomplete data from a data list-like list object — remove_dll_incomplete","text":"provided dll missing observations removed.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rename_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename features in a data list — rename_dl","title":"Rename features in a data list — rename_dl","text":"Rename features data list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rename_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename features in a data list — rename_dl","text":"","code":"rename_dl(dl, name_mapping)"},{"path":"https://branchlab.github.io/metasnf/reference/rename_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename features in a data list — rename_dl","text":"dl nested list input data data_list(). name_mapping named vector values features renamed names new names features.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rename_dl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename features in a data list — rename_dl","text":"data list (\"list\"-class object) adjusted feature names.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rename_dl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename features in a data list — rename_dl","text":"","code":"dl <- data_list(     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" ) #> ℹ 120 observations dropped due to incomplete data.  summary(dl, \"feature\") #>              name       type       domain #> 1 pubertal_status continuous demographics #> 2  cbcl_anxiety_r    ordinal    behaviour #> 3  cbcl_depress_r    ordinal    behaviour  name_changes <- c(     \"anxiety_score\" = \"cbcl_anxiety_r\",     \"depression_score\" = \"cbcl_depress_r\" )  dl <- rename_dl(dl, name_changes)  summary(dl, \"feature\") #>                 Length Class  Mode #> pubertal_status 4      -none- list #> anxiety         4      -none- list #> depressed       4      -none- list"},{"path":"https://branchlab.github.io/metasnf/reference/reorder_dl_uids.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder the uids in a data list — reorder_dl_uids","title":"Reorder the uids in a data list — reorder_dl_uids","text":"Reorder uids data list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/reorder_dl_uids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder the uids in a data list — reorder_dl_uids","text":"","code":"reorder_dl_uids(dl, ordered_uids)"},{"path":"https://branchlab.github.io/metasnf/reference/reorder_dl_uids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder the uids in a data list — reorder_dl_uids","text":"dl nested list input data data_list(). ordered_uids vector uid values data list desired order sorted data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/reorder_dl_uids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder the uids in a data list — reorder_dl_uids","text":"data list (\"list\"-class object) reordered observations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper resampling function found in ?sample — resample","title":"Helper resampling function found in ?sample — resample","text":"Like sample, given single value x, returns back single value instead random value 1 x.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper resampling function found in ?sample — resample","text":"","code":"resample(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper resampling function found in ?sample — resample","text":"x Vector single value sample ... Remaining arguments base::sample function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper resampling function found in ?sample — resample","text":"Numeric vector result running base::sample.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/run_snf.html","id":null,"dir":"Reference","previous_headings":"","what":"Run SNF — run_snf","title":"Run SNF — run_snf","text":"Helper function running single SNF config pipeline.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/run_snf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run SNF — run_snf","text":"","code":"run_snf(i, dl, sc, return_sim_mats, sim_mats_dir, p)"},{"path":"https://branchlab.github.io/metasnf/reference/run_snf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run SNF — run_snf","text":"Row settings_df weights_matrix within SNF config use. dl nested list input data data_list(). sc snf_config class object stores sets hyperparameters used transform data dl cluster solutions. See ?settings_df https://branchlab.github.io/metasnf/articles/settings_df.html details. return_sim_mats TRUE, function return list first element solutions data frame second element list similarity matrices row sol_df. Default FALSE. sim_mats_dir specified, directory used save generated similarity matrices.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/run_snf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run SNF — run_snf","text":"list containing cluster solution (numeric vector) fused network used create cluster solution. fused network NULL return_sim_mats FALSE.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/save_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a heatmap object to a file — save_heatmap","title":"Save a heatmap object to a file — save_heatmap","text":"Save heatmap object file","code":""},{"path":"https://branchlab.github.io/metasnf/reference/save_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a heatmap object to a file — save_heatmap","text":"","code":"save_heatmap(heatmap, path, width = 480, height = 480, res = 100)"},{"path":"https://branchlab.github.io/metasnf/reference/save_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a heatmap object to a file — save_heatmap","text":"heatmap heatmap object save. path path save heatmap . width width heatmap. height height heatmap. res resolution heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/save_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a heatmap object to a file — save_heatmap","text":"return value. Saves heatmap file.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/scale_diagonals.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust the diagonals of a matrix — scale_diagonals","title":"Adjust the diagonals of a matrix — scale_diagonals","text":"Adjust diagonals matrix reduce contrast -diagonals plotting.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/scale_diagonals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust the diagonals of a matrix — scale_diagonals","text":"","code":"scale_diagonals(matrix, method = \"mean\")"},{"path":"https://branchlab.github.io/metasnf/reference/scale_diagonals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust the diagonals of a matrix — scale_diagonals","text":"matrix Matrix rescale. method Method rescaling. Can : \"mean\" (replace diagonals average value -diagonals) \"zero\" (replace diagonals 0) \"min\" (replace diagonals min value -diagonals) \"max\" (replace diagonals max value -diagonals)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/scale_diagonals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust the diagonals of a matrix — scale_diagonals","text":"\"matrix\" class object rescaled diagonals.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/settings_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a settings data frame — settings_df","title":"Build a settings data frame — settings_df","text":"settings_df data frame whose rows completely specify hyperparameters decisions required transform individual input data frames (found data list, see ?data_list) single similarity matrix SNF. format settings data frame follows: column named \"solution\": column used keep track rows integer values . column named \"alpha\": column contains value alpha hyperparameter used run SNF pipeline. column named \"k\": Like , K (nearest neighbours) hyperparameter. column named \"t\": Like , t (number iterations) hyperparameter. column named \"snf_scheme\": 3 pre-defined schemes used integrate data frames data list final fused network. purpose varying schemes primarily increase diversity generated cluster solutions. value 1 corresponds \"individual\" scheme, data frames directly merged SNF final fused network. scheme corresponds approach shown original SNF paper. value 2 corresponds \"two-step\" scheme, data frames within domain first merged domain-specific fused network. Next, domain-specific networks fused SNF final fused network. scheme useful fairly re-weighting SNF pipelines unequal numbers data frames across domains. value 3 corresponds \"domain\" scheme, data frames within domain first concatenated single domain- specific data frame merged SNF final fused network. approach serves alternative way re-weight SNF pipelines unequal numbers data frames across domains. can learn parameter : https://branchlab.github.io/metasnf/articles/snf_schemes.html. column named \"clust_alg\": Specification clustering algorithm applied final similarity matrix. default, column can take integer values 1 2, correspond spectral clustering number clusters determined eigen-gap rotation cost heuristic respectively. can learn parameter : https://branchlab.github.io/metasnf/articles/clustering_algorithms.html. column named \"cnt_dist\": Specification distance metric used data frames purely continuous data. can learn metric defaults : https://branchlab.github.io/metasnf/articles/distance_metrics.html column named \"dsc_dist\": Like , discrete data frames. column named \"ord_dist\": Like , ordinal data frames. column named \"cat_dist\": Like , categorical data frames. column named \"mix_dist\": Like , mixed-type (e.g., categorical discrete) data frames. One column every input data frame corresponding data list can either value 0 1. name column formatted \"inc_[]\" square brackets replaced name (found dl_summary(dl)$\"name\") data frame. 0, data frame excluded run SNF pipeline. 1, data frame included.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/settings_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a settings data frame — settings_df","text":"","code":"settings_df(   dl,   n_solutions = 0,   min_removed_inputs = 0,   max_removed_inputs = length(dl) - 1,   dropout_dist = \"exponential\",   min_alpha = NULL,   max_alpha = NULL,   min_k = NULL,   max_k = NULL,   min_t = NULL,   max_t = NULL,   alpha_values = NULL,   k_values = NULL,   t_values = NULL,   possible_snf_schemes = c(1, 2, 3),   clustering_algorithms = NULL,   continuous_distances = NULL,   discrete_distances = NULL,   ordinal_distances = NULL,   categorical_distances = NULL,   mixed_distances = NULL,   dfl = NULL,   snf_input_weights = NULL,   snf_domain_weights = NULL,   retry_limit = 10,   allow_duplicates = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/settings_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a settings data frame — settings_df","text":"dl nested list input data data_list(). n_solutions Number rows generate settings data frame. min_removed_inputs smallest number input data frames may randomly removed. default, 0. max_removed_inputs largest number input data frames may randomly removed. default, 1 less provided input data frames data list. dropout_dist Parameter controlling random removal input data frames occur. Can \"none\" (input data frames randomly removed), \"uniform\" (uniformly sample min_removed_inputs max_removed_inputs determine number input data frames remove), \"exponential\" (pick number input data frames remove sampling min_removed_inputs max_removed_inputs exponential distribution; default). min_alpha minimum value alpha hyperparameter can . Random assigned value alpha row obtained uniformly sampling numbers min_alpha max_alpha intervals 0.1. used conjunction alpha_values parameter. max_alpha maximum value alpha hyperparameter can . See min_alpha parameter. used conjunction alpha_values parameter. min_k minimum value k hyperparameter can . Random assigned value k row obtained uniformly sampling numbers min_k max_k intervals 1. used conjunction k_values parameter. max_k maximum value k hyperparameter can . See min_k parameter. used conjunction k_values parameter. min_t minimum value t hyperparameter can . Random assigned value t row obtained uniformly sampling numbers min_t max_t intervals 1. used conjunction t_values parameter. max_t maximum value t hyperparameter can . See min_t parameter. used conjunction t_values parameter. alpha_values number numeric vector set possible values alpha can take . Value obtained uniformly sampling vector. used conjunction min_alpha max_alpha parameters. k_values number numeric vector set possible values k can take . Value obtained uniformly sampling vector. used conjunction min_k max_k parameters. t_values number numeric vector set possible values t can take . Value obtained uniformly sampling vector. used conjunction min_t max_t parameters. possible_snf_schemes vector containing possible snf_schemes uniformly randomly select . default, vector contains 3 possible schemes: c(1, 2, 3). 1 corresponds \"individual\" scheme, 2 corresponds \"domain\" scheme, 3 corresponds \"two-step\" scheme. clustering_algorithms list clustering algorithms uniformly randomly pick clustering. specified, randomly select spectral clustering using eigen-gap heuristic spectral clustering using rotation cost heuristic. See ?clust_fns_list details running custom clustering algorithms. continuous_distances vector continuous distance metrics use custom dist_fns_list provided. discrete_distances vector categorical distance metrics use custom dist_fns_list provided. ordinal_distances vector categorical distance metrics use custom dist_fns_list provided. categorical_distances vector categorical distance metrics use custom dist_fns_list provided. mixed_distances vector mixed distance metrics use custom dist_fns_list provided. dfl List containing distance metrics vary . See ?generate_dist_fns_list. snf_input_weights Nested list containing weights SNF used merge individual input measures (see ?generate_snf_weights) snf_domain_weights Nested list containing weights SNF used merge domains (see ?generate_snf_weights) retry_limit maximum number attempts generate novel row. function return matrices identical rows. range requested possible settings tightens number requested rows increases, risk randomly generating row already exists increases. new random row matched existing row retry_limit number times, function terminate. allow_duplicates TRUE, enables creation settings data frame duplicate non-feature weighting related hyperparameters. function used paired custom weights matrix non-duplicate rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/settings_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a settings data frame — settings_df","text":"settings data frame","code":""},{"path":"https://branchlab.github.io/metasnf/reference/shiny_annotator.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch a shiny app to identify meta cluster boundaries — shiny_annotator","title":"Launch a shiny app to identify meta cluster boundaries — shiny_annotator","text":"function calls htShiny() function package InteractiveComplexHeatmap assist users identifying indices boundaries meta clusters meta cluster heatmap. providing heatmap inter-solution similarities (obtained meta_cluster_heatmap()), users can click positions within heatmap appear meaningfully separate major sets similar cluster solutions visual inspection. corresponding indices clicked positions printed console also shown within app. function can run interactive session R.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/shiny_annotator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch a shiny app to identify meta cluster boundaries — shiny_annotator","text":"","code":"shiny_annotator(ari_heatmap)"},{"path":"https://branchlab.github.io/metasnf/reference/shiny_annotator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch a shiny app to identify meta cluster boundaries — shiny_annotator","text":"ari_heatmap Heatmap ARIs divide meta clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/shiny_annotator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch a shiny app to identify meta cluster boundaries — shiny_annotator","text":"return value. Launches interactive shiny applet.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/shiny_annotator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch a shiny app to identify meta cluster boundaries — shiny_annotator","text":"","code":"#dl <- data_list( #    list(cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"), #    list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"), #    list(income, \"household_income\", \"demographics\", \"continuous\"), #    list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"), #    uid = \"unique_id\" #) # #set.seed(42) #my_sc <- snf_config( #    dl = dl, #    n_solutions = 20, #    min_k = 20, #    max_k = 50 #) # #sol_df <- batch_snf(dl, my_sc) # #sol_aris <- calc_aris(sol_df) # #meta_cluster_order <- get_matrix_order(sol_aris) # #ari_hm <- meta_cluster_heatmap(sol_aris, order = meta_cluster_order) # ## Click on meta cluster boundaries to obtain `split_vec` values #shiny_annotator(ari_hm) # #split_vec <- c(6, 10, 16) # #ari_hm <- meta_cluster_heatmap( #    sol_aris, #    order = meta_cluster_order, #    split_vector = split_vec #)"},{"path":"https://branchlab.github.io/metasnf/reference/sim_mats_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or extract a sim_mats_list class object — sim_mats_list","title":"Create or extract a sim_mats_list class object — sim_mats_list","text":"Create extract sim_mats_list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sim_mats_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or extract a sim_mats_list class object — sim_mats_list","text":"","code":"sim_mats_list(x)"},{"path":"https://branchlab.github.io/metasnf/reference/sim_mats_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or extract a sim_mats_list class object — sim_mats_list","text":"x object create extract sim_mats_list .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sim_mats_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create or extract a sim_mats_list class object — sim_mats_list","text":"sim_mats_list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","title":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","text":"Plot heatmap similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","text":"","code":"similarity_matrix_heatmap(   similarity_matrix,   order = NULL,   cluster_solution = NULL,   scale_diag = \"mean\",   log_graph = TRUE,   cluster_rows = FALSE,   cluster_columns = FALSE,   show_row_names = FALSE,   show_column_names = FALSE,   data = NULL,   left_bar = NULL,   right_bar = NULL,   top_bar = NULL,   bottom_bar = NULL,   left_hm = NULL,   right_hm = NULL,   top_hm = NULL,   bottom_hm = NULL,   annotation_colours = NULL,   min_colour = NULL,   max_colour = NULL,   split_vector = NULL,   row_split = NULL,   column_split = NULL,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","text":"similarity_matrix similarity matrix order Vector numbers reorder similarity matrix (data provided). Overwrites ordering specified cluster_solution param. cluster_solution Row solutions data frame column transposed solutions data frame. scale_diag Method rescaling matrix diagonals. Can \"none\" (change diagonals), \"mean\" (replace diagonals average value -diagonals), \"zero\" (replace diagonals 0). log_graph TRUE, log transforms graph. cluster_rows Parameter ComplexHeatmap::Heatmap. cluster_columns Parameter ComplexHeatmap::Heatmap. show_row_names Parameter ComplexHeatmap::Heatmap. show_column_names Parameter ComplexHeatmap::Heatmap. data data frame containing elements requested annotation. left_bar Named list strings, strings features df used barplot annotation left plot names names used caption plots legends. right_bar See left_bar. top_bar See left_bar. bottom_bar See left_bar. left_hm Like left_bar, heatmap annotation instead barplot annotation. right_hm See left_hm. top_hm See left_hm. bottom_hm See left_hm. annotation_colours Named list heatmap annotations colours. min_colour Colour used lowest value heatmap. max_colour Colour used highest value heatmap. split_vector vector partition indices. row_split Standard parameter ComplexHeatmap::Heatmap. column_split Standard parameter ComplexHeatmap::Heatmap. ... Additional parameters passed ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","text":"Returns heatmap (class \"Heatmap\" package ComplexHeatmap) displays similarities observations provided matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","text":"","code":"#my_dl <- data_list( #    list( #        data = expression_df, #        name = \"expression_data\", #        domain = \"gene_expression\", #        type = \"continuous\" #    ), #    list( #        data = methylation_df, #        name = \"methylation_data\", #        domain = \"gene_methylation\", #        type = \"continuous\" #    ), #    uid = \"patient_id\" #) # #sc <- snf_config(my_dl, n_solutions = 10) # #sol_df <- batch_snf(my_dl, sc, return_sim_mats = TRUE) # #sim_mats <- sim_mats_list(sol_df) # #similarity_matrix_heatmap( #    sim_mats[[1]], #    cluster_solution = sol_df[1, ] #)"},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","title":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","text":"Generate complete path filename store similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","text":"","code":"similarity_matrix_path(similarity_matrix_dir, i)"},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","text":"similarity_matrix_dir Directory store similarity matrices. Corresponding solution.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","text":"Complete path filename store similarity matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/siw_euclidean_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Squared (including weights) Euclidean distance — siw_euclidean_distance","title":"Squared (including weights) Euclidean distance — siw_euclidean_distance","text":"Squared (including weights) Euclidean distance","code":""},{"path":"https://branchlab.github.io/metasnf/reference/siw_euclidean_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squared (including weights) Euclidean distance — siw_euclidean_distance","text":"","code":"siw_euclidean_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/siw_euclidean_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squared (including weights) Euclidean distance — siw_euclidean_distance","text":"df data frame containing least 1 data column. weights_row Single-row data frame column names contain column names df row contains corresponding weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/siw_euclidean_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Squared (including weights) Euclidean distance — siw_euclidean_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Define configuration for generating a set of SNF-based cluster solutions — snf_config","title":"Define configuration for generating a set of SNF-based cluster solutions — snf_config","text":"snf_config() constructs SNF config object inherits classes snf_config list. object used store settings required transform data stored data_list class object space cluster solutions SNF. SNF config object contains following components: 1. settings data frame (inherits settings_df data.frame). Data frame stores SNF-specific hyperparameters information feature selection weighting, SNF schemes, clustering algorithms, distance metrics. row settings data frame corresponds distinct cluster solution. 2. clustering algorithms list (inherits clust_fns_list list), stores clustering algorithms settings data frame can point . 3. distance metrics list (inherits dist_metrics_list list), stores distance metrics settings data frame can point . 4. weights matrix (inherits weights_matrix, matrix, array'), stores feature weights use prior distance calculations. column weights matrix corresponds different feature data list row corresponds different row settings data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define configuration for generating a set of SNF-based cluster solutions — snf_config","text":"","code":"snf_config(   dl = NULL,   sdf = NULL,   dfl = NULL,   cfl = NULL,   wm = NULL,   n_solutions = 0,   min_removed_inputs = 0,   max_removed_inputs = length(dl) - 1,   dropout_dist = \"exponential\",   min_alpha = NULL,   max_alpha = NULL,   min_k = NULL,   max_k = NULL,   min_t = NULL,   max_t = NULL,   alpha_values = NULL,   k_values = NULL,   t_values = NULL,   possible_snf_schemes = c(1, 2, 3),   clustering_algorithms = NULL,   continuous_distances = NULL,   discrete_distances = NULL,   ordinal_distances = NULL,   categorical_distances = NULL,   mixed_distances = NULL,   snf_input_weights = NULL,   snf_domain_weights = NULL,   retry_limit = 10,   cnt_dist_fns = NULL,   dsc_dist_fns = NULL,   ord_dist_fns = NULL,   cat_dist_fns = NULL,   mix_dist_fns = NULL,   automatic_standard_normalize = FALSE,   use_default_dist_fns = FALSE,   clust_fns = NULL,   use_default_clust_fns = FALSE,   weights_fill = \"ones\" )"},{"path":"https://branchlab.github.io/metasnf/reference/snf_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define configuration for generating a set of SNF-based cluster solutions — snf_config","text":"dl nested list input data data_list(). sdf settings_df class object. Overrides settings data frame related parameters. dfl dist_fns_list class object. Overrides distance functions list related parameters. cfl clust_fns_list class object. Overrides clustering functions list related parameters. wm weights_matrix class object. Overrides weights matrix related parameters. n_solutions Number rows generate settings data frame. min_removed_inputs smallest number input data frames may randomly removed. default, 0. max_removed_inputs largest number input data frames may randomly removed. default, 1 less provided input data frames data list. dropout_dist Parameter controlling random removal input data frames occur. Can \"none\" (input data frames randomly removed), \"uniform\" (uniformly sample min_removed_inputs max_removed_inputs determine number input data frames remove), \"exponential\" (pick number input data frames remove sampling min_removed_inputs max_removed_inputs exponential distribution; default). min_alpha minimum value alpha hyperparameter can . Random assigned value alpha row obtained uniformly sampling numbers min_alpha max_alpha intervals 0.1. used conjunction alpha_values parameter. max_alpha maximum value alpha hyperparameter can . See min_alpha parameter. used conjunction alpha_values parameter. min_k minimum value k hyperparameter can . Random assigned value k row obtained uniformly sampling numbers min_k max_k intervals 1. used conjunction k_values parameter. max_k maximum value k hyperparameter can . See min_k parameter. used conjunction k_values parameter. min_t minimum value t hyperparameter can . Random assigned value t row obtained uniformly sampling numbers min_t max_t intervals 1. used conjunction t_values parameter. max_t maximum value t hyperparameter can . See min_t parameter. used conjunction t_values parameter. alpha_values number numeric vector set possible values alpha can take . Value obtained uniformly sampling vector. used conjunction min_alpha max_alpha parameters. k_values number numeric vector set possible values k can take . Value obtained uniformly sampling vector. used conjunction min_k max_k parameters. t_values number numeric vector set possible values t can take . Value obtained uniformly sampling vector. used conjunction min_t max_t parameters. possible_snf_schemes vector containing possible snf_schemes uniformly randomly select . default, vector contains 3 possible schemes: c(1, 2, 3). 1 corresponds \"individual\" scheme, 2 corresponds \"domain\" scheme, 3 corresponds \"two-step\" scheme. clustering_algorithms list clustering algorithms uniformly randomly pick clustering. specified, randomly select spectral clustering using eigen-gap heuristic spectral clustering using rotation cost heuristic. See ?clust_fns_list details running custom clustering algorithms. continuous_distances vector continuous distance metrics use custom dist_fns_list provided. discrete_distances vector categorical distance metrics use custom dist_fns_list provided. ordinal_distances vector categorical distance metrics use custom dist_fns_list provided. categorical_distances vector categorical distance metrics use custom dist_fns_list provided. mixed_distances vector mixed distance metrics use custom dist_fns_list provided. snf_input_weights Nested list containing weights SNF used merge individual input measures (see ?generate_snf_weights) snf_domain_weights Nested list containing weights SNF used merge domains (see ?generate_snf_weights) retry_limit maximum number attempts generate novel row. function return matrices identical rows. range requested possible settings tightens number requested rows increases, risk randomly generating row already exists increases. new random row matched existing row retry_limit number times, function terminate. cnt_dist_fns named list continuous distance metric functions. dsc_dist_fns named list discrete distance metric functions. ord_dist_fns named list ordinal distance metric functions. cat_dist_fns named list categorical distance metric functions. mix_dist_fns named list mixed distance metric functions. automatic_standard_normalize TRUE, automatically use standard normalization prior calculation numeric distances. parameter overrides distance functions list-related parameters. use_default_dist_fns TRUE, prepend base distance metrics (euclidean distance continuous, discrete, ordinal data gower distance categorical mixed data) resulting distance metrics list. clust_fns list named clustering functions use_default_clust_fns TRUE, prepend base clustering algorithms (spectral_eigen spectral_rot, apply spectral clustering use eigen-gap rotation cost heuristics respectively determining number clusters graph) clust_fns. weights_fill String indicating populate generate rows . Can \"ones\" (default; fill matrix 1), \"uniform\" (fill matrix uniformly distributed random values), \"exponential\" (fill matrix exponentially distributed random values).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define configuration for generating a set of SNF-based cluster solutions — snf_config","text":"snf_config class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define configuration for generating a set of SNF-based cluster solutions — snf_config","text":"","code":"# Simple random config for 5 cluster solutions input_dl <- data_list(     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" ) #> ℹ 38 observations dropped due to incomplete data. my_sc <- snf_config(     dl = input_dl,     n_solutions = 5 ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  # specifying possible K range my_sc <- snf_config(     dl = input_dl,     n_solutions = 5,     min_k = 20,     max_k = 40 ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  # Random feature weights across from uniform distribution my_sc <- snf_config(     dl = input_dl,     n_solutions = 5,     min_k = 20,     max_k = 40,     weights_fill = \"uniform\" ) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  # Specifying custom pre-built clustering and distance functions # - Random alternation between 2-cluster and 5-cluster solutions # - When continuous or discrete data frames are being processed, #   randomly alternate between standardized/normalized Euclidean #   distance and regular Euclidean distance my_sc <- snf_config(     dl = input_dl,     n_solutions = 5,     min_k = 20,     max_k = 40,     weights_fill = \"uniform\",     clust_fns = list(         \"two_cluster_spectral\" = spectral_two,         \"five_cluster_spectral\" = spectral_five     ),     cnt_dist_fns = list(          \"euclidean\" = euclidean_distance,          \"std_nrm_euc\" = sn_euclidean_distance     ),     dsc_dist_fns = list(          \"euclidean\" = euclidean_distance,          \"std_nrm_euc\" = sn_euclidean_distance     ) )"},{"path":"https://branchlab.github.io/metasnf/reference/snf_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"SNF schemes — snf_scheme","title":"SNF schemes — snf_scheme","text":"functions manage way input data frames passed SNF yield final fused network.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SNF schemes — snf_scheme","text":"","code":"two_step_merge(   dl,   k = 20,   alpha = 0.5,   t = 20,   cnt_dist_fn,   dsc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row )  domain_merge(   dl,   cnt_dist_fn,   dsc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row,   k,   alpha,   t )  individual(   dl,   k = 20,   alpha = 0.5,   t = 20,   cnt_dist_fn,   dsc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row )"},{"path":"https://branchlab.github.io/metasnf/reference/snf_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SNF schemes — snf_scheme","text":"dl nested list input data data_list(). k k hyperparameter. alpha alpha/eta/sigma hyperparameter. t SNF number iterations hyperparameter. cnt_dist_fn distance metric function continuous data. dsc_dist_fn distance metric function discrete data. ord_dist_fn distance metric function ordinal data. cat_dist_fn distance metric function categorical data. mix_dist_fn distance metric function mixed data. weights_row data frame row containing feature weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_scheme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SNF schemes — snf_scheme","text":"individual: \"vanilla\" scheme - distance matrix conversions input data frame separately single call SNF fuses final fused network. domain_merge: Given data list, returns new data list data objects particular domain concatenated. two_step_merge: Individual data frames individual similarity matrices one fused network per domain one final fused network.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for using the correct SNF scheme — snf_step","title":"Helper function for using the correct SNF scheme — snf_step","text":"Helper function using correct SNF scheme","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for using the correct SNF scheme — snf_step","text":"","code":"snf_step(   dl,   scheme,   k = 20,   alpha = 0.5,   t = 20,   cnt_dist_fn,   dsc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row )"},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for using the correct SNF scheme — snf_step","text":"dl nested list input data data_list(). scheme SNF system use achieve final fused network. k k hyperparameter. alpha alpha/eta/sigma hyperparameter. t SNF number iterations hyperparameter. cnt_dist_fn distance metric function continuous data. dsc_dist_fn distance metric function discrete data. ord_dist_fn distance metric function ordinal data. cat_dist_fn distance metric function categorical data. mix_dist_fn distance metric function mixed data. weights_row data frame row containing feature weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for using the correct SNF scheme — snf_step","text":"fused similarity network (matrix).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sol_df_col_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for organizing solutions df-like column order — sol_df_col_order","title":"Helper function for organizing solutions df-like column order — sol_df_col_order","text":"Reorders columns solutions data frame \"solution\", \"nclust\", \"mc\", column names.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sol_df_col_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for organizing solutions df-like column order — sol_df_col_order","text":"","code":"sol_df_col_order(x)"},{"path":"https://branchlab.github.io/metasnf/reference/sol_df_col_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for organizing solutions df-like column order — sol_df_col_order","text":"x Object columns \"solution\", \"nclust\", \"mc\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sol_df_col_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for organizing solutions df-like column order — sol_df_col_order","text":"x column names reordered.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for solutions_df class object — solutions_df","title":"Constructor for solutions_df class object — solutions_df","text":"Constructor solutions_df class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for solutions_df class object — solutions_df","text":"","code":"solutions_df(sol_dfl, smll, sc, dl)"},{"path":"https://branchlab.github.io/metasnf/reference/solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for solutions_df class object — solutions_df","text":"sol_dfl solutions data frame-like object validated converted solutions data frame. smll similarity matrix list-like object validated used construct solutions data frame. sc snf_config object used construct solutions data frame. dl data_list object used construct solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for solutions_df class object — solutions_df","text":"solutions data frame (solutions_df class object).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/split_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to determine which row and columns to split on — split_parser","title":"Helper function to determine which row and columns to split on — split_parser","text":"Helper function determine row columns split ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/split_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to determine which row and columns to split on — split_parser","text":"","code":"split_parser(   row_split_vector = NULL,   column_split_vector = NULL,   row_split = NULL,   column_split = NULL,   n_rows,   n_columns )"},{"path":"https://branchlab.github.io/metasnf/reference/split_parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to determine which row and columns to split on — split_parser","text":"row_split_vector vector row indices split . column_split_vector vector column indices split . row_split Standard parameter ComplexHeatmap::Heatmap. column_split Standard parameter ComplexHeatmap::Heatmap. n_rows number rows data. n_columns number columns data.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/split_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to determine which row and columns to split on — split_parser","text":"\"list\"-class object containing row_split column_split character vectors pass ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.ari_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of a ari_matrix object — str.ari_matrix","title":"Structure of a ari_matrix object — str.ari_matrix","text":"Structure ari_matrix object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.ari_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of a ari_matrix object — str.ari_matrix","text":"","code":"# S3 method for class 'ari_matrix' str(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/str.ari_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of a ari_matrix object — str.ari_matrix","text":"object ari_matrix class object. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.ari_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structure of a ari_matrix object — str.ari_matrix","text":"return object; outputs object structure console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.clust_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of a clust_fns_list object — str.clust_fns_list","title":"Structure of a clust_fns_list object — str.clust_fns_list","text":"Structure clust_fns_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.clust_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of a clust_fns_list object — str.clust_fns_list","text":"","code":"# S3 method for class 'clust_fns_list' str(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/str.clust_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of a clust_fns_list object — str.clust_fns_list","text":"object clust_fns_list class object. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.clust_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structure of a clust_fns_list object — str.clust_fns_list","text":"return object; outputs object structure console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of a data_list object — str.data_list","title":"Structure of a data_list object — str.data_list","text":"Structure data_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of a data_list object — str.data_list","text":"","code":"# S3 method for class 'data_list' str(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/str.data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of a data_list object — str.data_list","text":"object data_list class object. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structure of a data_list object — str.data_list","text":"return object; outputs object structure console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.dist_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of a dist_fns_list object — str.dist_fns_list","title":"Structure of a dist_fns_list object — str.dist_fns_list","text":"Structure dist_fns_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.dist_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of a dist_fns_list object — str.dist_fns_list","text":"","code":"# S3 method for class 'dist_fns_list' str(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/str.dist_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of a dist_fns_list object — str.dist_fns_list","text":"object dist_fns_list class object. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.dist_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structure of a dist_fns_list object — str.dist_fns_list","text":"return object; outputs object structure console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of a ext_solutions_df object — str.ext_solutions_df","title":"Structure of a ext_solutions_df object — str.ext_solutions_df","text":"Structure ext_solutions_df object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of a ext_solutions_df object — str.ext_solutions_df","text":"","code":"# S3 method for class 'ext_solutions_df' str(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/str.ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of a ext_solutions_df object — str.ext_solutions_df","text":"object ext_solutions_df class object. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structure of a ext_solutions_df object — str.ext_solutions_df","text":"return object; outputs object structure console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.settings_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of a settings_df object — str.settings_df","title":"Structure of a settings_df object — str.settings_df","text":"Structure settings_df object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.settings_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of a settings_df object — str.settings_df","text":"","code":"# S3 method for class 'settings_df' str(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/str.settings_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of a settings_df object — str.settings_df","text":"object settings_df class object. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.settings_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structure of a settings_df object — str.settings_df","text":"return object; outputs object structure console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.sim_mats_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of a sim_mats_list object — str.sim_mats_list","title":"Structure of a sim_mats_list object — str.sim_mats_list","text":"Structure sim_mats_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.sim_mats_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of a sim_mats_list object — str.sim_mats_list","text":"","code":"# S3 method for class 'sim_mats_list' str(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/str.sim_mats_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of a sim_mats_list object — str.sim_mats_list","text":"object sim_mats_list class object. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.sim_mats_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structure of a sim_mats_list object — str.sim_mats_list","text":"return object; outputs object structure console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.snf_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of a snf_config object — str.snf_config","title":"Structure of a snf_config object — str.snf_config","text":"Structure snf_config object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.snf_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of a snf_config object — str.snf_config","text":"","code":"# S3 method for class 'snf_config' str(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/str.snf_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of a snf_config object — str.snf_config","text":"object snf_config class object. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.snf_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structure of a snf_config object — str.snf_config","text":"return object; outputs object structure console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of a solutions_df object — str.solutions_df","title":"Structure of a solutions_df object — str.solutions_df","text":"Structure solutions_df object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of a solutions_df object — str.solutions_df","text":"","code":"# S3 method for class 'solutions_df' str(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/str.solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of a solutions_df object — str.solutions_df","text":"object solutions_df class object. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structure of a solutions_df object — str.solutions_df","text":"return object; outputs object structure console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.t_ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of a t_ext_solutions_df object — str.t_ext_solutions_df","title":"Structure of a t_ext_solutions_df object — str.t_ext_solutions_df","text":"Structure t_ext_solutions_df object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.t_ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of a t_ext_solutions_df object — str.t_ext_solutions_df","text":"","code":"# S3 method for class 't_ext_solutions_df' str(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/str.t_ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of a t_ext_solutions_df object — str.t_ext_solutions_df","text":"object t_ext_solutions_df class object. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.t_ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structure of a t_ext_solutions_df object — str.t_ext_solutions_df","text":"return object; outputs object structure console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.t_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of a t_solutions_df object — str.t_solutions_df","title":"Structure of a t_solutions_df object — str.t_solutions_df","text":"Structure t_solutions_df object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.t_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of a t_solutions_df object — str.t_solutions_df","text":"","code":"# S3 method for class 't_solutions_df' str(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/str.t_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of a t_solutions_df object — str.t_solutions_df","text":"object t_solutions_df class object. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.t_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structure of a t_solutions_df object — str.t_solutions_df","text":"return object; outputs object structure console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of a weights_matrix object — str.weights_matrix","title":"Structure of a weights_matrix object — str.weights_matrix","text":"Structure weights_matrix object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of a weights_matrix object — str.weights_matrix","text":"","code":"# S3 method for class 'weights_matrix' str(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/str.weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of a weights_matrix object — str.weights_matrix","text":"object weights_matrix class object. ... Additional arguments (used).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/str.weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structure of a weights_matrix object — str.weights_matrix","text":"return object; outputs object structure console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subc_v.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD subcortical volumes data — subc_v","title":"Mock ABCD subcortical volumes data — subc_v","text":"Like mock data frame \"abcd_subc_v\", \"unique_id\" \"uid\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subc_v.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD subcortical volumes data — subc_v","text":"","code":"subc_v"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/subc_v.html","id":"subc-v","dir":"Reference","previous_headings":"","what":"subc_v","title":"Mock ABCD subcortical volumes data — subc_v","text":"data frame 174 rows 31 columns: unique_id unique identifier ABCD dataset ... Subcortical volumes various ROIs (mm^3, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subc_v.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD subcortical volumes data — subc_v","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive Development (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create subsamples of a data list — subsample_dl","title":"Create subsamples of a data list — subsample_dl","text":"Given data list, return list smaller data lists generated random sampling (without replacement). results function can passed batch_snf_subsamples() obtain list resampled solutions data frames.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create subsamples of a data list — subsample_dl","text":"","code":"subsample_dl(   dl,   n_subsamples,   subsample_fraction = NULL,   n_observations = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/subsample_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create subsamples of a data list — subsample_dl","text":"dl nested list input data data_list(). n_subsamples Number subsamples create. subsample_fraction Percentage patients include per subsample. n_observations Number patients include per subsample.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_dl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create subsamples of a data list — subsample_dl","text":"\"list\" class object containing n_subsamples number data lists. data lists contains random subsample_fraction fraction observations provided data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_dl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create subsamples of a data list — subsample_dl","text":"","code":"my_dl <- data_list(     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(income, \"household_income\", \"demographics\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"unique_id\" ) #> ℹ 175 observations dropped due to incomplete data.  my_dl_subsamples <- subsample_dl(     my_dl,     n_subsamples = 20,     subsample_fraction = 0.85 )"},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"Given list subsampled solutions data frames 'batch_snf_subsamples(), function calculates adjusted Rand indices across subsamples solution. ARI calculation two subsamples factors observations present subsamples.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"","code":"subsample_pairwise_aris(subsample_solutions, verbose = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"subsample_solutions list solutions data frames subsamples data. object generated function batch_snf_subsamples(). verbose TRUE, output progress console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"two-item list: \"raw_aris\", list inter-subsample pairwise ARI matrices (one full cluster solution) \"ari_summary\", data frame containing mean SD inter-subsample ARIs original cluster solution.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"","code":"# \\donttest{ my_dl <- data_list(     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(income, \"household_income\", \"demographics\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"unique_id\" ) #> ℹ 175 observations dropped due to incomplete data.  sc <- snf_config(my_dl, n_solutions = 5, max_k = 40) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  my_dl_subsamples <- subsample_dl(     my_dl,     n_subsamples = 20,     subsample_fraction = 0.85 )  batch_subsample_results <- batch_snf_subsamples(     my_dl_subsamples,     sc )  pairwise_aris <- subsample_pairwise_aris(     batch_subsample_results,     verbose = TRUE ) #> Calculating pairwise ARIs for solution 1/5... #> Calculating pairwise ARIs for solution 2/5... #> Calculating pairwise ARIs for solution 3/5... #> Calculating pairwise ARIs for solution 4/5... #> Calculating pairwise ARIs for solution 5/5...  # Visualize ARIs  ComplexHeatmap::Heatmap(     pairwise_aris$\"raw_aris\"[[1]],     heatmap_legend_param = list(         color_bar = \"continuous\",         title = \"Inter-Subsample\\nARI\",         at = c(0, 0.5, 1)     ),     show_column_names = FALSE,     show_row_names = FALSE )  # }"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_clust_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a clust_fns_list object — summarize_clust_fns_list","title":"Summarize a clust_fns_list object — summarize_clust_fns_list","text":"Summarize clust_fns_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_clust_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a clust_fns_list object — summarize_clust_fns_list","text":"","code":"summarize_clust_fns_list(cfl)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_clust_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a clust_fns_list object — summarize_clust_fns_list","text":"cfl clust_fns_list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_clust_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a clust_fns_list object — summarize_clust_fns_list","text":"summary_df \"data.frame\" class object containing name index clustering algorithm provided clust_fns_list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a distance functions list — summarize_dfl","title":"Summarize a distance functions list — summarize_dfl","text":"Summarize distance functions list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a distance functions list — summarize_dfl","text":"","code":"summarize_dfl(dfl)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a distance functions list — summarize_dfl","text":"dfl dist_fns_list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a distance functions list — summarize_dfl","text":"\"data.frame\"-class object summarizing items distance metrics list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a data list — summarize_dl","title":"Summarize a data list — summarize_dl","text":"Defunct function summarizing data list. Please use summary() instead.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a data list — summarize_dl","text":"","code":"summarize_dl(data_list, scope = \"component\")"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a data list — summarize_dl","text":"data_list nested list input data data_list(). scope level detail summary. Options : \"component\" (default): One row per component (data frame) data list. \"feature\": One row feature data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a data list — summarize_dl","text":"data.frame class object summarizing components (features scope == \"component\").","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_pvals.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize p-value columns of an extended solutions data frame — summarize_pvals","title":"Summarize p-value columns of an extended solutions data frame — summarize_pvals","text":"Summarize p-value columns extended solutions data frame","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_pvals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize p-value columns of an extended solutions data frame — summarize_pvals","text":"","code":"summarize_pvals(ext_sol_df)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_pvals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize p-value columns of an extended solutions data frame — summarize_pvals","text":"ext_sol_df Result extend_solutions","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_pvals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize p-value columns of an extended solutions data frame — summarize_pvals","text":"provided extended solutions data frame along columns min, mean, maximum across p-values row.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.ari_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for class ari_matrix — summary.ari_matrix","title":"Summary method for class ari_matrix — summary.ari_matrix","text":"Provides summary ari_matrix class object, including distribution adjusted Rand index (ARI) values number solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.ari_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for class ari_matrix — summary.ari_matrix","text":"","code":"# S3 method for class 'ari_matrix' summary(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/summary.ari_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for class ari_matrix — summary.ari_matrix","text":"object ari_matrix class object. ... arguments passed summary (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.ari_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for class ari_matrix — summary.ari_matrix","text":"named list containing number solutions distribution ARI values.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.clust_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for class clust_fns_list — summary.clust_fns_list","title":"Summary method for class clust_fns_list — summary.clust_fns_list","text":"summary function simply returns console number functions contained clust_fns_list object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.clust_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for class clust_fns_list — summary.clust_fns_list","text":"","code":"# S3 method for class 'clust_fns_list' summary(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/summary.clust_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for class clust_fns_list — summary.clust_fns_list","text":"object clust_fns_list class object. ... arguments passed summary (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.clust_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for class clust_fns_list — summary.clust_fns_list","text":"Returns value. Outputs message console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for class data_list — summary.data_list","title":"Summary method for class data_list — summary.data_list","text":"Returns data list summary (data.frame class object) containing information components, features, variable types, domains, component dimensions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for class data_list — summary.data_list","text":"","code":"# S3 method for class 'data_list' summary(object, scope = \"component\", ...)"},{"path":"https://branchlab.github.io/metasnf/reference/summary.data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for class data_list — summary.data_list","text":"object data_list class object. scope level detail summary. default, set \"component\", returns summary data list component level. Can also set \"feature\", resulting summary feature level. ... arguments passed summary (used function)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for class data_list — summary.data_list","text":"data.frame class object. scope \"component\", row shows name, variable type, domain, dimensions component. scope \"feature\", row shows name, variable type, domain feature.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.dist_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for class dist_fns_list — summary.dist_fns_list","title":"Summary method for class dist_fns_list — summary.dist_fns_list","text":"summary function simply returns console number functions contained dist_fns_list object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.dist_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for class dist_fns_list — summary.dist_fns_list","text":"","code":"# S3 method for class 'dist_fns_list' summary(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/summary.dist_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for class dist_fns_list — summary.dist_fns_list","text":"object dist_fns_list class object. ... arguments passed summary (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.dist_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for class dist_fns_list — summary.dist_fns_list","text":"Returns value. Outputs message console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for class ext_solutions_df — summary.ext_solutions_df","title":"Summary method for class ext_solutions_df — summary.ext_solutions_df","text":"summary function provides summary ext_solutions_df class object, including number solutions, distribution number clusters, number features, number observations, distribution p-values.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for class ext_solutions_df — summary.ext_solutions_df","text":"","code":"# S3 method for class 'ext_solutions_df' summary(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/summary.ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for class ext_solutions_df — summary.ext_solutions_df","text":"object ext_solutions_df class object. ... arguments passed summary (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for class ext_solutions_df — summary.ext_solutions_df","text":"named list containing number solutions, distribution number clusters, number features, number observations, distribution p-values.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.settings_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for class settings_df — summary.settings_df","title":"Summary method for class settings_df — summary.settings_df","text":"summary function provides summary settings_df class object, including number settings, distribution alpha values, distribution k values, distribution clustering functions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.settings_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for class settings_df — summary.settings_df","text":"","code":"# S3 method for class 'settings_df' summary(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/summary.settings_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for class settings_df — summary.settings_df","text":"object settings_df class object. ... arguments passed summary (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.settings_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for class settings_df — summary.settings_df","text":"named list containing summary information settings data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.sim_mats_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for class sim_mats_list — summary.sim_mats_list","title":"Summary method for class sim_mats_list — summary.sim_mats_list","text":"summary function simply returns console number functions contained sim_mats_list object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.sim_mats_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for class sim_mats_list — summary.sim_mats_list","text":"","code":"# S3 method for class 'sim_mats_list' summary(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/summary.sim_mats_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for class sim_mats_list — summary.sim_mats_list","text":"object sim_mats_list class object. ... arguments passed summary (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.sim_mats_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for class sim_mats_list — summary.sim_mats_list","text":"Returns value. Outputs message console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.snf_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for class snf_config — summary.snf_config","title":"Summary method for class snf_config — summary.snf_config","text":"summary function provides summary snf_config class object, including settings data frame, clustering functions list, distance functions list, weights matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.snf_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for class snf_config — summary.snf_config","text":"","code":"# S3 method for class 'snf_config' summary(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/summary.snf_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for class snf_config — summary.snf_config","text":"object snf_config class object. ... arguments passed summary (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.snf_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for class snf_config — summary.snf_config","text":"named list containing summaries objects within config.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for class solutions_df — summary.solutions_df","title":"Summary method for class solutions_df — summary.solutions_df","text":"summary function provides summary solutions_df class object, including number solutions, distribution number clusters, number observations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for class solutions_df — summary.solutions_df","text":"","code":"# S3 method for class 'solutions_df' summary(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/summary.solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for class solutions_df — summary.solutions_df","text":"object ext_solutions_df class object. ... arguments passed summary (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for class solutions_df — summary.solutions_df","text":"named list containing number solutions, distribution number clusters, number observations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.t_ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for class t_ext_solutions_df — summary.t_ext_solutions_df","title":"Summary method for class t_ext_solutions_df — summary.t_ext_solutions_df","text":"summary function provides summary t_ext_solutions_df class object, including number solutions, distribution number clusters, number features, number observations, distribution p-values.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.t_ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for class t_ext_solutions_df — summary.t_ext_solutions_df","text":"","code":"# S3 method for class 't_ext_solutions_df' summary(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/summary.t_ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for class t_ext_solutions_df — summary.t_ext_solutions_df","text":"object t_ext_solutions_df class object. ... arguments passed summary (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.t_ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for class t_ext_solutions_df — summary.t_ext_solutions_df","text":"named list containing number solutions, distribution number clusters, number features, number observations, distribution p-values.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.t_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for class t_solutions_df — summary.t_solutions_df","title":"Summary method for class t_solutions_df — summary.t_solutions_df","text":"summary function provides summary t_solutions_df class object, including number solutions, distribution number clusters, number features, number observations, distribution p-values.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.t_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for class t_solutions_df — summary.t_solutions_df","text":"","code":"# S3 method for class 't_solutions_df' summary(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/summary.t_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for class t_solutions_df — summary.t_solutions_df","text":"object t_solutions_df class object. ... arguments passed summary (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.t_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for class t_solutions_df — summary.t_solutions_df","text":"named list containing number solutions, distribution number clusters, number features, number observations, distribution p-values.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for class weights_matrix — summary.weights_matrix","title":"Summary method for class weights_matrix — summary.weights_matrix","text":"summary function provides summary weights_matrix class object, including minimum, maximum, mean, standard deviation feature weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for class weights_matrix — summary.weights_matrix","text":"","code":"# S3 method for class 'weights_matrix' summary(object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/summary.weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for class weights_matrix — summary.weights_matrix","text":"object weights_matrix class object. ... arguments passed summary (used function).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary.weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for class weights_matrix — summary.weights_matrix","text":"named list containing summary statistics weights matrix, number solutions, number features.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull features used to calculate summary p-values from an object — summary_features","title":"Pull features used to calculate summary p-values from an object — summary_features","text":"Pull features used calculate summary p-values object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull features used to calculate summary p-values from an object — summary_features","text":"","code":"summary_features(x)"},{"path":"https://branchlab.github.io/metasnf/reference/summary_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull features used to calculate summary p-values from an object — summary_features","text":"x object extract summary features .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summary_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull features used to calculate summary p-values from an object — summary_features","text":"character vector summary features.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Training and testing split — train_test_assign","title":"Training and testing split — train_test_assign","text":"Given vector uid_id threshold, returns list members training set testing set. function relies whether absolute value Jenkins's one_at_a_time hash function exceeds maximum possible value (2147483647) multiplied threshold.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Training and testing split — train_test_assign","text":"","code":"train_test_assign(train_frac, uids, seed = 42)"},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Training and testing split — train_test_assign","text":"train_frac fraction (0 1) observations training uids character vector UIDs distributed training test sets. seed Seed used Jenkins's one_at_a_time hash function.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Training and testing split — train_test_assign","text":"named list containing training testing uid_ids.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/uids.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull UIDs from an object — uids","title":"Pull UIDs from an object — uids","text":"Pull UIDs object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/uids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull UIDs from an object — uids","text":"","code":"uids(x)"},{"path":"https://branchlab.github.io/metasnf/reference/uids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull UIDs from an object — uids","text":"x object extract UIDs .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/uids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull UIDs from an object — uids","text":"character vector UIDs.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_ari_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for ari_matrix class object — validate_ari_matrix","title":"Validator for ari_matrix class object — validate_ari_matrix","text":"Validator ari_matrix class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_ari_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for ari_matrix class object — validate_ari_matrix","text":"","code":"validate_ari_matrix(aml)"},{"path":"https://branchlab.github.io/metasnf/reference/validate_ari_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for ari_matrix class object — validate_ari_matrix","text":"aml ari_matrix-like matrix object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_ari_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for ari_matrix class object — validate_ari_matrix","text":"aml valid structure ari_matrix class object, returns input unchanged. Otherwise, raises error.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_clust_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for clust_fns_list class object — validate_clust_fns_list","title":"Validator for clust_fns_list class object — validate_clust_fns_list","text":"Validator clust_fns_list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_clust_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for clust_fns_list class object — validate_clust_fns_list","text":"","code":"validate_clust_fns_list(cfll)"},{"path":"https://branchlab.github.io/metasnf/reference/validate_clust_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for clust_fns_list class object — validate_clust_fns_list","text":"cfll clust_fns_list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_clust_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for clust_fns_list class object — validate_clust_fns_list","text":"cfll valid structure clust_fns_list class object, returns input unchanged. Otherwise, raises error.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for data_list class object — validate_data_list","title":"Validator for data_list class object — validate_data_list","text":"Validator data_list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for data_list class object — validate_data_list","text":"","code":"validate_data_list(dll)"},{"path":"https://branchlab.github.io/metasnf/reference/validate_data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for data_list class object — validate_data_list","text":"dll data list-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for data_list class object — validate_data_list","text":"dll valid structure data_list class object, returns input unchanged. Otherwise, raises error.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_dist_fns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for dist_fns_list class object — validate_dist_fns_list","title":"Validator for dist_fns_list class object — validate_dist_fns_list","text":"Validator dist_fns_list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_dist_fns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for dist_fns_list class object — validate_dist_fns_list","text":"","code":"validate_dist_fns_list(dfll)"},{"path":"https://branchlab.github.io/metasnf/reference/validate_dist_fns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for dist_fns_list class object — validate_dist_fns_list","text":"dfll distance metrics list-like list object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_dist_fns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for dist_fns_list class object — validate_dist_fns_list","text":"dfll valid structure dist_fns_list class object, returns input unchanged. Otherwise, raises error.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_ext_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for ext_solutions_df class object — validate_ext_solutions_df","title":"Validator for ext_solutions_df class object — validate_ext_solutions_df","text":"Validator ext_solutions_df class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_ext_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for ext_solutions_df class object — validate_ext_solutions_df","text":"","code":"validate_ext_solutions_df(ext_sol_dfl)"},{"path":"https://branchlab.github.io/metasnf/reference/validate_ext_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for ext_solutions_df class object — validate_ext_solutions_df","text":"ext_sol_dfl extended solutions data frame-like object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_ext_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for ext_solutions_df class object — validate_ext_solutions_df","text":"ext_sol_dfl valid structure object class ext_solutions_df, returns ext_sol_dfl. Otherwise, raises error.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_settings_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for settings_df class object — validate_settings_df","title":"Validator for settings_df class object — validate_settings_df","text":"Validator settings_df class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_settings_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for settings_df class object — validate_settings_df","text":"","code":"validate_settings_df(sdfl)"},{"path":"https://branchlab.github.io/metasnf/reference/validate_settings_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for settings_df class object — validate_settings_df","text":"sdfl settings data frame-like matrix object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_settings_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for settings_df class object — validate_settings_df","text":"sdfl valid structure settings_df class object, returns input unchanged. Otherwise, raises error.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_sim_mats_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for similarity_matrix_list class object — validate_sim_mats_list","title":"Validator for similarity_matrix_list class object — validate_sim_mats_list","text":"Validator similarity_matrix_list class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_sim_mats_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for similarity_matrix_list class object — validate_sim_mats_list","text":"","code":"validate_sim_mats_list(smll)"},{"path":"https://branchlab.github.io/metasnf/reference/validate_sim_mats_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for similarity_matrix_list class object — validate_sim_mats_list","text":"smll similarity matrix list-like object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_sim_mats_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for similarity_matrix_list class object — validate_sim_mats_list","text":"smll valid structure class similarity_matrix_list, returns smll. Otherwise, raises error.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_snf_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for snf_config class object — validate_snf_config","title":"Validator for snf_config class object — validate_snf_config","text":"Validator snf_config class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_snf_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for snf_config class object — validate_snf_config","text":"","code":"validate_snf_config(scl)"},{"path":"https://branchlab.github.io/metasnf/reference/validate_snf_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for snf_config class object — validate_snf_config","text":"scl SNF config-like list class object.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_snf_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for snf_config class object — validate_snf_config","text":"dll valid structure data_list class object, returns input unchanged. Otherwise, raises error.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_solutions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for solutions_df class object — validate_solutions_df","title":"Validator for solutions_df class object — validate_solutions_df","text":"Validator solutions_df class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_solutions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for solutions_df class object — validate_solutions_df","text":"","code":"validate_solutions_df(sol_dfl)"},{"path":"https://branchlab.github.io/metasnf/reference/validate_solutions_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for solutions_df class object — validate_solutions_df","text":"sol_dfl solutions data frame-like object validated converted solutions data frame.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_solutions_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for solutions_df class object — validate_solutions_df","text":"sol_dfl valid structure solutions_df class object, returns input unchanged. Otherwise, raises error.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for weights_matrix class object — validate_weights_matrix","title":"Validator for weights_matrix class object — validate_weights_matrix","text":"Validator weights_matrix class object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for weights_matrix class object — validate_weights_matrix","text":"","code":"validate_weights_matrix(wml)"},{"path":"https://branchlab.github.io/metasnf/reference/validate_weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for weights_matrix class object — validate_weights_matrix","text":"wml weights_matrix-like matrix object validated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/validate_weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for weights_matrix class object — validate_weights_matrix","text":"wml valid structure weights_matrix class object, returns input unchanged. Otherwise, raises error.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/var_manhattan_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Manhattan plot of feature-feature association p-values — var_manhattan_plot","title":"Manhattan plot of feature-feature association p-values — var_manhattan_plot","text":"Manhattan plot feature-feature association p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/var_manhattan_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manhattan plot of feature-feature association p-values — var_manhattan_plot","text":"","code":"var_manhattan_plot(   dl,   key_var,   neg_log_pval_thresh = 5,   threshold = NULL,   point_size = 5,   text_size = 20,   plot_title = NULL,   hide_x_labels = FALSE,   bonferroni_line = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/var_manhattan_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manhattan plot of feature-feature association p-values — var_manhattan_plot","text":"dl List data frames containing data information. key_var Feature association p-values features plotted. neg_log_pval_thresh Threshold negative log p-values. threshold p-value threshold plot dashed line . point_size Size points plot. text_size Size text plot. plot_title Title plot. hide_x_labels TRUE, hides x-axis labels. bonferroni_line TRUE, plots dashed black line Bonferroni-corrected equivalent p-value threshold.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/var_manhattan_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manhattan plot of feature-feature association p-values — var_manhattan_plot","text":"Manhattan plot (class \"gg\", \"ggplot\") showing association p-values features one key feature data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/var_manhattan_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manhattan plot of feature-feature association p-values — var_manhattan_plot","text":"","code":"dl <- data_list(     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(income, \"household_income\", \"demographics\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"unique_id\" ) #> ℹ 188 observations dropped due to incomplete data.  var_manhattan <- var_manhattan_plot(     dl,     key_var = \"household_income\",     plot_title = \"Correlation of Features with Household Income\",     text_size = 16,     neg_log_pval_thresh = 3,     threshold = 0.05 )"},{"path":"https://branchlab.github.io/metasnf/reference/weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a matrix to store feature weights — weights_matrix","title":"Generate a matrix to store feature weights — weights_matrix","text":"Function building weights matrix independently SNF config. weights matrix contains one row corresponding row settings data frame SNF config (one row resulting cluster solution) one column feature data list used clustering. Values weights matrix passed distance metrics functions conversion input data frames distance matrices. Typically, need use function directly. Instead, users provide weights matrix-building parameters snf_config() function.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a matrix to store feature weights — weights_matrix","text":"","code":"weights_matrix(dl = NULL, n_solutions = 1, weights_fill = \"ones\")"},{"path":"https://branchlab.github.io/metasnf/reference/weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a matrix to store feature weights — weights_matrix","text":"dl nested list input data data_list(). n_solutions Number rows generate template weights matrix . weights_fill String indicating populate generate rows . Can \"ones\" (default; fill matrix 1), \"uniform\" (fill matrix uniformly distributed random values), \"exponential\" (fill matrix exponentially distributed random values).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a matrix to store feature weights — weights_matrix","text":"wm properly formatted matrix containing columns features require weights rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/weights_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a matrix to store feature weights — weights_matrix","text":"","code":"input_dl <- data_list(     list(subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(income, \"income\", \"demographics\", \"continuous\"),     list(pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"unique_id\" ) #> ℹ 175 observations dropped due to incomplete data.  sc <- snf_config(input_dl, n_solutions = 5) #> ℹ No distance functions specified. Using defaults. #> ℹ No clustering functions specified. Using defaults.  wm <- weights_matrix(input_dl, n_solutions = 5, weights_fill = \"uniform\")  # updating an SNF config in parts sc$\"weights_matrix\" <- wm"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"improvements-2-1-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"metasnf 2.1.0","text":"calc_nmis now supports parallel processing, progress reported progressr batch_snf_subsamples re-written parallelize along subsamples rather cluster solutions, now uses progressr progress instead verbose cat statements speed parallelization test","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-data-2-1-0","dir":"Changelog","previous_headings":"","what":"New data","title":"metasnf 2.1.0","text":"New mock data objects format mock_(class name), e.g., mock_data_list mock_ext_solutions_df","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functions-2-1-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"metasnf 2.1.0","text":"Add several new S3 methods plot, rbind, str, summary, t, c, extraction, merge, assignment, type-coercion","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-2-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 2.1.0","text":"auto_plot output data frame doesn’t duplicate cluster column error catching: data list sub-item name checking improvement double transposing ext_solutions_df longer loses sim_mats_list attribute","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-2-1-0","dir":"Changelog","previous_headings":"","what":"Other","title":"metasnf 2.1.0","text":"Typo fixes Code formatting Computationally intensive examples now wrapped donttest rather commented observations(), summary_features(), features(), uids() marked internal","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-206","dir":"Changelog","previous_headings":"","what":"metasnf 2.0.6","title":"metasnf 2.0.6","text":"CRAN release: 2025-03-25","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-2-0-6","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 2.0.6","text":"fixed rbind classes solutions_df ext_solutions_df preserving class type contained weights_matrix","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"print-formatting-2-0-6","dir":"Changelog","previous_headings":"","what":"Print formatting","title":"metasnf 2.0.6","text":"printing solutions_df ext_solutions_df restricts output 10 line max default","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-2-0-6","dir":"Changelog","previous_headings":"","what":"Other","title":"metasnf 2.0.6","text":"update CRAN resubmission","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-2-0-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 2.0.5","text":"calc_aris (v2, v1 still fine) incorrectly excluded first observation ARI calculations. merge.data_list wasn’t properly integrating updated parameter names prevent solutions_df ext_solutions_df 0 rows use solution column mc_manhattan_plot() extended solutions data frame MC labels","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"code-formatting-2-0-5","dir":"Changelog","previous_headings":"","what":"Code formatting","title":"metasnf 2.0.5","text":"print.solutions_df title set print method weights matrix replace dl_1/dl_2 x&y consistency merge.data_list()","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functions-2-0-5","dir":"Changelog","previous_headings":"","what":"New functions","title":"metasnf 2.0.5","text":"added .list() dist_fns_list, clust_fns_list, data_list objects","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"performance-improvements-2-0-5","dir":"Changelog","previous_headings":"","what":"Performance improvements","title":"metasnf 2.0.5","text":"convert weights matrix regular matrix prior printing reduces print time last commit weights matrix rbinding faster treated matrix","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"print-formatting-2-0-5","dir":"Changelog","previous_headings":"","what":"Print formatting","title":"metasnf 2.0.5","text":"deprecated message generate_settings_matrix needed paste0 solutions data frame printing 10 rows default 10 rows print.solutions_df() misprinted number observations solutions data frame","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"oop-2-0-4","dir":"Changelog","previous_headings":"","what":"OOP","title":"metasnf 2.0.4","text":"merge_dls() superseded merge.data_lists()","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-2-0-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 2.0.4","text":"ext_solutions_df manipulation won’t drop summary_features features attributes estimate_nclust_given_graph resiliency floating point errors tryCatch statement eigengap quality assignment","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-203","dir":"Changelog","previous_headings":"","what":"metasnf 2.0.3","title":"metasnf 2.0.3","text":"bugfix: estimate_nclust_given_graph resiliency floating point errors tryCatch loop updating eigenvalue scaling added functions: added dplyr_row_slice() functions classes solutions_df ext_solutions_df","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"formatting-2-0-2","dir":"Changelog","previous_headings":"","what":"Formatting","title":"metasnf 2.0.2","text":"removed debugging dash lines extend_solutions()","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-2-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 2.0.1","text":"extend_solutions assigning feature types properly p-value calculations rbind.ext_solutions_df now takes ... parameter reset_indices parameter avoid error calls unnamed parameters. rbind.solutions_df now takes ... parameter reset_indices parameter avoid error call without named parameters. slicing snf_config object made weights matrix lose class","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-200","dir":"Changelog","previous_headings":"","what":"metasnf 2.0.0","title":"metasnf 2.0.0","text":"CRAN release: 2025-02-04","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"breaking-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"metasnf 2.0.0","text":"Extensive changes result transition making use R’s S3 OOP system.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"name-changes-and-new-classes-2-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Name changes and new classes","title":"metasnf 2.0.0","text":"data list (class list) -> (class data_list, list) solutions matrix (class data.frame) -> solutions data frame (class solutions_df, data.frame) extended solutions matrix (class data.frame) -> extended solutions data frame (class ext_solutions_df, data.frame) settings matrix -> settings data frame (class data.frame) -> (class ext_solutions_df, data.frame) distance metrics list (class list) -> distance functions list (class dist_fns_list, list) clustering algorithms list (class list) -> clustering functions list (class clust_fns_list, list) weights matrix (class matrix, array) -> (class weights_matrix, matrix, array)","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"function-changes-2-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Function changes","title":"metasnf 2.0.0","text":"generate_data_list() -> data_list() Functions related converting solutions matrix data frame cluster solutions (get_cluster_df(), get_clusters(), get_cluster_solutions()) now superseded custom transposition solutions_df class objects (.e., simply call t())","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"workflow-changes-2-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Workflow changes","title":"metasnf 2.0.0","text":"Functionality offered settings matrix, distance metrics list, clustering algorithms list, weights matrix, corresponding functions (generate_settings_matrix(), generate_distance_metrics_list(), generate_weights_matrix(), generate_clust_algs_list()) now superseded single function snf_config() snf_config class object produces Following derivation split_vector, either adjusted_rand_index_heatmap() shiny_annotator(), solutions_df ext_solutions_df class objects can annotated meta cluster labels using function label_meta_clusters(). necessary prior usage get_representative_solutions(). Functions convert non-data frame objects, like data list, data frame, replaced .data.frame() Requesting similarity matrices returned batch_snf longer changes output structure solutions data frame list solutions data frame similarity matrix list. Instead, similarity matrix list added solutions data frame attribute can extracted using function sim_mats_list().","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"improvements-2-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Improvements","title":"metasnf 2.0.0","text":"Significant speed improvement calculate_coclustering() function p-value heatmap now follows uni-color palette. Customized print() functions defined major metasnf objects. Examples added major metasnf functions.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-112","dir":"Changelog","previous_headings":"","what":"metasnf 1.1.2","title":"metasnf 1.1.2","text":"CRAN release: 2024-11-08 update settings matrix vignette avoid convergence error seeds","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-111","dir":"Changelog","previous_headings":"","what":"metasnf 1.1.1","title":"metasnf 1.1.1","text":"CRAN release: 2024-11-08 inclusion column bugfixes 1.1.0","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-110","dir":"Changelog","previous_headings":"","what":"metasnf 1.1.0","title":"metasnf 1.1.0","text":"Verbose parameter added printing functions. default set FALSE. CRAN compliant @return values documentation.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-100","dir":"Changelog","previous_headings":"","what":"metasnf 1.0.0","title":"metasnf 1.0.0","text":"Last update CRAN submission.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"metasnf 1.0.0","text":"Changing seed settings matrix generation deprecated. Please manually call set.seed prior generate_settings_matrix instead.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-1-0-0","dir":"Changelog","previous_headings":"","what":"Other","title":"metasnf 1.0.0","text":"Package size reduced downscaling vignette images","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fix-0-7-2","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"metasnf 0.7.2","text":"Function estimate_nclust_given_graph() occasionally yielded incorrect number cluster estimates result improper scaling metasnf v0.7.0. scaling corrected now.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"breaking-changes-0-7-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"metasnf 0.7.2","text":"Considerable changes made co-clustering workflow, including new heatmap density plot.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"possible-breaking-changes-0-7-1","dir":"Changelog","previous_headings":"","what":"Possible breaking changes","title":"metasnf 0.7.1","text":"Occasionally, spectral clustering results may yield n-cluster solution n differed number clusters requested parameter spectral clustering function . Now, spectral clustering functions provided metasnf updated report actual number clusters generated solution, rather number clusters requested","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"minor-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"metasnf 0.7.0","text":"warnings provided generating data list duplicate feature names warnings provided using mc_manhattan_plot() data list containing duplicate feature names mc_manhattan_plot() parameter rep_solution replaced accurate name extended_solutions_matrix (solutions matrix _pval columns)","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fix-0-7-0","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"metasnf 0.7.0","text":"SNFtool::estimateNumberOfClustersGivenGraph() occasionally error basis calculating eigenvectors (eigengap heuristic) Laplacian floating point values small. Adapted function estimate_nclust_given_graph() slightly scales Laplacian reduce risk encountering error (presumably without change resulting cluster number estimate)","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-6-8","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.6.8","text":"get_matrix_order arguments allowing users control distance metric agglomerative hierarchical clustering methods used sort matrices","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"minor-changes-0-6-7","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"metasnf 0.6.7","text":"consistent usage “feature” “variable” across documentation. New mock ABCD dataframes - like old ones, without “abcd_” prefix accurate “unique_id” UID column rather “patient”","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-6-6","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.6.6","text":"get_complete_uids quickly pulls UIDs observations complete data list dataframes","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fix-0-6-5","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"metasnf 0.6.5","text":"extend_solutions doesn’t crash multi-feature target lists","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"minor-changes-0-6-4","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"metasnf 0.6.4","text":"Warning message provided subjects dropped generate_data_list() New remove_missing parameter generate_data_list allowing subjects incomplete data remain data list","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-0-6-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 0.6.3","text":"ensure cluster variable treated factor autoplotting bugfix autoplots built tibbles rather dataframes","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"improvements-0-6-3","dir":"Changelog","previous_headings":"","what":"Improvements","title":"metasnf 0.6.3","text":"Added clarity lp_solutions_matrix error message training set subset full data list generate_data_list list elements now named components added heatmap parameters increase plotting flexibility","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-6-3","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.6.3","text":"added generic save_plot function option pass cluster_df directly auto_plot (useful label propagation) add merge_data_lists functionality horizontally merge data lists","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-0-6-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 0.6.2","text":"extend_solutions() longer crash data_list UID column non-first position. generate_data_list() enforces UID column first position dataframe.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-6-1","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.6.1","text":"auto_plot() automatically generate bar /jitter plots showing features data_list/target_list distributed across single cluster solution","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-6-0","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.6.0","text":"shiny_annotator() function can used identify indices meta clusters within adjusted_rand_index_heatmap adjusted_rand_index_heatmap() now split_vector parameter slice heatmap meta clusters rename_dl() can used rename features data_list manhattan_plot split var_manhattan_plot (key variable - variables), esm_manhattan_plot (cluster solutions extended solutions matrix variables), mc_manhattan_plot (like esm_manhattan_plot, meta-cluster level) get_representative_solutions extracts max-ARI solutions extended solutions matrix based split_vector containing meta cluster boundaries batch_nmi calculates NMI scores (see https://branchlab.github.io/metasnf/articles/nmi_scores.html) extend_solutions calculate p-value summary measures (min/max/mean) data_list passed target_list parameter, also accept calculate p-values data_list passed data_list parameter heatmap function adjusted_rand_index_heatmap assoc_pval_heatmap updated parameters improve ease use flexibility (including easier colour control)","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"deprecated-functions-0-6-0","dir":"Changelog","previous_headings":"","what":"Deprecated functions","title":"metasnf 0.6.0","text":"get_clustered_subs removed (thing get_cluster_df) get_cluster_pval deprecated calc_assoc_pval functions related target_lists specifically deprecated favour simply using generate_data_list() corresponding functions","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"name-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Name changes","title":"metasnf 0.6.0","text":"remove_signal renamed linear_adjust better reflect function summarize_distance_metrics_list shortened summarize_dml correlation_pval_heatmap renamed assoc_pval_heatmap calc_om_aris renamed calc_aris","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-vignettes-0-6-0","dir":"Changelog","previous_headings":"","what":"New vignettes","title":"metasnf 0.6.0","text":"NMI scores: https://branchlab.github.io/metasnf/articles/nmi_scores.html Imputations: https://branchlab.github.io/metasnf/articles/imputations.html","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"metasnf 0.6.0","text":"Vignettes updated Warnings raised spectral clustering generate cluster solution matching number clusters requested Chi-squared extend_solutions p-value calculation warnings now suppressed","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"breaking-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"metasnf 0.5.0","text":"variables values referencing p-values rephrased end _pval instead mix p_val, pval, p. Removal deprecated functions pval_select, p_val_select, top_oms_per_cluster, check_subj_orders_for_lp, get_p, chi_sq_pval, Function pval_summaries, calculate min/max/mean p-values, replaced summarize_pvals train_test_assign now provides results named list subject vectors instead data.frame. keep_split function removed accordingly.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"metasnf 0.5.0","text":"sort_subjects parameter added generate_data_list allow sorting subjects data_list","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-046","dir":"Changelog","previous_headings":"","what":"metasnf 0.4.6","title":"metasnf 0.4.6","text":"fix bug extend_solutions incorrectly assigns p-values variable columns grep (substring instead exact match)","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-045","dir":"Changelog","previous_headings":"","what":"metasnf 0.4.5","title":"metasnf 0.4.5","text":"extend_solutions can now also parallelized (see ?extend_solutions) remove_signal function sig_digs parameter can used restrict many significant figures returned resulting residuals","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-044","dir":"Changelog","previous_headings":"","what":"metasnf 0.4.4","title":"metasnf 0.4.4","text":"calc_om_aris now MUCH faster removing excessive calls .numeric enabling parallel processing future.apply. Thanks idea, Alper.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-043","dir":"Changelog","previous_headings":"","what":"metasnf 0.4.3","title":"metasnf 0.4.3","text":"Reformatting extend_solutions better handle extreme p-values (e.g. infinity) Replacement p_val_select pval_select can also return negative-log p-values","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-0-4-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 0.4.2","text":"generate_data_list correctly errors components partially named (resolves https://github.com/BRANCHlab/metasnf/issues/10)","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"breaking-changes-0-4-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"metasnf 0.4.1","text":"lp_row function replaced lp_solutions_matrix. new function order agnostic: full data lists can constructed without restriction training testing set subjects sorted. Subjects present provided solutions matrix propagate assumed training subjects.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-4-1","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.4.1","text":"calc_om_aris now progress parameter. set true used conjunction progressr::with_progress(), progress bar shown calculations. Learn ?calc_om_aris.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 0.4.1","text":"grepl instead grep used extend_solutions reduce errors chi-squared warning occurs","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-changes-0-4-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"metasnf 0.4.1","text":"vignette specifically label propagation added Full removal several previously deprecated functions Minor source code reformatting","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-4-0","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.4.0","text":"Parallel processing now available! Check vignette : https://branchlab.github.io/metasnf/articles/parallel_processing.html","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"breaking-changes-0-3-3","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"metasnf 0.3.3","text":"input_wt domain_wt removed settings_matrix rest package - weighting level longer planned. result altered settings matrices, superficially - columns “input_wt” “domain_wt” missing, effect SNF prior patch anyway.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-032","dir":"Changelog","previous_headings":"","what":"metasnf 0.3.2","title":"metasnf 0.3.2","text":"keep_split preserve observations assigned split present dataframe split. Instead removed, observations NA values.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 0.3.1","text":"fixed fraction_clustered_together crashing cluster assigned single observation fixed fraction_clustered_together running due bracket typo evaluating length data_list","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-3-1","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.3.1","text":"correlation_pval_heatmap function can significance stars disabled significance_stars parameter","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-changes-0-3-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"metasnf 0.3.1","text":"pkgdown site now google site verification code","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"metasnf 0.3.0","text":"original SNFtool function estimateNumberOfClustersGivenGraph used point without specifying parameter NUMC. Consequently, final similarity matrices clustered default methods (spectral clustering based eigen-gap rotation cost heuristics) capable resulting 5 clusters. default functions updated span 2 clusters 10 clusters. Users likely see different clustering results result change. replicate behaviour default spectral clustering prior v0.3.0, users copy following code prior batch_snf command: Added “workspace=2e7” parameter fisher_exact_pval function avoid “FEXACT” error (like https://github.com/Lagkouvardos/Rhea/issues/17). Impact results expected negligible.","code":"clust_algs_list <- generate_clust_algs_list(     \"spectral_eigen\" = spectral_eigen_classic,     \"spectral_rot\" = spectral_rot_classic )  # Adapt below as necessary solutions_matrix <- batch_snf(     data_list,     settings_matrix,     clust_algs_list = clust_algs_list )"},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-3-0","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.3.0","text":"Function remove_signal() enables correcting data_list linearly confounders / unwanted signal. Vignette available: https://branchlab.github.io/metasnf/articles/confounders.html. batch_snf() new parameter automatic_standard_normalize switch default numeric distance measures (euclidean) standard normalized variants.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"metasnf 0.3.0","text":"Added NEWS.md file track changes package.","code":""}]
