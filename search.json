[{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"load-the-library-and-data-into-the-r-environment","dir":"Articles","previous_headings":"Data set-up and pre-processing","what":"1. Load the library and data into the R environment","title":"A Less Simple Example","text":"data loaded R environment following format: data one multiple data.frame objects data wide form (one row per patient) dataframe one column uniquely identifies patient row data fine missing data stage. package comes mock dataframes based real data Adolescent Brain Cognitive Development study: abcd_anxiety (anxiety scores CBCL) abcd_depress (depression scores CBCL) abcd_cort_t (cortical thicknesses) abcd_cort_sa (cortical surface areas mm^2) abcd_subc_v (subcortical volumes mm^3) abcd_h_income (household income 1-3 scale) abcd_pubertal (pubertal status 1-5 scale) ’s cortical thickness data looks like: first column “patient” unique identifier (UID) subjects data. ’s household income data: Putting everything list help us get quicker summaries data. data missing values dataframes number participants.","code":"library(metasnf)  class(abcd_cort_t) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"  dim(abcd_cort_t) #> [1] 188 152  str(abcd_cort_t[1:5, 1:5]) #> Classes 'tbl_df', 'tbl' and 'data.frame':    5 obs. of  5 variables: #>  $ patient : chr  \"NDAR_INV0567T2Y9\" \"NDAR_INV0GLZNC2W\" \"NDAR_INV0IZ157F8\" \"NDAR_INV0J4PYA5F\" ... #>  $ mrisdp_1: num  2.6 2.62 2.62 2.6 2.53 #>  $ mrisdp_2: num  2.49 2.85 2.29 2.67 2.76 #>  $ mrisdp_3: num  2.8 2.78 2.53 2.68 2.83 #>  $ mrisdp_4: num  2.95 2.85 2.96 2.94 2.99  abcd_cort_t[1:5, 1:5] #>            patient mrisdp_1 mrisdp_2 mrisdp_3 mrisdp_4 #> 1 NDAR_INV0567T2Y9    2.601    2.487    2.801    2.954 #> 2 NDAR_INV0GLZNC2W    2.619    2.851    2.784    2.846 #> 3 NDAR_INV0IZ157F8    2.621    2.295    2.530    2.961 #> 4 NDAR_INV0J4PYA5F    2.599    2.670    2.676    2.938 #> 5 NDAR_INV0OYE291Q    2.526    2.761    2.829    2.986 dim(abcd_h_income) #> [1] 275   2  str(abcd_h_income[1:5, ]) #> Classes 'tbl_df', 'tbl' and 'data.frame':    5 obs. of  2 variables: #>  $ patient         : chr  \"NDAR_INV0567T2Y9\" \"NDAR_INV0GLZNC2W\" \"NDAR_INV0IZ157F8\" \"NDAR_INV0J4PYA5F\" ... #>  $ household_income: num  3 NA 1 2 1  abcd_h_income[1:5, ] #>            patient household_income #> 1 NDAR_INV0567T2Y9                3 #> 2 NDAR_INV0GLZNC2W               NA #> 3 NDAR_INV0IZ157F8                1 #> 4 NDAR_INV0J4PYA5F                2 #> 5 NDAR_INV0OYE291Q                1 abcd_data <- list(     abcd_anxiety,     abcd_depress,     abcd_cort_t,     abcd_cort_sa,     abcd_subc_v,     abcd_h_income,     abcd_pubertal )  # The number of rows in each dataframe: lapply(abcd_data, dim) #> [[1]] #> [1] 275   2 #>  #> [[2]] #> [1] 275   2 #>  #> [[3]] #> [1] 188 152 #>  #> [[4]] #> [1] 188 152 #>  #> [[5]] #> [1] 174  31 #>  #> [[6]] #> [1] 275   2 #>  #> [[7]] #> [1] 275   2  # Whether or not each dataframe has missing values: lapply(abcd_data,     function(x) {         any(is.na(x))     } ) #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] FALSE #>  #> [[4]] #> [1] FALSE #>  #> [[5]] #> [1] FALSE #>  #> [[6]] #> [1] TRUE #>  #> [[7]] #> [1] TRUE"},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"generating-the-data-list","dir":"Articles","previous_headings":"","what":"Generating the data list","title":"A Less Simple Example","text":"data_list structure structured list dataframes (like one already created), additional metadata dataframe. contain input dataframes want directly use inputs clustering. data available us, may working context anxiety depression data especially important patient outcomes, want know can find subtypes using rest data still good job separating patients anxiety depression scores. ’ll set aside anxiety depression now use rest data inputs subtyping, means loading data_list. process removes patients complete data across provided input dataframes. ’d like keep track information, can set “return_missing” parameter TRUE receive list containing data_list well removed patients: can get summary constructed data_list summarize_dl function: input dataframe now 100 subjects complete data.","code":"# Note that you do not need to explicitly name every single named element # (data = ..., name = ..., etc.) data_list <- generate_data_list(     list(         data = abcd_cort_t,         name = \"cortical_thickness\",         domain = \"neuroimaging\",         type = \"continuous\"     ),     list(         data = abcd_cort_sa,         name = \"cortical_surface_area\",         domain = \"neuroimaging\",         type = \"continuous\"     ),     list(         data = abcd_subc_v,         name = \"subcortical_volume\",         domain = \"neuroimaging\",         type = \"continuous\"     ),     list(         data = abcd_h_income,         name = \"household_income\",         domain = \"demographics\",         type = \"continuous\"     ),     list(         data = abcd_pubertal,         name = \"pubertal_status\",         domain = \"demographics\",         type = \"continuous\"     ),     uid = \"patient\" ) generate_dl_results <- generate_data_list(     list(         data = abcd_cort_t,         name = \"cortical_thickness\",         domain = \"neuroimaging\",         type = \"continuous\"     ),     list(         data = abcd_cort_sa,         name = \"cortical_surface_area\",         domain = \"neuroimaging\",         type = \"continuous\"     ),     list(         data = abcd_subc_v,         name = \"subcortical_volume\",         domain = \"neuroimaging\",         type = \"continuous\"     ),     list(         data = abcd_h_income,         name = \"household_income\",         domain = \"demographics\",         type = \"continuous\"     ),     list(         data = abcd_pubertal,         name = \"pubertal_status\",         domain = \"demographics\",         type = \"continuous\"     ),     uid = \"patient\",     return_missing = TRUE )  data_list <- generate_dl_results$\"data_list\" removed_subjects <- generate_dl_results$\"removed_subjects\"  removed_subjects[1:10] #>  [1] \"NDAR_INV0GLZNC2W\" \"NDAR_INV0OYE291Q\" \"NDAR_INV0SM1JLXQ\" \"NDAR_INV0Z87UJDR\" #>  [5] \"NDAR_INV1PK0JH8Z\" \"NDAR_INV1R56TIVS\" \"NDAR_INV1RX7QO0L\" \"NDAR_INV2DLP49QK\" #>  [9] \"NDAR_INV2EGX5UMV\" \"NDAR_INV2UD95T0K\" summarize_dl(data_list) #>                    name       type       domain length width #> 1    cortical_thickness continuous neuroimaging    100   152 #> 2 cortical_surface_area continuous neuroimaging    100   152 #> 3    subcortical_volume continuous neuroimaging    100    31 #> 4      household_income continuous demographics    100     2 #> 5       pubertal_status continuous demographics    100     2"},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"generating-the-settings-matrix","dir":"Articles","previous_headings":"","what":"Generating the settings matrix","title":"A Less Simple Example","text":"settings_matrix stores information settings ’d like use SNF runs. Calling generate_settings_matrix function specified number rows automatically build randomly populated settings_matrix. columns : row_id: Integer keep track row alpha - hyperparameter SNF (variable influences subtyping process) k - hyperparameter SNF t - hyperparameter SNF snf_scheme - specific way input data gets collapsed final fused network (discussed SNF schemes vignette) clust_alg - clustering algorithm applied final fused network produced SNF *_dist - distance metric used different types data (discussed distance metrics vignette) inc_* - binary columns indicating whether input dataframe included (1) excluded (0) corresponding SNF run (discussed random dropout vignette) Without specifying additional parameters, generate_settings_matrix randomly populates columns ensures generated rows identical. ’s important now matrix (technically dataframe R environment) contains several rows outline different reasonable way raw data converted patient subtypes. customization settings_matrix enable access broadest possible space reasonable cluster solutions data can produce using SNF ideally get closer generalizable useful solution context. settings_matrix customization can found settings matrix vignette Setting optional seed parameter (affect seed entire R session) ensures settings matrix generated time run code. end random set settings , nothing wrong manually altering settings matrix suit needs. example, wanted know much difference one input dataframe made, ensure half rows included input dataframe half didn’t. can also add random rows already existing dataframe using add_settings_matrix_rows function (discussed vignette).","code":"settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     min_k = 20,     max_k = 50,     seed = 42 ) #> [1] \"The global seed has been changed!\"  settings_matrix[1:5, ] #>   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist #> 1      1   0.5 29 20          2         1         1         1        1        1 #> 2      2   0.4 26 20          1         1         1         1        1        1 #> 3      3   0.3 44 20          2         2         1         1        1        1 #> 4      4   0.3 43 20          1         1         1         1        1        1 #> 5      5   0.5 29 20          2         2         1         1        1        1 #>   mix_dist input_wt domain_wt inc_cortical_thickness inc_cortical_surface_area #> 1        1        1         1                      1                         0 #> 2        1        1         1                      1                         1 #> 3        1        1         1                      1                         0 #> 4        1        1         1                      1                         1 #> 5        1        1         1                      1                         1 #>   inc_subcortical_volume inc_household_income inc_pubertal_status #> 1                      1                    0                   1 #> 2                      1                    1                   1 #> 3                      0                    1                   1 #> 4                      0                    1                   1 #> 5                      1                    1                   1"},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"running-snf-for-all-the-rows-in-the-settings-matrix","dir":"Articles","previous_headings":"","what":"Running SNF for all the rows in the settings matrix","title":"A Less Simple Example","text":"batch_snf function integrates data data_list using sets settings contained settings_matrix. resulting structure solutions_matrix extension settings_matrix contains columns specifying cluster subject assigned corresponding settings_matrix row. goes like time. Just like , clustering done! can pull clustering results row using get_cluster_df function: Note: Parallel processing available older release package (v0.2.0) integrated latest release shortly. See “processes” parameter ?batch_snf.","code":"solutions_matrix <- batch_snf(data_list, settings_matrix) #> [1] \"Row: 1/20 | Time remaining: 4 seconds\" #> [1] \"Row: 2/20 | Time remaining: 4 seconds\" #> [1] \"Row: 3/20 | Time remaining: 4 seconds\" #> [1] \"Row: 4/20 | Time remaining: 4 seconds\" #> [1] \"Row: 5/20 | Time remaining: 3 seconds\" #> [1] \"Row: 6/20 | Time remaining: 3 seconds\" #> [1] \"Row: 7/20 | Time remaining: 3 seconds\" #> [1] \"Row: 8/20 | Time remaining: 3 seconds\" #> [1] \"Row: 9/20 | Time remaining: 3 seconds\" #> [1] \"Row: 10/20 | Time remaining: 2 seconds\" #> [1] \"Row: 11/20 | Time remaining: 2 seconds\" #> [1] \"Row: 12/20 | Time remaining: 2 seconds\" #> [1] \"Row: 13/20 | Time remaining: 2 seconds\" #> [1] \"Row: 14/20 | Time remaining: 1 seconds\" #> [1] \"Row: 15/20 | Time remaining: 1 seconds\" #> [1] \"Row: 16/20 | Time remaining: 1 seconds\" #> [1] \"Row: 17/20 | Time remaining: 1 seconds\" #> [1] \"Row: 18/20 | Time remaining: 0 seconds\" #> [1] \"Row: 19/20 | Time remaining: 0 seconds\" #> [1] \"Row: 20/20 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 5 seconds.\"  colnames(solutions_matrix)[1:30] #>  [1] \"row_id\"                    \"alpha\"                     #>  [3] \"k\"                         \"t\"                         #>  [5] \"snf_scheme\"                \"clust_alg\"                 #>  [7] \"cont_dist\"                 \"disc_dist\"                 #>  [9] \"ord_dist\"                  \"cat_dist\"                  #> [11] \"mix_dist\"                  \"input_wt\"                  #> [13] \"domain_wt\"                 \"inc_cortical_thickness\"    #> [15] \"inc_cortical_surface_area\" \"inc_subcortical_volume\"    #> [17] \"inc_household_income\"      \"inc_pubertal_status\"       #> [19] \"nclust\"                    \"subject_NDAR_INV0567T2Y9\"  #> [21] \"subject_NDAR_INV0IZ157F8\"  \"subject_NDAR_INV0J4PYA5F\"  #> [23] \"subject_NDAR_INV10OMKVLE\"  \"subject_NDAR_INV15FPCW4O\"  #> [25] \"subject_NDAR_INV19NB4RJK\"  \"subject_NDAR_INV1HLGR738\"  #> [27] \"subject_NDAR_INV1KR0EZFU\"  \"subject_NDAR_INV1L3Y9EOP\"  #> [29] \"subject_NDAR_INV1TCP5GNM\"  \"subject_NDAR_INV1ZHRDJ6B\" cluster_solutions <- get_cluster_solutions(solutions_matrix)  head(cluster_solutions) #>                 subjectkey 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #> 1 subject_NDAR_INV0567T2Y9 1 2 1 2 1 1 1 2 2  2  5  1  1  2  1  2  1  1  1  1 #> 2 subject_NDAR_INV0IZ157F8 2 1 1 1 2 2 2 5 1  1  3  3  2  1  1  1  1  2  2  3 #> 3 subject_NDAR_INV0J4PYA5F 1 2 1 2 2 2 3 4 2  3  2  2  2  2  2  2  2  3  2  2 #> 4 subject_NDAR_INV10OMKVLE 1 1 3 1 2 2 2 1 1  1  5  3  2  1  1  1  1  2  2  3 #> 5 subject_NDAR_INV15FPCW4O 1 2 4 2 2 2 2 1 2  1  2  3  2  2  2  2  2  2  2  2 #> 6 subject_NDAR_INV19NB4RJK 1 2 3 2 2 2 2 3 2  4  3  3  2  2  2  2  1  2  2  3"},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"picking-a-solution","dir":"Articles","previous_headings":"","what":"Picking a solution","title":"A Less Simple Example","text":"Now access 20 different clustering solutions, ’ll need find way pick favourite (). case, plotting running stats manually solutions might reasonable way determine ones like . number solutions generated goes hundreds (thousands), ’re going need automated approaches. different tools can use try pick solution best purposes.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"examining-meta-clusters","dir":"Articles","previous_headings":"Picking a solution","what":"1: Examining “meta clusters”","title":"A Less Simple Example","text":"approach introduced original meta clustering paper. good approach use can’t quantitatively describe makes one cluster solution better another, can expert compare two solutions “intuit” two desirable. idea cluster clustering solutions arrive small number qualitatively different solutions. , user can manually pick representative solutions evaluations . first step calculate adjusted Rand index (ARI) pair cluster solutions. metric tells us similar solutions , thereby allowing us find clusters cluster solutions. can visualize resulting inter-cluster similarities heatmap: can optionally save heatmap specifying path save parameter (e.g., adjusted_rand_index_heatmap(solutions_matrix_aris, save = \"./adjusted_rand_index_heatmap.png\")). . clustering solutions along rows columns figure, cells intersection two solutions show similar (big ARI) solutions . diagonals always red, representing maximum value 1, show similarity clustering solution . Agglomerative hierarchical clustering applied solutions default (thank , pheatmap package) orders clustering solutions exactly line order clustering solutions present settings matrix. see something interesting heatmap, may curious know corresponds settings settings matrix. First, extract ordering rows obtained clustering cluster solutions: order just vector numbers… … can passed settings_matrix_heatmap function: heatmap rescales columns settings_matrix maximum value 1. purpose re-ordering settings matrix way see associations exist certain settings values pairwise cluster solution similarities. Maybe ’ll see something interesting!","code":"solutions_matrix_aris <- calc_om_aris(solutions_matrix) #> [1] \"Please wait - this may take a minute.\" adjusted_rand_index_heatmap(solutions_matrix_aris) meta_cluster_order <- get_heatmap_order(solutions_matrix_aris) meta_cluster_order #>  [1]  2  9  4 14 17 15 16 10  1  8  5 19  6 13 12  7 18  3 11 20 settings_matrix_heatmap(settings_matrix, order = meta_cluster_order)"},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"quality-measures","dir":"Articles","previous_headings":"Picking a solution","what":"2. Quality measures","title":"A Less Simple Example","text":"Quality metrics another useful heuristic goodness cluster don’t require contextualization results domain may used . r-package enables measures silhouette scores, Dunn indices, Davies-Bouldin indices. calculate values, ’ll need cluster results also final fused network (similarity matrices produced SNF) clusters came . similarity matrices can collected batch_snf using return_similarity_matrices parameter: time, output batch_snf list. first element list single solutions_matrix, like usually get. second element yet another list containing one final fused network (AKA similarity matrix / similarity matrix) per SNF run. Using two lists, can calculate mentioned quality metrics: first function wrapper around cluster::silhouette second third come clv package. clv isn’t set mandatory part installation, ’ll ned install calculate two metrics. original documentation functions can helpful interpreting working : cluster::silhouette documentation clv::clv.Dunn documentation clv::clv.Davies.Bouldin documentation","code":"batch_snf_results <- batch_snf(     data_list,     settings_matrix,     return_similarity_matrices = TRUE ) #> [1] \"Row: 1/20 | Time remaining: 3 seconds\" #> [1] \"Row: 2/20 | Time remaining: 4 seconds\" #> [1] \"Row: 3/20 | Time remaining: 3 seconds\" #> [1] \"Row: 4/20 | Time remaining: 3 seconds\" #> [1] \"Row: 5/20 | Time remaining: 3 seconds\" #> [1] \"Row: 6/20 | Time remaining: 3 seconds\" #> [1] \"Row: 7/20 | Time remaining: 3 seconds\" #> [1] \"Row: 8/20 | Time remaining: 3 seconds\" #> [1] \"Row: 9/20 | Time remaining: 2 seconds\" #> [1] \"Row: 10/20 | Time remaining: 2 seconds\" #> [1] \"Row: 11/20 | Time remaining: 2 seconds\" #> [1] \"Row: 12/20 | Time remaining: 2 seconds\" #> [1] \"Row: 13/20 | Time remaining: 2 seconds\" #> [1] \"Row: 14/20 | Time remaining: 1 seconds\" #> [1] \"Row: 15/20 | Time remaining: 1 seconds\" #> [1] \"Row: 16/20 | Time remaining: 1 seconds\" #> [1] \"Row: 17/20 | Time remaining: 1 seconds\" #> [1] \"Row: 18/20 | Time remaining: 1 seconds\" #> [1] \"Row: 19/20 | Time remaining: 0 seconds\" #> [1] \"Row: 20/20 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 5 seconds.\"  solutions_matrix <- batch_snf_results$\"solutions_matrix\" similarity_matrices <- batch_snf_results$\"similarity_matrices\" silhouette_scores <- calculate_silhouettes(solutions_matrix, similarity_matrices)  dunn_indices <- calculate_dunn_indices(solutions_matrix, similarity_matrices)  db_indices <- calculate_db_indices(solutions_matrix, similarity_matrices)"},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"stability-measures","dir":"Articles","previous_headings":"Picking a solution","what":"3. Stability measures","title":"A Less Simple Example","text":"r-package offers tools evaluate two different measures stability: Pairwise adjusted Rand indices (across resamplings clustering, average, similar every pair solutions according adjusted Rand index?) Fraction clustered together (average fraction times patients clustered together full results clustered together resampled results?) calculate either , ’ll need first generate subsamples data_list. data_list_subsamples list now contains 30 smaller subsamples original data_list. stability calculations: warned, second function especially extremely slow. number patients number solutions ’re evaluating grows, functions can get pretty slow. Consider using eliminating solutions certainly interested characterizing.","code":"data_list_subsamples <- subsample_data_list(     data_list,     n_subsamples = 30, # calculate 30 subsamples     subsample_fraction = 0.8 # for each subsample, use random 80% of patients ) pairwise_aris <- subsample_pairwise_aris(     data_list_subsamples,     settings_matrix )  fraction_together <- fraction_clustered_together(     data_list_subsamples,     settings_matrix,     solutions_matrix )"},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"evaluating-separation-across-target-variables-of-importance","dir":"Articles","previous_headings":"Picking a solution","what":"4. Evaluating separation across “target variables” of importance","title":"A Less Simple Example","text":"Warning: approach can easily result overfitting data producing clustering results generalize poorly subjects outside dataset. Consider setting aside data validate results avoid issue. can specify metric objective function may tell useful clustering solution purposes advance, makes cluster selection process much less arbitrary. many ways go , package offers one way target_list structure. target_list contains dataframes can examine clustering results linear regression (continuous data), ordinal regression (ordinal data), Chi-squared test (categorical data). target_list like data_list, without domain attribute. time, dataframe used build target_list must single-feature. Just like generating initial data_list, need specify name column provided dataframes originally used uniquely identify different observations uid parameter. next extend solutions_matrix p-values regressing target_list features onto generated clusters. just want p-values: heatmap visualizing : p-values hold real meaning traditional hypothesis-testing context, reasonable proxies magnitude effect size / separation clusters across variables question. , just tool find clustering solutions well-separated according outcome measures ’ve specified. Finding cluster solution like similar supervised learning approach, optimization method just random sampling. risk overfitting data approach considerable, make sure rigorous external validation reporting findings. recommend using label propagation (provided SNFtool package groupPredict function) validation: take top clustering solutions found training data, assign predicted clusters held test subjects, characterize test subjects see well clustering solution seemed worked.","code":"target_list <- generate_target_list(     list(abcd_anxiety, \"anxiety\", \"ordinal\"),     list(abcd_depress, \"depressed\", \"ordinal\"),     uid = \"patient\" )  summarize_target_list(target_list) #>        name    type length width #> 1   anxiety ordinal    275     2 #> 2 depressed ordinal    275     2 extended_solutions_matrix <- extend_solutions(solutions_matrix, target_list)  colnames(extended_solutions_matrix)[1:25] #>  [1] \"row_id\"                    \"alpha\"                     #>  [3] \"k\"                         \"t\"                         #>  [5] \"snf_scheme\"                \"clust_alg\"                 #>  [7] \"cont_dist\"                 \"disc_dist\"                 #>  [9] \"ord_dist\"                  \"cat_dist\"                  #> [11] \"mix_dist\"                  \"input_wt\"                  #> [13] \"domain_wt\"                 \"inc_cortical_thickness\"    #> [15] \"inc_cortical_surface_area\" \"inc_subcortical_volume\"    #> [17] \"inc_household_income\"      \"inc_pubertal_status\"       #> [19] \"nclust\"                    \"subject_NDAR_INV0567T2Y9\"  #> [21] \"subject_NDAR_INV0IZ157F8\"  \"subject_NDAR_INV0J4PYA5F\"  #> [23] \"subject_NDAR_INV10OMKVLE\"  \"subject_NDAR_INV15FPCW4O\"  #> [25] \"subject_NDAR_INV19NB4RJK\"  # Looking at the newly added columns head(no_subs(extended_solutions_matrix)) #>   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist #> 1      1   0.5 29 20          2         1         1         1        1        1 #> 2      2   0.4 26 20          1         1         1         1        1        1 #> 3      3   0.3 44 20          2         2         1         1        1        1 #> 4      4   0.3 43 20          1         1         1         1        1        1 #> 5      5   0.5 29 20          2         2         1         1        1        1 #> 6      6   0.4 26 20          2         1         1         1        1        1 #>   mix_dist input_wt domain_wt inc_cortical_thickness inc_cortical_surface_area #> 1        1        1         1                      1                         0 #> 2        1        1         1                      1                         1 #> 3        1        1         1                      1                         0 #> 4        1        1         1                      1                         1 #> 5        1        1         1                      1                         1 #> 6        1        1         1                      1                         1 #>   inc_subcortical_volume inc_household_income inc_pubertal_status nclust #> 1                      1                    0                   1      2 #> 2                      1                    1                   1      2 #> 3                      0                    1                   1      4 #> 4                      0                    1                   1      2 #> 5                      1                    1                   1      2 #> 6                      1                    1                   1      2 #>    cbcl_anxiety_r_p   cbcl_depress_r_p  min_p_val mean_p_val #> 1 0.758497782121108  0.253657581105355 0.25365758  0.5060777 #> 2 0.436382083446635 0.0851033924288317 0.08510339  0.2607427 #> 3  0.66671684891662  0.885314469318939 0.66671685  0.7760157 #> 4 0.672455644238922  0.863299444565211 0.67245564  0.7678775 #> 5 0.530010297592184 0.0899804994296201 0.08998050  0.3099954 #> 6 0.677526005779245  0.127648264212471 0.12764826  0.4025871 target_pvals <- p_val_select(extended_solutions_matrix)  head(target_pvals) #>   row_id cbcl_anxiety_r_p cbcl_depress_r_p #> 1      1        0.7584978       0.25365758 #> 2      2        0.4363821       0.08510339 #> 3      3        0.6667168       0.88531447 #> 4      4        0.6724556       0.86329944 #> 5      5        0.5300103       0.08998050 #> 6      6        0.6775260       0.12764826 pvals_heatmap(target_pvals, order = meta_cluster_order)"},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"validating-results-with-label-propagation","dir":"Articles","previous_headings":"","what":"Validating results with label propagation","title":"A Less Simple Example","text":"’s quick step complete procedure, beginning, label propagation validate findings. metasnf package comes equipped function training/testing split :) Note, label propagation workflow, maintaining consistent ordering train test subjects across dataframes particularly important. ensure full data list constructed order compatible training testing splits made , can either specify train_subjects test_subjects parameters , provide assigned_splits output train_test_assign function. , wanted, see clustering solutions propagate test set, mean reusing test set removing protection overfitting conferred procedure. ’s now! questions, comments, suggestions, bugs, etc. feel free post issue https://github.com/BRANCHlab/metasnf.","code":"# All the subjects present in all dataframes with no NAs all_subjects <- data_list[[1]]$\"data\"$\"subjectkey\"  # Remove the \"subject_\" prefix to allow merges with the original data all_subjects <- gsub(\"subject_\", \"\", all_subjects)  # Dataframe assigning 80% of subjects to train and 20% to test assigned_splits <- train_test_assign(train_frac = 0.8, subjects = all_subjects)  # Partition a training set train_abcd_cort_t <- keep_split(abcd_cort_t, assigned_splits, \"train\", uid = \"patient\") train_abcd_cort_sa <- keep_split(abcd_cort_sa, assigned_splits, \"train\", uid = \"patient\") train_abcd_subc_v <- keep_split(abcd_subc_v, assigned_splits, \"train\", uid = \"patient\") train_abcd_h_income <- keep_split(abcd_h_income, assigned_splits, \"train\", uid = \"patient\") train_abcd_pubertal <- keep_split(abcd_pubertal, assigned_splits, \"train\", uid = \"patient\") train_abcd_anxiety <- keep_split(abcd_anxiety, assigned_splits, \"train\", uid = \"patient\") train_abcd_depress <- keep_split(abcd_depress, assigned_splits, \"train\", uid = \"patient\")  # Partition a test set test_abcd_cort_t <- keep_split(abcd_cort_t, assigned_splits, \"test\", uid = \"patient\") test_abcd_cort_sa <- keep_split(abcd_cort_sa, assigned_splits, \"test\", uid = \"patient\") test_abcd_subc_v <- keep_split(abcd_subc_v, assigned_splits, \"test\", uid = \"patient\") test_abcd_h_income <- keep_split(abcd_h_income, assigned_splits, \"test\", uid = \"patient\") test_abcd_pubertal <- keep_split(abcd_pubertal, assigned_splits, \"test\", uid = \"patient\") test_abcd_anxiety <- keep_split(abcd_anxiety, assigned_splits, \"test\", uid = \"patient\") test_abcd_depress <- keep_split(abcd_depress, assigned_splits, \"test\", uid = \"patient\")  # Construct the data lists train_data_list <- generate_data_list(     list(train_abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(train_abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(train_abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(train_abcd_h_income, \"household_income\", \"demographics\", \"continuous\"),     list(train_abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\" )  test_data_list <- generate_data_list(     list(test_abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(test_abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(test_abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(test_abcd_h_income, \"household_income\", \"demographics\", \"continuous\"),     list(test_abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\" ) full_data_list <- generate_data_list(     list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(abcd_h_income, \"household_income\", \"demographics\", \"continuous\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\",     assigned_splits = assigned_splits )  # Construct the target lists train_target_list <- generate_target_list(     list(train_abcd_anxiety, \"anxiety\", \"ordinal\"),     list(train_abcd_depress, \"depressed\", \"ordinal\"),     uid = \"patient\" )  # Find a clustering solution in your training data settings_matrix <- generate_settings_matrix(     train_data_list,     nrow = 5,     seed = 42,     min_k = 10,     max_k = 30 ) #> [1] \"The global seed has been changed!\"  min(summarize_dl(train_data_list)$\"length\") #> [1] 83  train_solutions_matrix <- batch_snf(     train_data_list,     settings_matrix ) #> [1] \"Row: 1/5 | Time remaining: 0 seconds\" #> [1] \"Row: 2/5 | Time remaining: 1 seconds\" #> [1] \"Row: 3/5 | Time remaining: 0 seconds\" #> [1] \"Row: 4/5 | Time remaining: 0 seconds\" #> [1] \"Row: 5/5 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 1 seconds.\"  extended_solutions_matrix <- extend_solutions(     train_solutions_matrix,     train_target_list )  # The fourth row had the lowest minimum p-value across our outcomes which(extended_solutions_matrix$\"min_p_val\" ==       min(extended_solutions_matrix$\"min_p_val\")) #> [1] 5  # Keep track of your top solution top_row <- extended_solutions_matrix[4, ]  # Hand over the solutions matrix as well as the full data list to propagate labels #  to the test subjects propagated_labels <- lp_row(top_row, full_data_list) #> [1] \"If you add a 'significance' column to your solutions matrix those values will be used to name each solution (instead of row IDs)\" #> [1] \"Processing row 1 of 1...\" head(propagated_labels) #>                 subjectkey group 4 #> 1 subject_NDAR_INV0567T2Y9 train 2 #> 2 subject_NDAR_INV0IZ157F8 train 1 #> 3 subject_NDAR_INV0J4PYA5F train 2 #> 4 subject_NDAR_INV10OMKVLE train 2 #> 5 subject_NDAR_INV15FPCW4O train 2 #> 6 subject_NDAR_INV19NB4RJK train 2 tail(propagated_labels) #>                   subjectkey group 4 #> 95  subject_NDAR_INVGDBYXWV4  test 2 #> 96  subject_NDAR_INVHEUWA52I  test 2 #> 97  subject_NDAR_INVK9ULDQA2  test 2 #> 98  subject_NDAR_INVKYH529RD  test 2 #> 99  subject_NDAR_INVL045Z1TY  test 2 #> 100 subject_NDAR_INVLDQH8ATK  test 2 propagated_labels_all <- lp_row(extended_solutions_matrix, full_data_list) #> [1] \"If you add a 'significance' column to your solutions matrix those values will be used to name each solution (instead of row IDs)\" #> [1] \"Processing row 1 of 5...\" #> [1] \"Processing row 2 of 5...\" #> [1] \"Processing row 3 of 5...\" #> [1] \"Processing row 4 of 5...\" #> [1] \"Processing row 5 of 5...\" head(propagated_labels_all) #>                 subjectkey group 1 2 3 4 5 #> 1 subject_NDAR_INV0567T2Y9 train 1 2 5 2 1 #> 2 subject_NDAR_INV0IZ157F8 train 2 1 4 1 2 #> 3 subject_NDAR_INV0J4PYA5F train 1 2 5 2 2 #> 4 subject_NDAR_INV10OMKVLE train 1 1 3 2 2 #> 5 subject_NDAR_INV15FPCW4O train 1 2 2 2 2 #> 6 subject_NDAR_INV19NB4RJK train 1 2 3 2 2 tail(propagated_labels_all) #>                   subjectkey group 1 2 3 4 5 #> 95  subject_NDAR_INVGDBYXWV4  test 1 2 2 2 2 #> 96  subject_NDAR_INVHEUWA52I  test 2 2 4 2 2 #> 97  subject_NDAR_INVK9ULDQA2  test 1 2 4 2 1 #> 98  subject_NDAR_INVKYH529RD  test 1 2 2 2 2 #> 99  subject_NDAR_INVL045Z1TY  test 1 2 1 2 2 #> 100 subject_NDAR_INVLDQH8ATK  test 1 2 1 2 2"},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"A Less Simple Example","text":"(sections move separate vignettes)","code":""},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"inc","dir":"Articles","previous_headings":"Appendix","what":"inc*","title":"A Less Simple Example","text":"section describes generate_settings_matrix function randomly assigns input dataframess dropped different SNF runs access wider space possible solutions. default, generate_settings_matrix build empty dataframe containing columns outlined settings matrix section. non-zero number rows specified calling generate_settings_matrix, function calls add_settings_matrix_rows add rows randomly valid values. input dataframe inclusion variables rely yet another helper function: random_removal function randomly picks number columns remove according exponential function. likely number input dataframes removed 0, followed 1, way \\(D - 1\\) dataframes \\(D\\) number provided input dataframes. exponential distribution seemed preferrable uniform one, lead large number input dataframes dropped every SNF run.","code":"random_removal #> function (columns, min_removed_inputs, max_removed_inputs, dropout_dist = \"exponential\")  #> { #>     inclusion_columns <- columns[startsWith(columns, \"inc\")] #>     num_cols <- length(inclusion_columns) #>     if (dropout_dist == \"none\") { #>         inclusions_df <- data.frame(t(rep(1, num_cols))) #>         colnames(inclusions_df) <- inclusion_columns #>         rownames(inclusions_df) <- NULL #>         return(inclusions_df) #>     } #>     if (is.null(min_removed_inputs)) { #>         min_removed_inputs <- 0 #>     } #>     if (is.null(max_removed_inputs)) { #>         max_removed_inputs <- num_cols - 1 #>     } #>     if (max_removed_inputs >= num_cols || min_removed_inputs <  #>         0) { #>         stop(paste0(\"The number of removed elements must be between 0 and the\",  #>             \" total number of elements in the data_list (\", num_cols,  #>             \").\")) #>     } #>     if (dropout_dist == \"uniform\") { #>         possible_number_removed <- seq(min_removed_inputs, max_removed_inputs,  #>             by = 1) #>         num_removed <- resample(possible_number_removed, 1) #>     } #>     if (dropout_dist == \"exponential\") { #>         rand_vals <- stats::rexp(10000) #>         rand_vals <- rand_vals/max(rand_vals) #>         difference <- max_removed_inputs - min_removed_inputs #>         rand_vals <- rand_vals * difference #>         rand_vals <- rand_vals + min_removed_inputs #>         rand_vals <- round(rand_vals) #>         num_removed <- sample(rand_vals, 1) #>     } #>     remove_placeholders <- rep(0, num_removed) #>     keep_placeholders <- rep(1, num_cols - num_removed) #>     unshuffled_removals <- c(remove_placeholders, keep_placeholders) #>     shuffled_removals <- sample(unshuffled_removals) #>     inclusions_df <- t(data.frame(shuffled_removals)) #>     colnames(inclusions_df) <- inclusion_columns #>     rownames(inclusions_df) <- NULL #>     return(inclusions_df) #> } #> <bytecode: 0x5616be220018> #> <environment: namespace:metasnf>"},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"snf_scheme","dir":"Articles","previous_headings":"Appendix","what":"snf_scheme","title":"A Less Simple Example","text":"section describes individual input dataframes converted final fused network different ways using snf_scheme parameter. snf_scheme: One consideration SNF choosing organize individual features (columns) input dataframes get fused SNF. original SNF paper, input dataframes organized according “measurement type”: three input dataframes containing several features related miRNA, mRNA, DNA methylation. work, large set input dataframes varying amounts overlap expected information content, made grouping features little bit less clear. example, consider input dataframes (1) thicknesses cortical brain regions, (2) surface areas cortical brain regions, (3) volumes subcortical brain regions, (4) mean blood pressure. 4 distinct sets features, 3 distinct sets units (cortical thickness subcortical volume \\(mm^3\\)), (arguably) 2 distinct sources information: structural brain data blood pressure data. immediately clear collapsing data one mentioned sets give rise useful clustering solution purpose. number ways can take individual features produce single SNF-fused similarity matrix end quite large. two examples getting single similarity matrix two single-feature input dataframes: Example 1: Concatenation -> single similarity matrix Two individual dataframes, prior concatenation start joining two features concatenation: single concatenated dataframe Giving rise following distance matrix: \\[\\begin{bmatrix} 0&1&2.24&3.61 \\\\ 1&0&1.41&2.83 \\\\ 2.24&1.41&0&1.41 \\\\ 3.61&2.83&1.41&0 \\\\ \\end{bmatrix}\\] subsequent similarity matrix: \\[\\begin{bmatrix} 0.52&0.23&0.04&0.01 \\\\ 0.23&0.69&0.11&0.02 \\\\ 0.04&0.11&0.71&0.14 \\\\ 0.01&0.02&0.14&0.46 \\\\ \\end{bmatrix}\\] \\(~\\) Example 2: Similarity matrices -> integration SNF first convert input dataframes distance matrices: \\[\\begin{bmatrix} 0&1&2&3 \\\\ 1&0&1&2 \\\\ 2&1&0&1 \\\\ 3&2&1&0 \\\\ \\end{bmatrix}\\] \\[\\begin{bmatrix} 0&0&1&2 \\\\ 0&0&1&2 \\\\ 1&1&0&1 \\\\ 2&2&1&0 \\\\ \\end{bmatrix}\\] convert distance matrices similarity matrices: \\[\\begin{bmatrix} 0.6&0.21&0.04&0.01 \\\\ 0.21&0.9&0.17&0.04 \\\\ 0.04&0.17&0.9&0.21 \\\\ 0.01&0.04&0.21&0.6 \\\\ \\end{bmatrix}\\] \\[\\begin{bmatrix} 1.2&1.2&0.11&0.02 \\\\ 1.2&1.2&0.11&0.02 \\\\ 0.11&0.11&1.2&0.17 \\\\ 0.02&0.02&0.17&0.72 \\\\ \\end{bmatrix}\\] fuse similarity matrices together using SNF: \\[\\begin{bmatrix} 0.5&0.24&0.13&0.12 \\\\ 0.24&0.5&0.14&0.13 \\\\ 0.13&0.14&0.5&0.24 \\\\ 0.12&0.13&0.24&0.5 \\\\ \\end{bmatrix}\\] Contrast similarity matrix obtained Example 1: \\[\\begin{bmatrix} 0.52&0.23&0.04&0.01 \\\\ 0.23&0.69&0.11&0.02 \\\\ 0.04&0.11&0.71&0.14 \\\\ 0.01&0.02&0.14&0.46 \\\\ \\end{bmatrix}\\] ’m entirely sure happening diagonal values identical second matrix, aside, results seem mostly similar. Person 1 similar person 2, person 2 similar person 1, person 3 similar person 4, person 4 similar person 3. values aren’t identical, imagine complicated example slightly different choice feature collapsing, resulting clustering solution different. Going back example input dataframes : cortical thicknesses cortical surface areas subcortical volumes mean blood pressure imagine individually converting 4 input dataframes 4 separate distance matrices, converting similarity matrices, fusing 4 matrices one single network SNF little bit skewed favour brain imaging information. 3 sources describing structural brain features, 1 source blood. Varying snf_scheme parameter gives us access wider range possible clustering solutions changing following approaches taken digest initial input dataframes final fused network: Individual: Input dataframes combined final network SNF. Two-step: Input dataframes combined within user-specified data domains one round SNF combined across domains second round SNF. Domain: Input dataframes combined within domains concatenation combined single fused network SNF. options comprehensive. schemes like added package, feel free make request GitHub.","code":"df1 <- data.frame(     subjectkey = c(\"person1\", \"person2\", \"person3\", \"person4\"),     feature1 = c(1, 2, 3, 4) )  df2 <- data.frame(     subjectkey = c(\"person1\", \"person2\", \"person3\", \"person4\"),     feature2 = c(3, 3, 4, 5) ) df3 <- dplyr::inner_join(df1, df2, by = \"subjectkey\") df3_dist <- df3[, 2:3] |>     stats::dist() |>     as.matrix() |>     round(2) df3_sim <- SNFtool::affinityMatrix(df3_dist, K = 3, sigma = 0.5) |>     round(2) df1 <- data.frame(     subjectkey = c(\"person1\", \"person2\", \"person3\", \"person4\"),     feature1 = c(1, 2, 3, 4) )  df2 <- data.frame(     subjectkey = c(\"person1\", \"person2\", \"person3\", \"person4\"),     feature2 = c(3, 3, 4, 5) ) df1_dist <- df1[, 2] |>     stats::dist() |>     as.matrix() |>     round(2)  df2_dist <- df2[, 2] |>     stats::dist() |>     as.matrix() |>     round(2) df1_sim <- SNFtool::affinityMatrix(df1_dist, K = 3, sigma = 0.5) |>     round(2)  df2_sim <- SNFtool::affinityMatrix(df2_dist, K = 3, sigma = 0.5) |>     round(2) df1_df2_fused <- SNFtool::SNF(list(df1_sim, df2_sim), K = 3) |>     round(2)"},{"path":"https://branchlab.github.io/metasnf/articles/a_less_simple_example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"A Less Simple Example","text":"Caruana, Rich, Mohamed Elhawary, Nam Nguyen, Casey Smith. 2006. “Meta Clustering.” Sixth International Conference Data Mining (ICDM’06), 107–18. https://doi.org/10.1109/ICDM.2006.103. Wang, Bo, Aziz M. Mezlini, Feyyaz Demir, Marc Fiume, Zhuowen Tu, Michael Brudno, Benjamin Haibe-Kains, Anna Goldenberg. 2014. “Similarity Network Fusion Aggregating Data Types Genomic Scale.” Nature Methods 11 (3): 333–37. https://doi.org/10.1038/nmeth.2810.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"load-the-package","dir":"Articles","previous_headings":"The original SNF example","what":"1. Load the package","title":"A Simple Example","text":"","code":"library(SNFtool)"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"set-snf-hyperparameters","dir":"Articles","previous_headings":"The original SNF example","what":"2. Set SNF hyperparameters","title":"A Simple Example","text":"Three hyperparameters introduced example: K, alpha (also referred sigma eta different documentations), T. can learn significance hyperparameters original SNF paper (see references).","code":"K <- 20 alpha <- 0.5 T <- 20"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"load-the-data","dir":"Articles","previous_headings":"The original SNF example","what":"3. Load the data","title":"A Simple Example","text":"SNFtool package provides two mock dataframes titled Data1 Data2 example. Data1 contains gene expression values two genes 200 patients. Data2 similarly contains methylation data two genes 200 patients. ’s mock data looks like: “ground truth” data generated patients 1 100 drawn one distribution patients 101 200 drawn another. don’t access kind knowledge real data, .","code":"data(Data1) data(Data2) library(pheatmap)  png(\"heatmap.png\")  # gene expression data pheatmap(     Data1,     cluster_rows = FALSE,     cluster_cols = FALSE,     show_rownames = FALSE,     show_colnames = FALSE )  # methylation data pheatmap(     Data2,     cluster_rows = FALSE,     cluster_cols = FALSE,     show_rownames = FALSE,     show_colnames = FALSE )  dev.off() true_label <- c(matrix(1, 100, 1), matrix(2, 100, 1))"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"generate-similarity-matrices-for-each-data-source","dir":"Articles","previous_headings":"The original SNF example","what":"4. Generate similarity matrices for each data source","title":"A Simple Example","text":"consider two gene expression variables Data1 contain information one broader gene expression source two methylation variables Data2 contain information broader methylation source. next step determine, sources , similar patients . done first determining dissimilar patients source, converting dissimilarity information similarity information. calculate dissimilarity, ’ll use Euclidean distance. , can use affinityMatrix function provided SNFtool convert distance matrices similarity matrices. similarity matrices can passed SNF function integrate single similarity matrix describes similar patients across gene expression methylation data.","code":"distance_matrix_1 <- as.matrix(dist(Data1, method = \"euclidean\")) distance_matrix_2 <- as.matrix(dist(Data2, method = \"euclidean\")) similarity_matrix_1 <- affinityMatrix(distance_matrix_1, K, alpha) similarity_matrix_2 <- affinityMatrix(distance_matrix_2, K, alpha)"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"integrate-similarity-matrices-with-snf","dir":"Articles","previous_headings":"The original SNF example","what":"5. Integrate similarity matrices with SNF","title":"A Simple Example","text":"","code":"fused_network <- SNF(     list(similarity_matrix_1, similarity_matrix_2),     K,     T )"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"find-clusters-in-the-integrated-matrix","dir":"Articles","previous_headings":"The original SNF example","what":"6. Find clusters in the integrated matrix","title":"A Simple Example","text":"think 2 clusters data, can use spectral clustering find 2 clusters fused network. Sure enough, able obtain correct cluster label patients.","code":"number_of_clusters <- 2 assigned_clusters <- spectralClustering(fused_network, number_of_clusters) all(true_label == assigned_clusters) #> [1] TRUE"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"the-same-example-using-r-package","dir":"Articles","previous_headings":"","what":"The same example using r-package","title":"A Simple Example","text":"purpose r-package primarily aid users explore wide possible range solutions. Recreating example provided original SNF function extremely restricted usage package, reveal, broadly, r-package works.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"load-the-package-1","dir":"Articles","previous_headings":"The same example using r-package","what":"1. Load the package","title":"A Simple Example","text":"","code":"library(metasnf)"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"store-the-data-in-a-data_list","dir":"Articles","previous_headings":"The same example using r-package","what":"2. Store the data in a data_list","title":"A Simple Example","text":"data ’re working get stored single object called data_list. data_list made passing dataframe generate_data_list function, alongside information name dataframe, broader source (referred package “domain”) information dataframe comes , type variables stored inside dataframe (can continuous, discrete, ordinal, categorical, mixed). data_list generation process also requires specify column contains information ID patients. case, information isn’t , ’ll add . added IDs span 101 onwards (rather 1 onwards) purely convenience: automatic sorting patient names won’t result patient 199 placed patient 2. first entries lists contains following elements: actual dataframe name dataframe (string) name domain information dataframe representative (string) type variable stored dataframe (options continuous, discrete, ordinal, categorical, mixed) Finally, ’s argument uid (column name currently uniquely identifies subjects data). Behind scenes, function building nested list keeps track information, also: Converting UID data “subjectkey” Removing observations contain NAs Removing subjects present input dataframes Arranging subjects dataframe UID Prefixing UID values string “subject_” help cluster result characterization rows containing NAs removed. don’t want bunch data get removed NAs sprinkled around , consider using imputation. mice package R nice . Note need name every element explicitly. long provide objects within list correct order (data, name, domain, type), ’ll get correct result:","code":"# Add \"patient_id\" column to each dataframe Data1$\"patient_id\" <- 101:(nrow(Data1) + 100) Data2$\"patient_id\" <- 101:(nrow(Data2) + 100)  data_list <- generate_data_list(     list(         data = Data1,         name = \"genes_1_and_2_exp\",         domain = \"gene_expression\",         type = \"continuous\"     ),     list(         data = Data2,         name = \"genes_1_and_2_meth\",         domain = \"gene_methylation\",         type = \"continuous\"     ),     uid = \"patient_id\" ) # Compactly: data_list <- generate_data_list(     list(Data1, \"genes_1_and_2_exp\", \"gene_expression\", \"continuous\"),     list(Data2, \"genes_1_and_2_meth\", \"gene_methylation\", \"continuous\"),     uid = \"patient_id\" )"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"store-all-the-settings-of-the-desired-snf-runs-in-a-settings_matrix","dir":"Articles","previous_headings":"The same example using r-package","what":"3. Store all the settings of the desired SNF runs in a settings_matrix","title":"A Simple Example","text":"settings_matrix dataframe row contains information required convert raw data final cluster solution. varying rows matrix, can access broader space possible solutions hopefully get closer something useful possible context. case, ’re going create single cluster solution using process outlined original SNFtool example . explanation parameters settings_matrix can found settings_matrix vignette. columns settings_matrix mean following: row_id: way keep track different rows alpha, k, t: hyperparameters seen snf_scheme: “scheme” used transform inputs final fused network. ’ll discuss detail next vignette. clust_alg: clustering algorithm applied final fused network. default, one two possible base options randomly chosen. value 2 indicates spectral clustering used number clusters determined rotation cost heuristic. Columns ending “dist”: distance metric used. default, 1 refers Euclidean distance continuous, discrete, ordinal data, 1 refers Gower’s distance categorical mixed data. Columns starting “inc”: Whether corresponding dataframe included round SNF. detailed descriptions columns can also found settings_matrix vignette.","code":"settings_matrix <- generate_settings_matrix(     data_list,     nrow = 1,     alpha_values = 0.5,     k_values = 20,     t_values = 20,     dropout_dist = \"none\",     possible_snf_schemes = 1 )  settings_matrix #>   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist #> 1      1   0.5 20 20          1         1         1         1        1        1 #>   mix_dist input_wt domain_wt inc_genes_1_and_2_exp inc_genes_1_and_2_meth #> 1        1        1         1                     1                      1"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"run-snf","dir":"Articles","previous_headings":"The same example using r-package","what":"4. Run SNF","title":"A Simple Example","text":"batch_snf function apply row settings_matrix (case, just one row) data_list. solutions_matrix essentially augmented settings_matrix, new columns added included patient. row, new columns show cluster patient ended . friendlier format clustering results can obtained: cluster results exactly original SNF example: Running batch_snf return_similarity_matrices parameter set TRUE let us also take look final fused networks SNF rather just results applying spectral clustering networks: fused network obtained approach also one obtained original example: now ’ve completed basic example using package. subsequent vignettes provide guidance can leverage settings_matrix access wide range clustering solutions data, can use tools package pick best solution purposes, validate generalizability. Go give less simple example try!","code":"solutions_matrix <- batch_snf(     data_list,     settings_matrix ) #> [1] \"Row: 1/1 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 0 seconds.\"  solutions_matrix[, 1:20] # it goes on like this for some time... #>   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist #> 1      1   0.5 20 20          1         1         1         1        1        1 #>   mix_dist input_wt domain_wt inc_genes_1_and_2_exp inc_genes_1_and_2_meth #> 1        1        1         1                     1                      1 #>   nclust subject_101 subject_102 subject_103 subject_104 #> 1      2           1           1           1           1 cluster_solution <- get_cluster_df(solutions_matrix)  head(cluster_solution) #>   cluster  subjectkey #> 2       1 subject_101 #> 3       1 subject_102 #> 4       1 subject_103 #> 5       1 subject_104 #> 6       1 subject_105 #> 7       1 subject_106 identical(cluster_solution$\"cluster\", true_label) #> [1] TRUE batch_snf_results <- batch_snf(     data_list,     settings_matrix,     return_similarity_matrices = TRUE ) #> [1] \"Row: 1/1 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 0 seconds.\"  names(batch_snf_results) #> [1] \"solutions_matrix\"    \"similarity_matrices\"  # The solutions_matrix solutions_matrix <- batch_snf_results$\"solutions_matrix\"  # The first (and only, in this case) final fused network similarity_matrix <- batch_snf_results$\"similarity_matrices\"[[1]] max(similarity_matrix - fused_network) #> [1] 0"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"A Simple Example","text":"Wang, Bo, Aziz M. Mezlini, Feyyaz Demir, Marc Fiume, Zhuowen Tu, Michael Brudno, Benjamin Haibe-Kains, Anna Goldenberg. 2014. “Similarity Network Fusion Aggregating Data Types Genomic Scale.” Nature Methods 11 (3): 333–37. https://doi.org/10.1038/nmeth.2810.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"the-distance_metrics_list","dir":"Articles","previous_headings":"","what":"The distance_metrics_list","title":"Distance Metrics","text":"r-package enables users customize distance metrics used SNF pipeline. information distance metrics stored distance_metrics_list object. default, batch_snf create distance_metrics_list calling generate_distance_metrics_list function additional arguments. list list functions (euclidean_distance() gower_distance()), printing directly can messy. summarize_distance_metrics_list() function prints object nicer format. lists must always contain least 1 distance metric 5 recognized types variables: continuous, discrete, ordinal, categorical, mixed (combination previous four). default, continuous, discrete, ordinal data converted distance matrices using simple Euclidean distance. Categorical mixed data handled using Gower’s formula implemented cluster package (see ?cluster::daisy).","code":"library(metasnf)  distance_metrics_list <- generate_distance_metrics_list() summarize_distance_metrics_list(distance_metrics_list) #>  #> Continuous distances: #> 1. euclidean_distance #>  #> Discrete distances: #> 1. euclidean_distance #>  #> Ordinal distances: #> 1. euclidean_distance #>  #> Categorical distances: #> 1. gower_distance #>  #> Mixed distances: #> 1. gower_distance"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"how-the-distance_metrics_list-is-used","dir":"Articles","previous_headings":"","what":"How the distance_metrics_list is used","title":"Distance Metrics","text":"show distance_metrics_list used, ’ll start extending distance_metrics_list beyond just default options. r-package provides Euclidean distance function applies standard normalization first, sn_euclidean_distance() (wrapper around SNFtool::standardNormalization + stats::dist). ’s can create custom distance_metrics_list includes metric continuous discrete variables. Now, settings_matrix generation, can provide distance_metrics_list ensure new distance metrics used SNF runs. making settings_matrix, ’ll quickly need setup data (done Simple Example). settings_matrix can generated: continuous discrete distance metrics values randomly fluctuate 1 2, 1 means first metric (euclidean_distance()) used 2 means second metric (sn_euclidean_distance) used. ’s important note settings_matrix store distance metrics, just pointers position metric distance_metrics_list used SNF run. , ’ll need supply distance_metrics_list calling batch_snf().","code":"my_distance_metrics <- generate_distance_metrics_list(     continuous_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ),     discrete_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ) )  summarize_distance_metrics_list(my_distance_metrics) #>  #> Continuous distances: #> 1. euclidean_distance  #> 2. standard_norm_euclidean #>  #> Discrete distances: #> 1. euclidean_distance  #> 2. standard_norm_euclidean #>  #> Ordinal distances: #> 1. euclidean_distance #>  #> Categorical distances: #> 1. gower_distance #>  #> Mixed distances: #> 1. gower_distance library(SNFtool)  data(Data1) data(Data2)  Data1$\"patient_id\" <- 101:(nrow(Data1) + 100) Data2$\"patient_id\" <- 101:(nrow(Data2) + 100)  data_list <- generate_data_list(     list(Data1, \"genes_1_and_2_exp\", \"gene_expression\", \"continuous\"),     list(Data2, \"genes_1_and_2_meth\", \"gene_methylation\", \"continuous\"),     uid = \"patient_id\" ) settings_matrix <- generate_settings_matrix(     data_list,     nrow = 10,     distance_metrics_list = my_distance_metrics )  # showing just the columns that are related to distances settings_matrix |> dplyr::select(dplyr::ends_with(\"dist\")) #>    cont_dist disc_dist ord_dist cat_dist mix_dist #> 1          1         2        1        1        1 #> 2          2         1        1        1        1 #> 3          2         1        1        1        1 #> 4          1         2        1        1        1 #> 5          1         2        1        1        1 #> 6          2         2        1        1        1 #> 7          1         1        1        1        1 #> 8          2         2        1        1        1 #> 9          1         1        1        1        1 #> 10         1         1        1        1        1 solutions_matrix <- batch_snf(     data_list,     settings_matrix,     distance_metrics_list = my_distance_metrics )"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"removing-the-default-distance_metrics","dir":"Articles","previous_headings":"","what":"Removing the default distance_metrics","title":"Distance Metrics","text":"two ways avoid using default distance metrics don’t want ever use . first way use keep_defaults parameter generate_distance_metrics_list(): option, necessary provide least one distance metric every variable type. distance_metrics_list variable types completely empty (even data variable type first place). second way explicitly specify indices want sample settings_matrix generation: second option can quite useful paired add_settings_matrix_rows(), enabling build distinct blocks rows settings matrix different combinations distance metrics. can save trouble needing manage several distinct distance metrics lists manage solution space separate runs batch_snf. rows 1 10, continuous data always handled first continuous distance metric discrete data handled second third discrete distance metrics. rows 11 20, continuous data always handled third continuous distance metric discrete data handled first distance metric.","code":"no_default_metrics <- generate_distance_metrics_list(     continuous_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ),     discrete_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ),     ordinal_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ),     categorical_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ),     mixed_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ),     keep_defaults = FALSE )  summarize_distance_metrics_list(no_default_metrics) #>  #> Continuous distances: #> 1. standard_norm_euclidean #>  #> Discrete distances: #> 1. standard_norm_euclidean #>  #> Ordinal distances: #> 1. standard_norm_euclidean #>  #> Categorical distances: #> 1. standard_norm_euclidean #>  #> Mixed distances: #> 1. standard_norm_euclidean my_distance_metrics <- generate_distance_metrics_list(     continuous_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance,         \"some_other_metric\" = sn_euclidean_distance     ),     discrete_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance,         \"some_other_metric\" = sn_euclidean_distance     ) )  summarize_distance_metrics_list(my_distance_metrics) #>  #> Continuous distances: #> 1. euclidean_distance  #> 2. standard_norm_euclidean  #> 3. some_other_metric #>  #> Discrete distances: #> 1. euclidean_distance  #> 2. standard_norm_euclidean  #> 3. some_other_metric #>  #> Ordinal distances: #> 1. euclidean_distance #>  #> Categorical distances: #> 1. gower_distance #>  #> Mixed distances: #> 1. gower_distance  settings_matrix <- generate_settings_matrix(     data_list,     nrow = 10,     distance_metrics_list = my_distance_metrics,     continuous_distances = 1,     discrete_distances = c(2, 3) )  settings_matrix |> dplyr::select(dplyr::ends_with(\"dist\")) #>    cont_dist disc_dist ord_dist cat_dist mix_dist #> 1          1         3        1        1        1 #> 2          1         3        1        1        1 #> 3          1         3        1        1        1 #> 4          1         3        1        1        1 #> 5          1         3        1        1        1 #> 6          1         2        1        1        1 #> 7          1         3        1        1        1 #> 8          1         3        1        1        1 #> 9          1         2        1        1        1 #> 10         1         3        1        1        1 settings_matrix <- generate_settings_matrix(     data_list,     nrow = 10,     distance_metrics_list = my_distance_metrics,     continuous_distances = 1,     discrete_distances = c(2, 3) )  settings_matrix <- add_settings_matrix_rows(     settings_matrix,     nrow = 10,     distance_metrics_list = my_distance_metrics,     continuous_distances = 3,     discrete_distances = 1 )  settings_matrix |> dplyr::select(dplyr::ends_with(\"dist\")) #>    cont_dist disc_dist ord_dist cat_dist mix_dist #> 1          1         3        1        1        1 #> 2          1         3        1        1        1 #> 3          1         2        1        1        1 #> 4          1         2        1        1        1 #> 5          1         3        1        1        1 #> 6          1         3        1        1        1 #> 7          1         2        1        1        1 #> 8          1         3        1        1        1 #> 9          1         3        1        1        1 #> 10         1         2        1        1        1 #> 11         3         1        1        1        1 #> 12         3         1        1        1        1 #> 13         3         1        1        1        1 #> 14         3         1        1        1        1 #> 15         3         1        1        1        1 #> 16         3         1        1        1        1 #> 17         3         1        1        1        1 #> 18         3         1        1        1        1 #> 19         3         1        1        1        1 #> 20         3         1        1        1        1"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"supplying-weights-to-distance-metrics","dir":"Articles","previous_headings":"","what":"Supplying weights to distance metrics","title":"Distance Metrics","text":"distance metric functions can accept weights. Usually, weights applied direct scaling specified variables. cases (e.g. categorical distance metric functions), way weights applied may somewhat less intuitive. bottom vignette outlines available distance metric functions grouped whether accept weights. can examine documentation weighted functions learn weights provide used. important note providing weights run SNF specific form data may expect time ready converted distance metric function. “individual” “two-step” SNF schemes involve distance metrics applied input dataframes data_list . “domain” scheme, however, concatenates data within domain converting larger dataframe distance matrix. Anytime one dataframe domain label use domain SNF scheme, columns associated domain single dataframe distance metric function applied. first step providing custom weights generate weights_matrix: default, function return dataframe containing columns data_list single row 1s, weights used single run SNF. actually use matrix SNF, ’ll need make sure number rows weights matrix number rows settings matrix. weights_matrix 1s (default weights_matrix used don’t supply one ) ’won’t actually anything data. can either replace 1s weights ’ve calculated outside package, use random weights following uniform exponential distribution. default metrics (simple Euclidean continuous, discrete, ordinal data Gower’s distance categorical mixed data) capable applying weights data distance matrix generation.","code":"weights_matrix <- generate_weights_matrix(     data_list )  weights_matrix #>      V1 V2 V3 V4 #> [1,]  1  1  1  1 settings_matrix <- generate_settings_matrix(     data_list,     nrow = 10,     distance_metrics_list = my_distance_metrics,     continuous_distances = 1,     discrete_distances = c(2, 3) )  weights_matrix <- generate_weights_matrix(     data_list,     nrow = nrow(settings_matrix) )  weights_matrix[1:5, ]  solutions_matrix_with_ones_for_weights <- batch_snf(     data_list,     settings_matrix,     distance_metrics_list = my_distance_metrics,     weights_matrix = weights_matrix )  solutions_matrix_with_no_weights <- batch_snf(     data_list,     settings_matrix,     distance_metrics_list = my_distance_metrics )  identical(     solutions_matrix_with_no_weights,     solutions_matrix_with_ones_for_weights ) # Try this on your machine - It'll evaluate to TRUE weights_matrix <- generate_weights_matrix(     data_list,     nrow = nrow(settings_matrix),     fill = \"uniform\" # or fill = \"exponential\" )  weights_matrix[1:5, ]  solutions_matrix_with_uniform_random_weights <- batch_snf(     data_list,     settings_matrix,     distance_metrics_list = my_distance_metrics,     weights_matrix = weights_matrix )  identical(     solutions_matrix_with_no_weights,     solutions_matrix_with_uniform_random_weights ) # Try this on your machine - It'll evaluate to TRUE"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"custom-distance-metrics","dir":"Articles","previous_headings":"","what":"Custom distance metrics","title":"Distance Metrics","text":"remainder vignette deals supplying custom distance metrics (including custom feature weighting). Making use functionality require good understanding working functions R. can also supply custom distance metrics. Looking code one package-provided distance functions shows essential aspects well-formated distance function. function accept two arguments: df weights_row, give one output, distance_matrix. function doesn’t actually need make use weights don’t want . time data reaches distance metric function, (referred df) always: UID column least one variable column missing values data.frame (tibble) variable column names won’t altered values loaded data_list. example, consider abcd_anxiety raw data supplied r-package: ’s make look like distance metric functions expect see: want distance metric calculates Euclidean distance, also scales resulting matrix biggest allowed distance 1, look like : ’ll need mindful edge cases function run . example, function fail pairwise distances patients 0 (division 0 occur). specific situation ever happens, ’s probably something quite wrong data. ’re happy distance function working ’d like : can load custom distance_metrics_list:","code":"euclidean_distance #> function (df, weights_row)  #> { #>     weights <- format_weights_row(weights_row) #>     weighted_df <- as.matrix(df) %*% weights #>     distance_matrix <- as.matrix(stats::dist(weighted_df, method = \"euclidean\")) #>     return(distance_matrix) #> } #> <bytecode: 0x557bcd6ec810> #> <environment: namespace:metasnf> head(abcd_anxiety) #> # A tibble: 6 × 2 #>   patient          cbcl_anxiety_r #>   <chr>                     <dbl> #> 1 NDAR_INV0567T2Y9              3 #> 2 NDAR_INV0GLZNC2W              1 #> 3 NDAR_INV0IZ157F8             NA #> 4 NDAR_INV0J4PYA5F              0 #> 5 NDAR_INV0OYE291Q              2 #> 6 NDAR_INV0SM1JLXQ              2 processed_abcd_anxiety <- abcd_anxiety |>     na.omit() |> # no NAs     dplyr::rename(\"subjectkey\" = \"patient\") |> # replace the UID with 'subjectkey'     data.frame(row.names = \"subjectkey\")  head(processed_abcd_anxiety) #>                  cbcl_anxiety_r #> NDAR_INV0567T2Y9              3 #> NDAR_INV0GLZNC2W              1 #> NDAR_INV0J4PYA5F              0 #> NDAR_INV0OYE291Q              2 #> NDAR_INV0SM1JLXQ              2 #> NDAR_INV0Z87UJDR              0 my_scaled_euclidean <- function(df, weights_row) {     # this function won't apply the weights it is given     distance_matrix <- df |>         stats::dist(method = \"euclidean\") |>         as.matrix() # make sure it's formatted as a matrix     distance_matrix <- distance_matrix / max(distance_matrix)     return(distance_matrix) } my_scaled_euclidean(processed_abcd_anxiety)[1:5, 1:5] #>                  NDAR_INV0567T2Y9 NDAR_INV0GLZNC2W NDAR_INV0J4PYA5F #> NDAR_INV0567T2Y9              0.0              0.2              0.3 #> NDAR_INV0GLZNC2W              0.2              0.0              0.1 #> NDAR_INV0J4PYA5F              0.3              0.1              0.0 #> NDAR_INV0OYE291Q              0.1              0.1              0.2 #> NDAR_INV0SM1JLXQ              0.1              0.1              0.2 #>                  NDAR_INV0OYE291Q NDAR_INV0SM1JLXQ #> NDAR_INV0567T2Y9              0.1              0.1 #> NDAR_INV0GLZNC2W              0.1              0.1 #> NDAR_INV0J4PYA5F              0.2              0.2 #> NDAR_INV0OYE291Q              0.0              0.0 #> NDAR_INV0SM1JLXQ              0.0              0.0 my_distance_metrics <- generate_distance_metrics_list(     continuous_distances = list(         \"my_scaled_euclidean\" = my_scaled_euclidean     ) )"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"requesting-metrics","dir":"Articles","previous_headings":"","what":"Requesting metrics","title":"Distance Metrics","text":"’s metric ’d like see added prewritten option included package, feel free post issue make pull request package’s GitHub.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"list-of-prewritten-distance-metrics-functions","dir":"Articles","previous_headings":"","what":"List of prewritten distance metrics functions","title":"Distance Metrics","text":"metrics can used . capable accepting applying custom weights provided weights_matrix. applies continuous, discrete, ordinal data Standard normalize data, use Euclidean distance applies continuous, discrete, ordinal data applies data Apply weights dataframe, calculate Euclidean distance, square results Apply square root weights dataframe, calculate Euclidean distance, square results Distance patients (1 * variable weight) summed variables","code":""},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Distance Metrics","text":"Wang, Bo, Aziz M. Mezlini, Feyyaz Demir, Marc Fiume, Zhuowen Tu, Michael Brudno, Benjamin Haibe-Kains, Anna Goldenberg. 2014. “Similarity Network Fusion Aggregating Data Types Genomic Scale.” Nature Methods 11 (3): 333–37. https://doi.org/10.1038/nmeth.2810.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/getting_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"package? r-package package facilitates usage meta clustering paradigm described Caruana et al., 2006 similarity network fusion (SNF) data integration procedure developed Wang et al., 2014. package offers comprehensive suite tools assist users transforming raw patient data patient subtypes, decision making subtyping process, visualization along way strong emphasis context-specific utility principled validation results.  use meta clustering? Clustering algorithms seek solutions members cluster similar members distinct clusters dissimilar . sufficiently noisy datasets many qualitatively distinct solutions similar scores clustering quality exist, necessarily case top solution selected clustering algorithm also useful one user’s context. address issue, original meta clustering procedure Caruana et al., 2006 involved generating large number reasonable clustering solutions, clustering solutions qualitatively similar ones, user examine “meta clusters” find something seems like ’ll useful. use SNF? clinical data setting, often access patient data across wide range domains, imaging, genetics, biomarkers, demographics. trying extract subtypes information, direct concatenation data followed cluster analysis can result substantial amount lost (valuable) signal contained individual domain. Empirically, SNF demonstrated effectively integrate highly diverse patient data purposes clinical subtyping.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/getting_started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started","text":"package currently hosted GitHub (CRAN). easiest way install metasnf devtools package.","code":"install.packages(\"devtools\") # if you don't have it already  # By default, this will install the latest version of the package devtools::install_github(\"BRANCHlab/metasnf\")  # To ensure you are always installing a specific version of the package, #  you can manually specify a tagged release or a commit: devtools::install_github(\"BRANCHlab/metasnf@v0.2.0\")"},{"path":"https://branchlab.github.io/metasnf/articles/manhattan_plots.html","id":"associations-with-cluster-solutions","dir":"Articles","previous_headings":"","what":"Associations with Cluster Solutions","title":"Manhattan Plots","text":"Manhattan plots can used visualize several cluster solutions solutions matrix show separation across variables interest. generate Manhattan plot, ’ll need provide dataframe containing pvalues solutions_matrix. example makes use expression_df methylation_df dataframes, available loading metasnf package. particular set mock data, separation strong cluster solutions across different runs SNF identical. chunk perturbs cluster solutions little bit make purpose subsequent Manhattan plot little easier see. ’ll set aside variables interest target list, use calculate p-values variables, supply information manhattan_plot function.  red dotted line represent p = 0.05.","code":"library(metasnf)  # Generate data_list data_list <- generate_data_list(     list(         data = expression_df,         name = \"expression_data\",         domain = \"gene_expression\",         type = \"continuous\"     ),     list(         data = methylation_df,         name = \"methylation_data\",         domain = \"gene_methylation\",         type = \"continuous\"     ),     uid = \"patient_id\" )  # Generate settings_matrix settings_matrix <- generate_settings_matrix(     data_list,     nrow = 5,     max_k = 40,     seed = 42 )  # Run SNF and clustering solutions_matrix <- batch_snf(data_list, settings_matrix)  # The first (and only) cluster solution: cluster_solutions <- get_cluster_solutions(solutions_matrix)  head(cluster_solutions) # 20% chance of flipping a patient's assigned cluster noise_two_clusters <- function(two_cluster_solution) {     noisy_solution <- two_cluster_solution |> lapply(         function(x) {             if (runif(1) > 0.80) {                 if (x == 1) {                     return(2)                 } else {                     return(1)                 }             } else {                 return(x)             }         }     ) |>         unlist()     return(noisy_solution) }  for (i in seq_len(ncol(cluster_solutions) - 1)) {     current_col <- i + 1     cluster_solutions[, current_col] <- cluster_solutions[, current_col] |>         noise_two_clusters() }  # Scrambling the solutions matrix solutions_matrix[1, cluster_solutions$\"subjectkey\"] <- cluster_solutions$\"1\" solutions_matrix[2, cluster_solutions$\"subjectkey\"] <- cluster_solutions$\"2\" solutions_matrix[3, cluster_solutions$\"subjectkey\"] <- cluster_solutions$\"3\" solutions_matrix[4, cluster_solutions$\"subjectkey\"] <- cluster_solutions$\"4\" solutions_matrix[5, cluster_solutions$\"subjectkey\"] <- cluster_solutions$\"5\" target_list <- generate_target_list(     list(gender_df, \"gender\", \"categorical\"),     list(diagnosis_df, \"diagnosis\", \"categorical\"),     list(age_df, \"age\", \"numeric\"),     uid = \"patient_id\" )  extended_solutions_matrix <- extend_solutions(solutions_matrix, target_list)  target_pvals <- p_val_select(extended_solutions_matrix)  manhattan_plot(target_pvals, threshold = 0.05, bonferroni_line = TRUE)"},{"path":"https://branchlab.github.io/metasnf/articles/manhattan_plots.html","id":"associations-with-a-key-variable","dir":"Articles","previous_headings":"","what":"Associations with a Key Variable","title":"Manhattan Plots","text":"can also visualize associations key variable interest rather cluster solutions. option makes use calculate_associations function, can generate pairwise association p-values provided data: specify key_association interest, ’ll receive associations variable interest variables provided: Setting key_mode parameter true, can generate Manhattan plot data see strongly associated variables chosen outcome interest.","code":"calculate_associations(data_list) ##                    gene_1_expression gene_2_expression gene_1_methylation ## gene_1_expression          0.0000000         0.6258660          0.5196837 ## gene_2_expression          0.6258660         0.0000000          0.6156644 ## gene_1_methylation         0.5196837         0.6156644          0.0000000 ## gene_2_methylation         0.1243955         0.8730497          0.5089466 ##                    gene_2_methylation ## gene_1_expression           0.1243955 ## gene_2_expression           0.8730497 ## gene_1_methylation          0.5089466 ## gene_2_methylation          0.0000000 key_associations_df <- calculate_associations(     data_list,     key_association = \"gene_1_expression\" )  key_associations_df ##                 name      pval       type           domain ## 2  gene_2_expression 0.6258660 continuous  gene_expression ## 3 gene_1_methylation 0.5196837 continuous gene_methylation ## 4 gene_2_methylation 0.1243955 continuous gene_methylation manhattan_plot(     key_associations_df,     key_mode = TRUE,     threshold = 0.05,     bonferroni_line = TRUE )"},{"path":"https://branchlab.github.io/metasnf/articles/manhattan_plots.html","id":"data-outside-the-original-data_list","dir":"Articles","previous_headings":"","what":"Data outside the original data_list","title":"Manhattan Plots","text":"can also examine just data ’ve prepared original data_list tacking together separate data_lists target_lists.","code":"target_list <- generate_data_list(     list(         data = gender_df,         name = \"gender\",         domain = \"demographics\",         type = \"categorical\"     ),     list(         data = diagnosis_df,         name = \"diagnosis\",         domain = \"clinical\",         type = \"categorical\"     ),     uid = \"patient_id\" )  # Additional data stored in a target_list summarize_dl(target_list) ##        name        type       domain length width ## 1    gender categorical demographics    200     2 ## 2 diagnosis categorical     clinical    200     2 combined_data_list <- c(data_list, target_list)  summarize_dl(combined_data_list) ##               name        type           domain length width ## 1  expression_data  continuous  gene_expression    200     3 ## 2 methylation_data  continuous gene_methylation    200     3 ## 3           gender categorical     demographics    200     2 ## 4        diagnosis categorical         clinical    200     2 key_associations_df <- calculate_associations(     combined_data_list,     key_association = \"gene_1_expression\" )  manhattan_plot(     key_associations_df,     key_mode = TRUE,     threshold = 0.05,     bonferroni_line = TRUE )"},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"the-basic-settings_matrix","dir":"Articles","previous_headings":"","what":"The basic settings_matrix","title":"The Settings Matrix","text":"minimal settings_matrix can obtained providing data_list object. resulting columns : row_id: label keep track row alpha: alpha (also referred sigma eta) hyperparameter SNF k: K (nearest neighbours) hyperparameter similarity matrix calculations SNF t: T (number iterations) hyperparameter used SNF snf_scheme: SNF “scheme” used convert initial provided dataframes final fused network (appendix “Less Simple Example” vignette) clust_alg: clustering algorithm applied final fused network. default, varies pre-provided options (1) spectral clustering number clusters determined eigen-gap heuristic (2) thing using rotation cost heuristic. can learn using parameter clustering algorithnms vignette. Columns ending dist: distance metric used various types variables (distance metrics vignette) Columns starting inc: Whether corresponding dataframe included (1) excluded (0) row varying values columns, can define distinct SNF pipelines give rise broader space possibly patient subtype solutions. following sections outline use generate_settings_matrix build wide range settings hopefully help find subtyping solution useful purposes.","code":"library(metasnf)  # It's best to list out the individual elements with names, i.e. data = ..., #  name = ..., domain = ..., type = ..., but we'll skip that here for brevity. data_list <- generate_data_list(     list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(abcd_h_income, \"household_income\", \"demographics\", \"continuous\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\" )  settings_matrix <- generate_settings_matrix(     data_list )  head(settings_matrix) ##  [1] row_id                    alpha                     ##  [3] k                         t                         ##  [5] snf_scheme                clust_alg                 ##  [7] cont_dist                 disc_dist                 ##  [9] ord_dist                  cat_dist                  ## [11] mix_dist                  input_wt                  ## [13] domain_wt                 inc_cortical_thickness    ## [15] inc_cortical_surface_area inc_subcortical_volume    ## [17] inc_household_income      inc_pubertal_status       ## <0 rows> (or 0-length row.names)"},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"adding-random-rows","dir":"Articles","previous_headings":"","what":"Adding random rows","title":"The Settings Matrix","text":"specifying parameters beyond number rows created, function randomly (sensibly) vary values matrix. alpha k hyperparameters varied 0.3 0.8 10 100 respectively based suggestion authors SNF. t hyperparameter, controls many iterations updates occur fused network SNF, stays fixed 20, default. value (20) empirically demonstrated sufficient achieving convergence matrix, varying doesn’t seem much relevance kinds cluster solutions produced. snf_scheme column vary 1 3, outlines 3 differente schemes available. clust_alg column vary randomly (1) spectral clustering using eigen-gap heuristic (2) spectral clustering using rotation cost heuristic default. distance columns always 1 default, just use default distance metrics simple Euclidean anything numeric Gower’s distance anything mixed categorical. Controlling scheme, clustering algorithms, distance metrics discussed details separate vignettes linked . Controlling remaining options shown .","code":"# Through minimums and maximums settings_matrix <- generate_settings_matrix(     data_list,     nrow = 100, )  head(settings_matrix) ##   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist ## 1      1   0.4 53 20          1         2         1         1        1        1 ## 2      2   0.3 84 20          3         2         1         1        1        1 ## 3      3   0.4 83 20          1         1         1         1        1        1 ## 4      4   0.6 81 20          3         2         1         1        1        1 ## 5      5   0.4 42 20          3         2         1         1        1        1 ## 6      6   0.3 11 20          1         1         1         1        1        1 ##   mix_dist input_wt domain_wt inc_cortical_thickness inc_cortical_surface_area ## 1        1        1         1                      1                         1 ## 2        1        1         1                      1                         0 ## 3        1        1         1                      1                         1 ## 4        1        1         1                      1                         1 ## 5        1        1         1                      1                         1 ## 6        1        1         1                      1                         1 ##   inc_subcortical_volume inc_household_income inc_pubertal_status ## 1                      1                    1                   1 ## 2                      1                    1                   1 ## 3                      1                    1                   1 ## 4                      1                    0                   1 ## 5                      1                    1                   1 ## 6                      1                    1                   1"},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"alpha-k-and-t","dir":"Articles","previous_headings":"","what":"Alpha, k, and t","title":"The Settings Matrix","text":"can control parameters either providing vector values ’d like randomly sample specifying minimum maximum range.","code":"# Through minimums and maximums settings_matrix <- generate_settings_matrix(     data_list,     nrow = 100,     min_k = 10,     max_k = 60,     min_alpha = 0.3,     max_alpha = 0.8,     min_t = 15,     max_t = 30 ) ## Warning in add_settings_matrix_rows(settings_matrix = settings_matrix_base, : ## The original SNF paper recommends a t between 10 to 20. Empirically, setting t ## above 20 is always sufficient for SNF to converge. This warning is raised ## anytime a user tries to set a t value smaller than 10 or larger than 20. # Through specific value sampling settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     k_values = c(10, 25, 50),     alpha_values = c(0.4, 0.8),     t_values = c(20, 30) ) ## Warning in add_settings_matrix_rows(settings_matrix = settings_matrix_base, : ## The original SNF paper recommends a t between 10 to 20. Empirically, setting t ## above 20 is always sufficient for SNF to converge. This warning is raised ## anytime a user tries to set a t value smaller than 10 or larger than 20."},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"inclusion-columns","dir":"Articles","previous_headings":"","what":"Inclusion columns","title":"The Settings Matrix","text":"Bounds number input dataframes removed well way number removed chosen can controlled. default, generate_settings_matrix pick random value 0 1 less total number available dataframes based exponential probability distribution. exponential distribution makes likely small number dataframes dropped much less likely large number dataframes dropped. can control distribution changing dropout_dist value “uniform” (result much higher number dataframes dropped average) “none” (result dataframes dropped). bounds number dataframes can dropped can controlled using min_removed_inputs max_removed_inputs:","code":"# Exponential dropping settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     dropout_dist = \"exponential\" # the default behaviour )  head(settings_matrix) ##   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist ## 1      1   0.4 34 20          2         1         1         1        1        1 ## 2      2   0.5 86 20          1         1         1         1        1        1 ## 3      3   0.5 49 20          3         2         1         1        1        1 ## 4      4   0.7 76 20          1         2         1         1        1        1 ## 5      5   0.3 28 20          2         1         1         1        1        1 ## 6      6   0.6 69 20          3         2         1         1        1        1 ##   mix_dist input_wt domain_wt inc_cortical_thickness inc_cortical_surface_area ## 1        1        1         1                      1                         1 ## 2        1        1         1                      1                         1 ## 3        1        1         1                      1                         1 ## 4        1        1         1                      1                         1 ## 5        1        1         1                      1                         1 ## 6        1        1         1                      0                         1 ##   inc_subcortical_volume inc_household_income inc_pubertal_status ## 1                      1                    1                   1 ## 2                      1                    1                   1 ## 3                      1                    1                   1 ## 4                      1                    1                   0 ## 5                      1                    1                   1 ## 6                      1                    1                   1 # Uniform dropping settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     dropout_dist = \"uniform\" )  head(settings_matrix) ##   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist ## 1      1   0.8 49 20          1         1         1         1        1        1 ## 2      2   0.8 68 20          1         1         1         1        1        1 ## 3      3   0.7 85 20          1         2         1         1        1        1 ## 4      4   0.5 19 20          1         2         1         1        1        1 ## 5      5   0.5 66 20          1         2         1         1        1        1 ## 6      6   0.6 49 20          3         1         1         1        1        1 ##   mix_dist input_wt domain_wt inc_cortical_thickness inc_cortical_surface_area ## 1        1        1         1                      0                         0 ## 2        1        1         1                      0                         0 ## 3        1        1         1                      0                         1 ## 4        1        1         1                      1                         1 ## 5        1        1         1                      1                         1 ## 6        1        1         1                      0                         0 ##   inc_subcortical_volume inc_household_income inc_pubertal_status ## 1                      1                    0                   0 ## 2                      0                    1                   0 ## 3                      1                    1                   1 ## 4                      1                    1                   1 ## 5                      1                    0                   1 ## 6                      0                    1                   0 # No dropping settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     dropout_dist = \"none\" )  head(settings_matrix) ##   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist ## 1      1   0.3 57 20          2         1         1         1        1        1 ## 2      2   0.7 10 20          2         1         1         1        1        1 ## 3      3   0.8 64 20          1         1         1         1        1        1 ## 4      4   0.3 36 20          1         1         1         1        1        1 ## 5      5   0.3 19 20          3         2         1         1        1        1 ## 6      6   0.5 20 20          1         2         1         1        1        1 ##   mix_dist input_wt domain_wt inc_cortical_thickness inc_cortical_surface_area ## 1        1        1         1                      1                         1 ## 2        1        1         1                      1                         1 ## 3        1        1         1                      1                         1 ## 4        1        1         1                      1                         1 ## 5        1        1         1                      1                         1 ## 6        1        1         1                      1                         1 ##   inc_subcortical_volume inc_household_income inc_pubertal_status ## 1                      1                    1                   1 ## 2                      1                    1                   1 ## 3                      1                    1                   1 ## 4                      1                    1                   1 ## 5                      1                    1                   1 ## 6                      1                    1                   1 settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     min_removed_inputs = 3 )  # No row will exclude fewer than 3 dataframes during SNF head(settings_matrix) ##   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist ## 1      1   0.8 77 20          3         1         1         1        1        1 ## 2      2   0.6 34 20          3         1         1         1        1        1 ## 3      3   0.7 76 20          2         2         1         1        1        1 ## 4      4   0.7 71 20          1         1         1         1        1        1 ## 5      5   0.8 24 20          3         2         1         1        1        1 ## 6      6   0.5 96 20          2         2         1         1        1        1 ##   mix_dist input_wt domain_wt inc_cortical_thickness inc_cortical_surface_area ## 1        1        1         1                      1                         0 ## 2        1        1         1                      1                         0 ## 3        1        1         1                      0                         0 ## 4        1        1         1                      1                         0 ## 5        1        1         1                      1                         0 ## 6        1        1         1                      1                         0 ##   inc_subcortical_volume inc_household_income inc_pubertal_status ## 1                      0                    0                   1 ## 2                      0                    0                   1 ## 3                      1                    1                   0 ## 4                      0                    0                   1 ## 5                      0                    1                   0 ## 6                      1                    0                   0"},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"grid-searching","dir":"Articles","previous_headings":"","what":"Grid searching","title":"The Settings Matrix","text":"interested grid searching perhaps just specific set alpha k values, may want consider varying parameters keeping everything else fixed:","code":"settings_matrix <- generate_settings_matrix(     data_list,     nrow = 10,     alpha_values = c(0.3, 0.5, 0.8),     k_values = c(20, 40, 60),     dropout_dist = \"none\" )"},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"assembling-a-settings_matrix-in-pieces","dir":"Articles","previous_headings":"","what":"Assembling a settings_matrix in pieces","title":"The Settings Matrix","text":"Rather varying everything equally , may interested looking “chunks” solution spaces based distinct settings matrices. example, may want look 100 solutions generated k = 50 look another 100 solutions generated k = 80. can absolutely build two separate settings matrices, can also build single matrix parts using add_settings_matrix_rows function:","code":"settings_matrix <- generate_settings_matrix(     data_list,     nrow = 50,     k_values = 50 )  settings_matrix <- add_settings_matrix_rows(     settings_matrix,     nrow = 50,     k_values = 80 )  dim(settings_matrix) ## [1] 100  18 settings_matrix$\"k\" ##   [1] 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 ##  [26] 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 ##  [51] 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 ##  [76] 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80"},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"manual-adjustments","dir":"Articles","previous_headings":"","what":"Manual adjustments","title":"The Settings Matrix","text":"Don’t forget settings matrix just dataframe. can always go modify things wish, risk generating duplicate invalid rows package functions prevented.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"matrix-building-failed","dir":"Articles","previous_headings":"","what":"“Matrix building failed”","title":"The Settings Matrix","text":"generate_settings_matrix never build duplicate rows. consequence request large number rows small range possible values vary , impossible matrix built. example, ’s way generate 10 unique rows thing allowed vary clustering algorithm (1 2) used - 2 rows ever created. encounter error “Matrix building failed”, try generate fewer rows little less strict values allowed.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"data-set-up","dir":"Articles","previous_headings":"","what":"Data set-up","title":"Plotting Similarity Matrices","text":"","code":"library(metasnf)  # Generate data_list data_list <- generate_data_list(     list(         data = expression_df,         name = \"expression_data\",         domain = \"gene_expression\",         type = \"continuous\"     ),     list(         data = methylation_df,         name = \"methylation_data\",         domain = \"gene_methylation\",         type = \"continuous\"     ),     list(         data = gender_df,         name = \"gender\",         domain = \"demographics\",         type = \"categorical\"     ),     list(         data = diagnosis_df,         name = \"diagnosis\",         domain = \"clinical\",         type = \"categorical\"     ),     list(         data = age_df,         name = \"age\",         domain = \"demographics\",         type = \"discrete\"     ),     uid = \"patient_id\" )  # Generate settings_matrix settings_matrix <- generate_settings_matrix(     data_list,     nrow = 1,     max_k = 40,     seed = 42 ) ## [1] \"The global seed has been changed!\" # Run SNF and clustering batch_snf_results <- batch_snf(     data_list,     settings_matrix,     return_similarity_matrices = TRUE ) ## [1] \"Row: 1/1 | Time remaining: 0 seconds\" ## [1] \"Total time taken: 0 seconds.\" solutions_matrix <- batch_snf_results$\"solutions_matrix\" similarity_matrices <- batch_snf_results$\"similarity_matrices\"  # The first (and only) similarity matrix: similarity_matrix <- similarity_matrices[[1]]  # The first (and only) cluster solution: cluster_solution <- get_cluster_solutions(solutions_matrix)$\"1\""},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"visualize-similarity-matrices-sorted-by-cluster-label","dir":"Articles","previous_headings":"","what":"Visualize similarity matrices sorted by cluster label","title":"Plotting Similarity Matrices","text":"similarity_matrix_heatmap wrapper ComplexHeatmap::Heatmap, convenient default transformations parameters viewing similarity matrix.  default transformations include plotting log(Similarity) rather default similarity matrix well rescaling diagonal matrix average value -diagonals. Additionally, similarity matrix gets reordered according provided cluster solution. ’s similarity matrix looks like without transformations:","code":"similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     cluster_solution = cluster_solution,     heatmap_height = grid::unit(10, \"cm\"),     heatmap_width = grid::unit(10, \"cm\") ) ## Sorting by cluster solution. similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     scale_diag = \"none\",     log_graph = FALSE,     heatmap_height = grid::unit(10, \"cm\"),     heatmap_width = grid::unit(10, \"cm\") )"},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"exporting-heatmaps","dir":"Articles","previous_headings":"","what":"Exporting heatmaps","title":"Plotting Similarity Matrices","text":"’s example can save heatmap (heatmap created ComplexHeatmap::Heatmap).","code":"grDevices::png(     \"my_heatmap.png\",     width = 300,     height = 300,     units = \"px\", )  similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     cluster_solution = cluster_solution )  grDevices::dev.off()"},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"annotations","dir":"Articles","previous_headings":"","what":"Annotations","title":"Plotting Similarity Matrices","text":"One piece functionality provided ComplexHeatmap::Heatmap ability supply visual annotations along rows columns heatmap. can always build annotations using standard approaches outline ComplexHeatmap Complete Reference. addition , package offers convenient functionality specify regular heatmap annotations barplot annotations directly provided dataframe data_list (). example , make use data supplied data_list.  chunk gives identical plot, using dataframe instead data_list. needed call set.seed() default, ComplexHeatmap::Heatmap randomly generates colours heatmap annotations. can instead specify colours using annotation_colours parameter:  colours red3, pink1, etc. built-R colours can browse calling colours(). reference, code shows achieve annotations using standard ComplexHeatmap syntax. Take look ComplexHeatmap Complete Reference learn possible package.","code":"# Providing the data for the annotations through a data_list set.seed(42) similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     cluster_solution = cluster_solution,     scale_diag = \"mean\",     log_graph = TRUE,     data_list = data_list,     left_hm = list(         \"Diagnosis\" = \"diagnosis\"     ),     top_hm = list(         \"Gender\" = \"gender\"     ),     top_bar = list(         \"Age\" = \"age\"     ),     heatmap_height = grid::unit(10, \"cm\"),     heatmap_width = grid::unit(10, \"cm\") ) ## Sorting by cluster solution. df <- collapse_dl(data_list) # Pools all the data in a data_list to a single df  # Providing the data for the annotations through an external dataframe set.seed(42) similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     cluster_solution = cluster_solution,     scale_diag = \"mean\",     log_graph = TRUE,     data = df,     left_hm = list(         \"Diagnosis\" = \"diagnosis\"     ),     top_hm = list(         \"Gender\" = \"gender\"     ),     top_bar = list(         \"Age\" = \"age\"     ) ) similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     cluster_solution = cluster_solution,     scale_diag = \"mean\",     log_graph = TRUE,     data_list = data_list,     left_hm = list(         \"Diagnosis\" = \"diagnosis\"     ),     top_hm = list(         \"Gender\" = \"gender\"     ),     top_bar = list(         \"Age\" = \"age\"     ),     annotation_colours = list(         Diagnosis = c(             \"definite asthma\" = \"red3\",             \"possible asthma\" = \"pink1\",             \"no asthma\" = \"bisque1\"         ),         Gender = c(             \"female\" = \"purple\",             \"male\" = \"lightgreen\"         )     ),     heatmap_height = grid::unit(10, \"cm\"),     heatmap_width = grid::unit(10, \"cm\") ) ## Sorting by cluster solution. merged_df <- collapse_dl(data_list) order <- sort(cluster_solution, index.return = TRUE)$\"ix\" merged_df <- merged_df[order, ]  top_annotations <- ComplexHeatmap::HeatmapAnnotation(     Age = ComplexHeatmap::anno_barplot(merged_df$\"age\"),     Gender = merged_df$\"gender\",     col = list(         Gender = c(             \"female\" = \"purple\",             \"male\" = \"lightgreen\"         )     ),     show_legend = TRUE )  left_annotations <- ComplexHeatmap::rowAnnotation(     Diagnosis = merged_df$\"diagnosis\",     col = list(         Diagnosis = c(             \"definite asthma\" = \"red3\",             \"possible asthma\" = \"pink1\",             \"no asthma\" = \"bisque1\"         )     ),     show_legend = TRUE )  similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     cluster_solution = cluster_solution,     scale_diag = \"mean\",     log_graph = TRUE,     data = df,     top_annotation = top_annotations,     left_annotation = left_annotations )"},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"more-on-sorting","dir":"Articles","previous_headings":"","what":"More on sorting","title":"Plotting Similarity Matrices","text":"aware ordering data similarity matrix influenced supply values cluster_solution order parameters. don’t think data lining properly, consider manually making sure similarity_matrix rows columns sorted preference (e.g., based cluster) order data matches. easier dataframe data_list, data_list forces patients sorted unique IDs upon generation.","code":""},{"path":"https://branchlab.github.io/metasnf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Prashanth Velayudhan. Author, maintainer. Nicholas Chan. Author. Xiaoqiao Xu. Author. Prajkta Kallurkar. Author. Shihao Ma. Author. Stephanie H Ameis. Author. Ana Patricia Balbon. Author. Adam Taback. Author. Brian Cox. Author. Anna Goldenberg. Author. Bo Wang. Author. Linda Hiraki. Author. Anne L Wheeler. Author, thesis advisor. Jasbir Dhaliwal. Author. Colin Hawco. Author. Lauren Erdman. Author.","code":""},{"path":"https://branchlab.github.io/metasnf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Velayudhan P, Chan N, Xu X, Kallurkar P, Ma S, Ameis S, Balbon , Taback , Cox B, Goldenberg , Wang B, Hiraki L, Wheeler , Dhaliwal J, Hawco C, Erdman L (2023). metasnf: Meta Clustering Similarity Network Fusion. R package version 0.2.0, https://branchlab.github.io/metasnf/.","code":"@Manual{,   title = {metasnf: Meta Clustering with Similarity Network Fusion},   author = {Prashanth Velayudhan and Nicholas Chan and Xiaoqiao Xu and Prajkta Kallurkar and Shihao Ma and Stephanie H Ameis and Ana Patricia Balbon and Adam Taback and Brian Cox and Anna Goldenberg and Bo Wang and Linda Hiraki and Anne L Wheeler and Jasbir Dhaliwal and Colin Hawco and Lauren Erdman},   year = {2023},   note = {R package version 0.2.0},   url = {https://branchlab.github.io/metasnf/}, }"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Meta Clustering with Similarity Network Fusion","text":"Necessary: R version 4.1.0 higher devtools package (install.packages(\"devtools\")) installation","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Meta Clustering with Similarity Network Fusion","text":"package currently active development. need R version 4.1.0 higher install package. recommend installing latest development version package (best stuff!): require stable version package, please keep track commit want installing.","code":"devtools::install_github(\"BRANCHlab/metasnf\") devtools::install_github(\"BRANCHlab/metasnf@8badfd4d7acaaf3b3c7af62d52b5c9324b82cc6c\")"},{"path":"https://branchlab.github.io/metasnf/index.html","id":"brief-overview","dir":"","previous_headings":"","what":"Brief Overview","title":"Meta Clustering with Similarity Network Fusion","text":"metasnf package facilitates usage meta clustering paradigm described Caruana et al., 2006 similarity network fusion (SNF) data integration procedure developed Wang et al., 2014. package offers comprehensive suite tools assist users transforming raw patient data patient subtypes, decision making subtyping process, visualization along way strong emphasis context-specific utility principled validation results.","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Meta Clustering with Similarity Network Fusion","text":"extremely minimal usage package looks something like : Check tutorial vignettes learn package can used: Simple usage package Complex usage package tutorials can found “articles” section documentation home page: https://branchlab.github.io/metasnf/index.html","code":"# Load the package library(metasnf)  # Setting up the data data_list <- generate_data_list(     list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(abcd_income, \"household_income\", \"demographics\", \"continuous\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\" )  # Specifying 5 different sets of settings for SNF settings_matrix <- generate_settings_matrix(     data_list,     nrow = 5,     max_k = 40,     seed = 42 ) #> [1] \"The global seed has been changed!\"  # This matrix has clustering solutions for each of the 5 SNF runs! solutions_matrix <- batch_snf(data_list, settings_matrix) #> [1] \"Row: 1/5 | Time remaining: 1 seconds\" #> [1] \"Row: 2/5 | Time remaining: 1 seconds\" #> [1] \"Row: 3/5 | Time remaining: 0 seconds\" #> [1] \"Row: 4/5 | Time remaining: 0 seconds\" #> [1] \"Row: 5/5 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 1 seconds.\""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Meta Clustering with Similarity Network Fusion","text":"use meta clustering? Clustering algorithms seek solutions members cluster similar members distinct clusters dissimilar . sufficiently noisy datasets many qualitatively distinct solutions similar scores clustering quality exist, necessarily case top solution selected clustering algorithm also useful one user’s context. address issue, original meta clustering procedure Caruana et al., 2006 involved generating large number reasonable clustering solutions, clustering solutions qualitatively similar ones, user examine “meta clusters” find something seems like ’ll useful. use SNF? clinical data setting, often access patient data across wide range domains, imaging, genetics, biomarkers, demographics. trying extract subtypes information, direct concatenation data followed cluster analysis can result substantial amount lost (valuable) signal contained individual domain. Empirically, SNF demonstrated effectively integrate highly diverse patient data purposes clinical subtyping.","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"package-structure","dir":"","previous_headings":"","what":"Package Structure","title":"Meta Clustering with Similarity Network Fusion","text":"major structures :","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"the-settings_matrix","dir":"","previous_headings":"Package Structure","what":"The settings_matrix","title":"Meta Clustering with Similarity Network Fusion","text":"settings_matrix dataframe includes tunable clustering settings columns. row represents distinct set clustering settings used produce single clustering solution SNF spectral clustering.","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"the-data_list","dir":"","previous_headings":"Package Structure","what":"The data_list","title":"Meta Clustering with Similarity Network Fusion","text":"data_list nested list contains preprocessed input data ready used clustering. list within data_list contains (1) dataframe used clustering, (2) name dataframe, (3) domain dataframe, (4) type data (continuous, ordinal, discrete, nominal (categorical), mixed) features within dataframe. Domains user-specified labels indicate dataframes describe similar sources data. example, structural MRI data diffusion MRI data may grouped within neuroimaging domain.","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"the-target_list","dir":"","previous_headings":"Package Structure","what":"The target_list","title":"Meta Clustering with Similarity Network Fusion","text":"optional data structure closely resembles data_list, contains data sources meant included direct inputs clustering. Data within target_list reserved --model measures comparing completed clustering solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"the-solutions_matrix","dir":"","previous_headings":"Package Structure","what":"The solutions_matrix","title":"Meta Clustering with Similarity Network Fusion","text":"solutions_matrix large dataframe appends cluster solution columns (one column per subject) settings_matrix. contains clustering results generated different settings included settings_matrix. solutions_matrix can convereted extended_solutions_matrix contains overall regression p-values measures stored target_list. extended_solutions_matrix useful pipelines separation across one several variables stored target_list serve primary metric automating selection top clustering solution. Alternatively, top clustering solution can selected regular solutions_matrix using traditional meta clustering approach clustering cluster solutions manually examining solutions qualitatively distinct “meta clusters” emerge.","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"recent-updates","dir":"","previous_headings":"","what":"Recent updates:","title":"Meta Clustering with Similarity Network Fusion","text":"Changes function names Capability defining custom clustering algorithms Added flexibility generation settings_matrix Capability calculating solution stability across patient resamplings cluster solutions Capability calculating wide range quality metrics cluster solutions Capability writing affinity matrices disk Capability running clustering every run SNF (makes sense paired previous change) Capability defining custom distance metrics (including feature weights)","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"work-in-progress","dir":"","previous_headings":"","what":"Work in progress:","title":"Meta Clustering with Similarity Network Fusion","text":"New visualization functions improvements existing visualization functions Updated vignette(s) fully document basic advance usage package","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"lower-priority","dir":"","previous_headings":"Work in progress:","what":"Lower priority:","title":"Meta Clustering with Similarity Network Fusion","text":"Adapt parallel processing variant batch_snf reflect changes Add tests / make package CRAN ready","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Meta Clustering with Similarity Network Fusion","text":"Contributions package welcome! collaborator access, please create new branch based main fork repo, make changes, submit pull request. collaborator access, please make fork repo, make changes, submit pull request. also welcome simply post suggested changes issues tab repo.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/CorrManhattan.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate predictor-outcome correlations in Manhattan plot — CorrManhattan","title":"Generate predictor-outcome correlations in Manhattan plot — CorrManhattan","text":"Manhattan plot showing predictor correlations outcome","code":""},{"path":"https://branchlab.github.io/metasnf/reference/CorrManhattan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate predictor-outcome correlations in Manhattan plot — CorrManhattan","text":"","code":"CorrManhattan(df_stat, outcome, dataset_label)"},{"path":"https://branchlab.github.io/metasnf/reference/CorrManhattan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate predictor-outcome correlations in Manhattan plot — CorrManhattan","text":"df_stat dataframe comprised predictive features vs single outcome correlation test statistics. comprises features rownames, columns following colnames: \"p.value\": correlation test, \"n\": number samples, \"Group\": datatype name, \"Group_index\": sequence datatypes displayed outcome name correlations computed . displayed plot title dataset_label labels feed SNF. displayed along x-axis Manhattan plot","code":""},{"path":"https://branchlab.github.io/metasnf/reference/CorrManhattan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate predictor-outcome correlations in Manhattan plot — CorrManhattan","text":"plot Manhattan plot","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD anxiety data — abcd_anxiety","title":"Mock ABCD anxiety data — abcd_anxiety","text":"randomly shuffled anonymized copy anxiety data NIMH Data archive. original file used pdem02.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cbcl_anxiety.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD anxiety data — abcd_anxiety","text":"","code":"abcd_anxiety"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":"abcd-anxiety","dir":"Reference","previous_headings":"","what":"abcd_anxiety","title":"Mock ABCD anxiety data — abcd_anxiety","text":"data frame 275 rows 2 columns: patient unique identifier ABCD dataset cbcl_anxiety_r Ordinal value impairment CBCL anxiety, either 0 (impairment), 1 (borderline clinical), 2 (clinically impaired)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD anxiety data — abcd_anxiety","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD ","title":"Mock ABCD ","text":"randomly shuffled anonymized copy depression data NIMH Data archive. original file used pdem02.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cbcl_depress. data transformed categorical colour values demonstrate Chi-squared test capabilities extend_solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD ","text":"","code":"abcd_colour"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":"abcd-colour","dir":"Reference","previous_headings":"","what":"abcd_colour","title":"Mock ABCD ","text":"data frame 275 rows 2 columns: patient unique identifier ABCD dataset colour Categorical transformation cbcl_depress.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD ","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD cortical surface area data — abcd_cort_sa","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"randomly shuffled anonymized copy cortical surface area data NIMH Data archive. original file used mrisdp10201.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cort_t.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"","code":"abcd_cort_sa"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":"abcd-cort-sa","dir":"Reference","previous_headings":"","what":"abcd_cort_sa","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"data frame 188 rows 152 columns: patient unique identifier ABCD dataset ... Cortical surface areas various ROIs (mm^2, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD cortical thickness data — abcd_cort_t","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"randomly shuffled anonymized copy cortical thickness data NIMH Data archive. original file used mrisdp10201.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cort_t.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"","code":"abcd_cort_t"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":"abcd-cort-t","dir":"Reference","previous_headings":"","what":"abcd_cort_t","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"data frame 188 rows 152 columns: patient unique identifier ABCD dataset ... Cortical thicknesses various ROIs (mm^3, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD depression data — abcd_depress","title":"Mock ABCD depression data — abcd_depress","text":"randomly shuffled anonymized copy depression data NIMH Data archive. original file used pdem02.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cbcl_depress.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD depression data — abcd_depress","text":"","code":"abcd_depress"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":"abcd-depress","dir":"Reference","previous_headings":"","what":"abcd_depress","title":"Mock ABCD depression data — abcd_depress","text":"data frame 275 rows 2 columns: patient unique identifier ABCD dataset cbcl_depress_r Ordinal value impairment CBCL anxiety, either 0 (impairment), 1 (borderline clinical), 2 (clinically impaired)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD depression data — abcd_depress","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_h_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD income data — abcd_h_income","title":"Mock ABCD income data — abcd_h_income","text":"Like abcd_income, NAs patient column","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_h_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD income data — abcd_h_income","text":"","code":"abcd_h_income"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_h_income.html","id":"abcd-income","dir":"Reference","previous_headings":"","what":"abcd_income","title":"Mock ABCD income data — abcd_h_income","text":"data frame 300 rows 2 columns: patient unique identifier ABCD dataset household_income Household income 3 category levels (low = 1, medium = 2, high = 3)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_h_income.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD income data — abcd_h_income","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD income data — abcd_income","title":"Mock ABCD income data — abcd_income","text":"randomly shuffled anonymized copy income data NIMH Data archive. original file used pdem02.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_income.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD income data — abcd_income","text":"","code":"abcd_income"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":"abcd-income","dir":"Reference","previous_headings":"","what":"abcd_income","title":"Mock ABCD income data — abcd_income","text":"data frame 300 rows 2 columns: patient unique identifier ABCD dataset household_income Household income 3 category levels (low = 1, medium = 2, high = 3)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD income data — abcd_income","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD pubertal status data — abcd_pubertal","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"randomly shuffled anonymized copy pubertal status data NIMH Data archive. original files used abcd_ssphp01.txt abcd_ssphy01.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_pubertal_status.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"","code":"abcd_pubertal"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":"abcd-pubertal","dir":"Reference","previous_headings":"","what":"abcd_pubertal","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"data frame 275 rows 2 columns: patient unique identifier ABCD dataset pubertal_status Average reported pubertal status child parent (1-5 categorical scale)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD subcortical volumes data — abcd_subc_v","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"randomly shuffled anonymized copy subcortical volume data NIMH Data archive. original file used smrip10201.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_subc_v.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"","code":"abcd_subc_v"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":"abcd-subc-v","dir":"Reference","previous_headings":"","what":"abcd_subc_v","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"data frame 174 rows 31 columns: patient unique identifier ABCD dataset ... Subcortical volumes various ROIs (mm^3, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns to a dataframe — add_columns","title":"Add columns to a dataframe — add_columns","text":"Add new columns dataframe providing character vector column names (param newcols) value occupy row new columns (param fill, NA default).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns to a dataframe — add_columns","text":"","code":"add_columns(df, newcols, fill = NA)"},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns to a dataframe — add_columns","text":"df dataframe extend newcols vector containing new column names fill values elements newly added columns. NA default.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns to a dataframe — add_columns","text":"extended_df dataframe containing added columns","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_design_matrix_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"deprecated function — add_design_matrix_rows","title":"deprecated function — add_design_matrix_rows","text":"deprecated function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_design_matrix_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deprecated function — add_design_matrix_rows","text":"","code":"add_design_matrix_rows()"},{"path":"https://branchlab.github.io/metasnf/reference/add_settings_matrix_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Add settings matrix rows — add_settings_matrix_rows","title":"Add settings matrix rows — add_settings_matrix_rows","text":"Add settings matrix rows","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_settings_matrix_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add settings matrix rows — add_settings_matrix_rows","text":"","code":"add_settings_matrix_rows(   settings_matrix,   seed = NULL,   nrows = 0,   min_removed_inputs = 0,   max_removed_inputs = sum(startsWith(colnames(settings_matrix), \"inc_\")) - 1,   dropout_dist = \"exponential\",   min_alpha = NULL,   max_alpha = NULL,   min_k = NULL,   max_k = NULL,   min_t = NULL,   max_t = NULL,   alpha_values = NULL,   k_values = NULL,   t_values = NULL,   possible_snf_schemes = c(1, 2, 3),   clustering_algorithms = NULL,   continuous_distances = NULL,   discrete_distances = NULL,   ordinal_distances = NULL,   categorical_distances = NULL,   mixed_distances = NULL,   distance_metrics_list = NULL,   snf_input_weights = NULL,   snf_domain_weights = NULL,   retry_limit = 10 )"},{"path":"https://branchlab.github.io/metasnf/reference/add_settings_matrix_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add settings matrix rows — add_settings_matrix_rows","text":"settings_matrix existing settings matrix seed set seed random matrix generation. Setting value change seed global environment. nrows Number rows generate settings matrix. min_removed_inputs smallest number input dataframes may randomly removed. default, 0. max_removed_inputs largest number input dataframes may randomly removed. default, 1 less provided input dataframes data_list. dropout_dist Parameter controlling random removal input dataframes occur. Can \"none\" (input dataframes randomly removed), \"uniform\" (uniformly sample min_removed_inputs max_removed_inputs determine number input dataframes remove), \"exponential\" (pick number input dataframes remove sampling min_removed_inputs max_removed_inputs exponential distribution; default). min_alpha minimum value alpha hyperparameter can . Random assigned value alpha row obtained uniformly sampling numbers min_alpha max_alpha intervals 0.1. used conjunction alpha_values parameter. max_alpha maximum value alpha hyperparameter can . See min_alpha parameter. used conjunction alpha_values parameter. min_k minimum value k hyperparameter can . Random assigned value k row obtained uniformly sampling numbers min_k max_k intervals 1. used conjunction k_values parameter. max_k maximum value k hyperparameter can . See min_k parameter. used conjunction k_values parameter. min_t minimum value t hyperparameter can . Random assigned value t row obtained uniformly sampling numbers min_t max_t intervals 1. used conjunction t_values parameter. max_t maximum value t hyperparameter can . See min_t parameter. used conjunction t_values parameter. alpha_values number numeric vector set possible values alpha can take . Value obtained uniformly sampling vector. used conjunction min_alpha max_alpha parameters. k_values number numeric vector set possible values k can take . Value obtained uniformly sampling vector. used conjunction min_k max_k parameters. t_values number numeric vector set possible values t can take . Value obtained uniformly sampling vector. used conjunction min_t max_t parameters. possible_snf_schemes vector containing possible snf_schemes uniformly randomly select . default, vector contains 3 possible schemes: c(1, 2, 3). 1 corresponds \"individual\" scheme, 2 corresponds \"domain\" scheme, 3 corresponds \"twostep\" scheme. clustering_algorithms list clustering algorithms uniformly randomly pick clustering. specified, randomly select spectral clustering using eigen-gap heuristic spectral clustering using rotation cost heuristic. See ?generate_clust_algs_list details running custom clustering algorithms. continuous_distances vector continuous distance metrics use custom distance_metrics_list provided. discrete_distances vector categorical distance metrics use custom distance_metrics_list provided. ordinal_distances vector categorical distance metrics use custom distance_metrics_list provided. categorical_distances vector categorical distance metrics use custom distance_metrics_list provided. mixed_distances vector mixed distance metrics use custom distance_metrics_list provided. distance_metrics_list List containing distance metrics vary . See ?generate_distance_metrics_list. snf_input_weights Nested list containing weights SNF used merge individual input measures (see ?generate_snf_weights) snf_domain_weights Nested list containing weights SNF used merge domains (see ?generate_snf_weights) retry_limit maximum number attempts generate novel row. function return matrices identical rows. range requested possible settings tightens number requested rows increases, risk randomly generating row already exists increases. new random row matched existing row retry_limit number times, function terminate.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_settings_matrix_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add settings matrix rows — add_settings_matrix_rows","text":"settings_matrix settings matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/adjusted_rand_index_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap meta-clustering results — adjusted_rand_index_heatmap","title":"Heatmap meta-clustering results — adjusted_rand_index_heatmap","text":"Heatmap meta-clustering results","code":""},{"path":"https://branchlab.github.io/metasnf/reference/adjusted_rand_index_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap meta-clustering results — adjusted_rand_index_heatmap","text":"","code":"adjusted_rand_index_heatmap(   solutions_matrix_aris,   title = \"\",   save = NULL,   cluster_cols = TRUE,   cluster_rows = TRUE,   hide_columns = FALSE,   hide_rows = FALSE,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/adjusted_rand_index_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap meta-clustering results — adjusted_rand_index_heatmap","text":"solutions_matrix_aris results meta_cluster function title plot title save optional path save figure cluster_cols boolean indicating columns shold clustered cluster_rows boolean indicating rows shold clustered hide_columns boolean indicating column names hidden hide_rows boolean indicating row names hidden ... additional parameters pass pheatmap","code":""},{"path":"https://branchlab.github.io/metasnf/reference/age_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock age data — age_df","title":"Mock age data — age_df","text":"Mock age data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/age_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock age data — age_df","text":"","code":"age_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/age_df.html","id":"age-df","dir":"Reference","previous_headings":"","what":"age_df","title":"Mock age data — age_df","text":"data frame 200 rows 2 columns: patient_id Random three-digit number uniquely identifying patient age Mock age variable","code":""},{"path":"https://branchlab.github.io/metasnf/reference/age_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock age data — age_df","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/alluvial_cluster_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Alluvial plot of patients across cluster counts and important variables — alluvial_cluster_plot","title":"Alluvial plot of patients across cluster counts and important variables — alluvial_cluster_plot","text":"Alluvial plot patients across cluster counts important variables","code":""},{"path":"https://branchlab.github.io/metasnf/reference/alluvial_cluster_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alluvial plot of patients across cluster counts and important variables — alluvial_cluster_plot","text":"","code":"alluvial_cluster_plot(   cluster_sequence,   similarity_matrix,   data_list = NULL,   data = NULL,   key_outcome,   key_label = key_outcome,   extra_outcomes = NULL,   title = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/alluvial_cluster_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alluvial plot of patients across cluster counts and important variables — alluvial_cluster_plot","text":"cluster_sequence list clustering algorithms (typically, algorithm varied different numbers clusters). similarity_matrix similarity matrix. data_list data_list contains variables include plot. data dataframe contains variables include plot. key_outcome name variable determines patient stream coloured alluvial plot. key_label Name key outcome used plot legend. extra_outcomes Names additional variables add plot. title Title plot.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a data_list object, sort data elements by subjectkey — arrange_dl","title":"Given a data_list object, sort data elements by subjectkey — arrange_dl","text":"Given data_list object, sort data elements subjectkey","code":""},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a data_list object, sort data elements by subjectkey — arrange_dl","text":"","code":"arrange_dl(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a data_list object, sort data elements by subjectkey — arrange_dl","text":"data_list data_list object arranged","code":""},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a data_list object, sort data elements by subjectkey — arrange_dl","text":"arranged_data_list arranged data_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assemble_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a dataframe and/or a data_list into a single dataframe — assemble_data","title":"Collapse a dataframe and/or a data_list into a single dataframe — assemble_data","text":"Collapse dataframe /data_list single dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assemble_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a dataframe and/or a data_list into a single dataframe — assemble_data","text":"","code":"assemble_data(data, data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/assemble_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a dataframe and/or a data_list into a single dataframe — assemble_data","text":"data dataframe. data_list data_list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram of cluster membership across an solutions matrix — assigned_clust_hist","title":"Histogram of cluster membership across an solutions matrix — assigned_clust_hist","text":"Histogram cluster membership across solutions matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram of cluster membership across an solutions matrix — assigned_clust_hist","text":"","code":"assigned_clust_hist(om, save = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram of cluster membership across an solutions matrix — assigned_clust_hist","text":"om solutions matrix save optional path save figure ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_pheatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of cluster membership across an solutions matrix — assigned_clust_pheatmap","title":"Heatmap of cluster membership across an solutions matrix — assigned_clust_pheatmap","text":"Heatmap cluster membership across solutions matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_pheatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of cluster membership across an solutions matrix — assigned_clust_pheatmap","text":"","code":"assigned_clust_pheatmap(om, save = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_pheatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of cluster membership across an solutions matrix — assigned_clust_pheatmap","text":"om solutions matrix save optional path save figure ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot of cluster membership across an solutions matrix — assigned_clust_scatter","title":"Scatter plot of cluster membership across an solutions matrix — assigned_clust_scatter","text":"Scatter plot cluster membership across solutions matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot of cluster membership across an solutions matrix — assigned_clust_scatter","text":"","code":"assigned_clust_scatter(om, save = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot of cluster membership across an solutions matrix — assigned_clust_scatter","text":"om solutions matrix save optional path save figure ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":null,"dir":"Reference","previous_headings":"","what":"Run variations of SNF as described by a settings matrix — batch_snf","title":"Run variations of SNF as described by a settings matrix — batch_snf","text":"Run variations SNF described settings matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run variations of SNF as described by a settings matrix — batch_snf","text":"","code":"batch_snf(   data_list,   settings_matrix,   processes = 1,   return_similarity_matrices = FALSE,   similarity_matrix_dir = NULL,   clust_algs_list = NULL,   suppress_clustering = FALSE,   distance_metrics_list = NULL,   weights_matrix = NULL,   quiet = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run variations of SNF as described by a settings matrix — batch_snf","text":"data_list Nested list input data. See ?get_data_list. settings_matrix matrix indicating parameters iterate SNF . processes Specify number processes used complete SNF iterations * 1 (default) Sequential processing: function iterate settings_matrix one row time loop. option make use multiple CPU cores, show progress bar. * 2 higher: Parallel processing use future.apply::future_apply distribute SNF iterations across specified number CPU cores. higher number available cores, warning printed maximum number cores used. * max: available cores used. return_similarity_matrices TRUE, function return list first element solutions matrix second element list similarity matrices row solutions_matrix. Default FALSE. similarity_matrix_dir specified, directory used save generated similarity matrices clust_algs_list List custom clustering algorithms apply final fused network. See ?generate_clust_algs_list suppress_clustering FALSE (default), apply default custom clustering algorithms provide cluster solutions every iteration SNF. TRUE, parameter similarity_matrix_dir must specified. distance_metrics_list distance_metrics_list. See ?generate_distance_metrics_list. weights_matrix matrix containing variable weights use distance matrix calculation. See ?generate_weights_matrix. quiet TRUE, print time remaining estimates.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run variations of SNF as described by a settings matrix — batch_snf","text":"populated_settings_matrix settings matrix filled columns related subtype membership","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_time_remaining.html","id":null,"dir":"Reference","previous_headings":"","what":"Time remaining until batch_snf completion — batch_snf_time_remaining","title":"Time remaining until batch_snf completion — batch_snf_time_remaining","text":"Time remaining batch_snf completion","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_time_remaining.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time remaining until batch_snf completion — batch_snf_time_remaining","text":"","code":"batch_snf_time_remaining(   seconds_per_row,   rows_remaining,   row,   remaining_seconds_vector )"},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_time_remaining.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time remaining until batch_snf completion — batch_snf_time_remaining","text":"seconds_per_row Integer seconds time taken recent SNF 'run rows_remaining Number rows left complete settings matrix row Current row settings matrix remaining_seconds_vector Vector storing 10 recent row completion times","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_time_remaining.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time remaining until batch_snf completion — batch_snf_time_remaining","text":"remaining_seconds_vector Updated remaining_seconds_vector","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_ari.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate adjusted rand index between two rows of solutions matrix — calc_ari","title":"Calculate adjusted rand index between two rows of solutions matrix — calc_ari","text":"Output matrix must row_id non-sub columns","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_ari.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate adjusted rand index between two rows of solutions matrix — calc_ari","text":"","code":"calc_ari(r1, r2, df)"},{"path":"https://branchlab.github.io/metasnf/reference/calc_ari.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate adjusted rand index between two rows of solutions matrix — calc_ari","text":"r1 first row cluster labels r2 second row cluster labels df dataframe containing cluster labels","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_ari.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate adjusted rand index between two rows of solutions matrix — calc_ari","text":"ari adjusted rand index","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_om_aris.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta-cluster calculations — calc_om_aris","title":"Meta-cluster calculations — calc_om_aris","text":"Generate matrix pairwise cluster-solution similarities Adjusted Rand index calculations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_om_aris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta-cluster calculations — calc_om_aris","text":"","code":"calc_om_aris(om)"},{"path":"https://branchlab.github.io/metasnf/reference/calc_om_aris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meta-cluster calculations — calc_om_aris","text":"om solutions_matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_om_aris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Meta-cluster calculations — calc_om_aris","text":"om_aris ARIs clustering solutions solutions matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_associations.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-values for pairwise associations of variables in a data_list — calculate_associations","title":"Calculate p-values for pairwise associations of variables in a data_list — calculate_associations","text":"Calculate p-values pairwise associations variables data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_associations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-values for pairwise associations of variables in a data_list — calculate_associations","text":"","code":"calculate_associations(   data_list,   verbose = FALSE,   key_association = NULL,   drop_self = TRUE )"},{"path":"https://branchlab.github.io/metasnf/reference/calculate_associations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-values for pairwise associations of variables in a data_list — calculate_associations","text":"data_list data_list containing variables pairwise associations. verbose TRUE, prints new line everytime p-value calculated. key_association variable named, returns dataframe p-values relative variable rather pairwise p-values. drop_self key_association specified drop_self TRUE, removes p-value row key_association variable (0).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_db_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Davies-Bouldin indices — calculate_db_indices","title":"Calculate Davies-Bouldin indices — calculate_db_indices","text":"Given solutions_matrix list similarity_matrices (single similarity_matrix solutions_matrix 1 row), return vector Davies-Bouldin indices","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_db_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Davies-Bouldin indices — calculate_db_indices","text":"","code":"calculate_db_indices(solutions_matrix, similarity_matrices)"},{"path":"https://branchlab.github.io/metasnf/reference/calculate_db_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Davies-Bouldin indices — calculate_db_indices","text":"solutions_matrix solutions_matrix (see ?batch_snf) similarity_matrices list similarity matrices (see ?batch_snf)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_db_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Davies-Bouldin indices — calculate_db_indices","text":"davies_bouldin_indices vector Davies-Bouldin indices cluster solution","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_db_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Davies-Bouldin indices — calculate_db_indices","text":"","code":"if (require(\"clv\")) {     # load package     library(metasnf)      # generate data_list     data_list <- generate_data_list(         list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),         list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),         list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),         list(abcd_income, \"household_income\", \"demographics\", \"continuous\"),         list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),         uid = \"patient\"     )      # build settings_matrix     settings_matrix <- generate_settings_matrix(data_list, nrow = 15, seed = 42)      # collect similarity matrices and solutions matrix from batch_snf     batch_snf_results <- batch_snf(         data_list,         settings_matrix,         return_similarity_matrices = TRUE     )      solutions_matrix <- batch_snf_results$\"solutions_matrix\"     similarity_matrices <- batch_snf_results$\"similarity_matrices\"      # calculate Davies-Bouldin indices     davies_bouldin_indices <- calculate_db_indices(         solutions_matrix,         similarity_matrices     ) } #> Loading required package: clv #> Loading required package: cluster #> Loading required package: class #> [1] \"The global seed has been changed!\" #> [1] \"Row: 1/15 | Time remaining: 5 seconds\" #> [1] \"Row: 2/15 | Time remaining: 4 seconds\" #> [1] \"Row: 3/15 | Time remaining: 3 seconds\" #> [1] \"Row: 4/15 | Time remaining: 3 seconds\" #> [1] \"Row: 5/15 | Time remaining: 3 seconds\" #> [1] \"Row: 6/15 | Time remaining: 3 seconds\" #> [1] \"Row: 7/15 | Time remaining: 3 seconds\" #> [1] \"Row: 8/15 | Time remaining: 2 seconds\" #> [1] \"Row: 9/15 | Time remaining: 2 seconds\" #> [1] \"Row: 10/15 | Time remaining: 2 seconds\" #> [1] \"Row: 11/15 | Time remaining: 1 seconds\" #> [1] \"Row: 12/15 | Time remaining: 1 seconds\" #> [1] \"Row: 13/15 | Time remaining: 1 seconds\" #> [1] \"Row: 14/15 | Time remaining: 0 seconds\" #> [1] \"Row: 15/15 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 5 seconds.\""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_dunn_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Dunn indices — calculate_dunn_indices","title":"Calculate Dunn indices — calculate_dunn_indices","text":"Given solutions_matrix list similarity_matrices (single similarity_matrix solutions_matrix 1 row), return vector Dunn indices","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_dunn_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Dunn indices — calculate_dunn_indices","text":"","code":"calculate_dunn_indices(solutions_matrix, similarity_matrices)"},{"path":"https://branchlab.github.io/metasnf/reference/calculate_dunn_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Dunn indices — calculate_dunn_indices","text":"solutions_matrix solutions_matrix (see ?batch_snf) similarity_matrices list similarity matrices (see ?batch_snf)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_dunn_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Dunn indices — calculate_dunn_indices","text":"dunn_indices vector Dunn indices cluster solution","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_dunn_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Dunn indices — calculate_dunn_indices","text":"","code":"if (require(\"clv\")) {     # load package     library(metasnf)      # generate data_list     data_list <- generate_data_list(         list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),         list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),         list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),         list(abcd_income, \"household_income\", \"demographics\", \"continuous\"),         list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),         uid = \"patient\"     )      # build settings_matrix     settings_matrix <- generate_settings_matrix(data_list, nrow = 15, seed = 42)      # collect similarity matrices and solutions matrix from batch_snf     batch_snf_results <- batch_snf(         data_list,         settings_matrix,         return_similarity_matrices = TRUE     )      solutions_matrix <- batch_snf_results$\"solutions_matrix\"     similarity_matrices <- batch_snf_results$\"similarity_matrices\"      # calculate Dunn indices     dunn_indices <- calculate_dunn_indices(         solutions_matrix,         similarity_matrices     ) } #> [1] \"The global seed has been changed!\" #> [1] \"Row: 1/15 | Time remaining: 2 seconds\" #> [1] \"Row: 2/15 | Time remaining: 2 seconds\" #> [1] \"Row: 3/15 | Time remaining: 2 seconds\" #> [1] \"Row: 4/15 | Time remaining: 3 seconds\" #> [1] \"Row: 5/15 | Time remaining: 2 seconds\" #> [1] \"Row: 6/15 | Time remaining: 2 seconds\" #> [1] \"Row: 7/15 | Time remaining: 2 seconds\" #> [1] \"Row: 8/15 | Time remaining: 2 seconds\" #> [1] \"Row: 9/15 | Time remaining: 2 seconds\" #> [1] \"Row: 10/15 | Time remaining: 1 seconds\" #> [1] \"Row: 11/15 | Time remaining: 1 seconds\" #> [1] \"Row: 12/15 | Time remaining: 1 seconds\" #> [1] \"Row: 13/15 | Time remaining: 1 seconds\" #> [1] \"Row: 14/15 | Time remaining: 0 seconds\" #> [1] \"Row: 15/15 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 4 seconds.\""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-values based on variable vectors and their types — calculate_pval","title":"Calculate p-values based on variable vectors and their types — calculate_pval","text":"Calculate p-values based variable vectors types","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-values based on variable vectors and their types — calculate_pval","text":"","code":"calculate_pval(var1, var2, type1, type2)"},{"path":"https://branchlab.github.io/metasnf/reference/calculate_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-values based on variable vectors and their types — calculate_pval","text":"var1 single vector containing variable. var2 single vector containing variable. type1 type var1 (continuous, discrete, ordinal, categorical). type2 type var2 (continuous, discrete, ordinal, categorical).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-values based on variable vectors and their types — calculate_pval","text":"pval p-value statistical test based provided types. Currently, either F-test p-value linear model least one variable non-categorical, chi-squared test p-value variables categorical.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_silhouettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate silhouette scores — calculate_silhouettes","title":"Calculate silhouette scores — calculate_silhouettes","text":"Given solutions_matrix list similarity_matrices (single similarity_matrix solutions_matrix 1 row), return list 'silhouette' objects cluster package","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_silhouettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate silhouette scores — calculate_silhouettes","text":"","code":"calculate_silhouettes(solutions_matrix, similarity_matrices)"},{"path":"https://branchlab.github.io/metasnf/reference/calculate_silhouettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate silhouette scores — calculate_silhouettes","text":"solutions_matrix solutions_matrix (see ?batch_snf) similarity_matrices list similarity matrices (see ?batch_snf)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_silhouettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate silhouette scores — calculate_silhouettes","text":"silhouette_scores list \"silhouette\" objects cluster package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_silhouettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate silhouette scores — calculate_silhouettes","text":"","code":"# load package library(metasnf)  # generate data_list data_list <- generate_data_list(     list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(abcd_income, \"household_income\", \"demographics\", \"continuous\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\" )  # build settings_matrix settings_matrix <- generate_settings_matrix(data_list, nrow = 15, seed = 42) #> [1] \"The global seed has been changed!\"  # collect similarity matrices and solutions matrix from batch_snf batch_snf_results <- batch_snf(     data_list,     settings_matrix,     return_similarity_matrices = TRUE ) #> [1] \"Row: 1/15 | Time remaining: 2 seconds\" #> [1] \"Row: 2/15 | Time remaining: 2 seconds\" #> [1] \"Row: 3/15 | Time remaining: 2 seconds\" #> [1] \"Row: 4/15 | Time remaining: 3 seconds\" #> [1] \"Row: 5/15 | Time remaining: 2 seconds\" #> [1] \"Row: 6/15 | Time remaining: 2 seconds\" #> [1] \"Row: 7/15 | Time remaining: 2 seconds\" #> [1] \"Row: 8/15 | Time remaining: 2 seconds\" #> [1] \"Row: 9/15 | Time remaining: 2 seconds\" #> [1] \"Row: 10/15 | Time remaining: 1 seconds\" #> [1] \"Row: 11/15 | Time remaining: 1 seconds\" #> [1] \"Row: 12/15 | Time remaining: 1 seconds\" #> [1] \"Row: 13/15 | Time remaining: 1 seconds\" #> [1] \"Row: 14/15 | Time remaining: 0 seconds\" #> [1] \"Row: 15/15 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 4 seconds.\"  solutions_matrix <- batch_snf_results$\"solutions_matrix\" similarity_matrices <- batch_snf_results$\"similarity_matrices\"  # calculate silhouette scores silhouette_scores <- calculate_silhouettes(     solutions_matrix,     similarity_matrices )  # plot the silhouette scores of the first solutions plot(silhouette_scores[[1]])"},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_anova.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate anova p-values for a characterization_df — cbcl_anova","title":"Calculate anova p-values for a characterization_df — cbcl_anova","text":"Calculate anova p-values characterization_df","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate anova p-values for a characterization_df — cbcl_anova","text":"","code":"cbcl_anova(characterization_df, bonferroni = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate anova p-values for a characterization_df — cbcl_anova","text":"characterization_df merged list containing cluster, subjectkey, various CBCL outcomes bonferroni boolean reporting bonferroni corrected p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_bar_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar chart CBCL values for a characterization dataframe — cbcl_bar_chart","title":"Bar chart CBCL values for a characterization dataframe — cbcl_bar_chart","text":"Bar chart CBCL values characterization dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_bar_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar chart CBCL values for a characterization dataframe — cbcl_bar_chart","text":"","code":"cbcl_bar_chart(characterization_df, outcome, nclust = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_bar_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar chart CBCL values for a characterization dataframe — cbcl_bar_chart","text":"characterization_df merged list containing cluster, subjectkey, various CBCL outcomes outcome string specifying outcome interest, e.g. cbcl_nausea nclust number clusters","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_ord_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate overall p-values for a characterization_df — cbcl_ord_reg","title":"Calculate overall p-values for a characterization_df — cbcl_ord_reg","text":"Calculate overall p-values characterization_df","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_ord_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate overall p-values for a characterization_df — cbcl_ord_reg","text":"","code":"cbcl_ord_reg(characterization_df, bonferroni = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_ord_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate overall p-values for a characterization_df — cbcl_ord_reg","text":"characterization_df merged list containing cluster, subjectkey, various CBCL outcomes bonferroni boolean reporting bonferroni corrected p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_ord_reg_from_om.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate overall p-values for an om — cbcl_ord_reg_from_om","title":"Calculate overall p-values for an om — cbcl_ord_reg_from_om","text":"Calculate overall p-values om","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_ord_reg_from_om.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate overall p-values for an om — cbcl_ord_reg_from_om","text":"","code":"cbcl_ord_reg_from_om(om, cbcl_list, bonferroni = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_ord_reg_from_om.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate overall p-values for an om — cbcl_ord_reg_from_om","text":"om solutions matrix cbcl_list list CBCL measures bonferroni boolean reporting bonferroni corrected p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert character-type columns of a dataframe to factor-type — char_to_fac","title":"Convert character-type columns of a dataframe to factor-type — char_to_fac","text":"Convert character-type columns dataframe factor-type","code":""},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert character-type columns of a dataframe to factor-type — char_to_fac","text":"","code":"char_to_fac(df)"},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert character-type columns of a dataframe to factor-type — char_to_fac","text":"df dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert character-type columns of a dataframe to factor-type — char_to_fac","text":"df_converted dataframe factor-type columns instead char-type columns","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_similarity_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Check validity of similarity matrices — check_similarity_matrices","title":"Check validity of similarity matrices — check_similarity_matrices","text":"Check see similarity matrices list following properties: maximum value entire matrix 0.5 Every value diagonal 0.5","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_similarity_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check validity of similarity matrices — check_similarity_matrices","text":"","code":"check_similarity_matrices(similarity_matrices)"},{"path":"https://branchlab.github.io/metasnf/reference/check_similarity_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check validity of similarity matrices — check_similarity_matrices","text":"similarity_matrices list similarity matrices","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_similarity_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check validity of similarity matrices — check_similarity_matrices","text":"valid_matrices Boolean indicating properties met similarity matrices","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_subj_orders_for_lp.html","id":null,"dir":"Reference","previous_headings":"","what":"Check subject orders for label propagation — check_subj_orders_for_lp","title":"Check subject orders for label propagation — check_subj_orders_for_lp","text":"Prior label propagation, essential subject orders full fused network supplied clustering information consistent.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_subj_orders_for_lp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check subject orders for label propagation — check_subj_orders_for_lp","text":"","code":"check_subj_orders_for_lp(data_list, om_row, n_train, n_test)"},{"path":"https://branchlab.github.io/metasnf/reference/check_subj_orders_for_lp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check subject orders for label propagation — check_subj_orders_for_lp","text":"data_list data list om_row solutions matrix row n_train number training subjects n_test number testing subjects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_subj_orders_for_lp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check subject orders for label propagation — check_subj_orders_for_lp","text":"all_checks_passed boolean indicating subs order","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_sq_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Chi-squared test p-value — chi_sq_p","title":"Chi-squared test p-value — chi_sq_p","text":"Returns p-value following chi-squared test (without Yates' continuity correction) distribution categorical variable cluster.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_sq_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chi-squared test p-value — chi_sq_p","text":"","code":"chi_sq_p(clust_membership, outcome_df, outcome_var)"},{"path":"https://branchlab.github.io/metasnf/reference/chi_sq_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chi-squared test p-value — chi_sq_p","text":"clust_membership Dataframe cluster membership (get_clustered_subs) outcome_df Dataframe containing outcome feature outcome_var Outcome feature string","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_sq_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chi-squared test p-value — chi_sq_p","text":"p_val chi-squared test p-value","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_squared_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Chi-squared test p-value (generic) — chi_squared_pval","title":"Chi-squared test p-value (generic) — chi_squared_pval","text":"Return p-value chi-squared test two variables","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_squared_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chi-squared test p-value (generic) — chi_squared_pval","text":"","code":"chi_squared_pval(cat_var1, cat_var2)"},{"path":"https://branchlab.github.io/metasnf/reference/chi_squared_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chi-squared test p-value (generic) — chi_squared_pval","text":"cat_var1 categorical variable. cat_var2 categorical variable.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_squared_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chi-squared test p-value (generic) — chi_squared_pval","text":"pval p-value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clean_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean a plot — clean_plot","title":"Clean a plot — clean_plot","text":"Given ggplot object list elements removed, return cleaned version plot.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clean_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean a plot — clean_plot","text":"","code":"clean_plot(plot, removables = c())"},{"path":"https://branchlab.github.io/metasnf/reference/clean_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean a plot — clean_plot","text":"plot ggplot object removables character vector items removed. Can contain \"x\" x-axis label, \"y\" y-axis label, \"legend\" remove legend.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clean_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean a plot — clean_plot","text":"plot cleaned ggplot object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clusterToOutcomeCorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to calculate correlation between cluster assignment to outcome variables and visualize to find meaningful clusters with Manhattan plot — clusterToOutcomeCorr","title":"Functions to calculate correlation between cluster assignment to outcome variables and visualize to find meaningful clusters with Manhattan plot — clusterToOutcomeCorr","text":"Calculate correlation clusters outcome using chi-squared (categorical outcome) /kruskal-wallis test (continuous outcome) data set integrated using SNF, generates long format data input ClustersToOutcomeManhattan","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clusterToOutcomeCorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to calculate correlation between cluster assignment to outcome variables and visualize to find meaningful clusters with Manhattan plot — clusterToOutcomeCorr","text":"","code":"clusterToOutcomeCorr(df, outcomes, method, datatype, size)"},{"path":"https://branchlab.github.io/metasnf/reference/clusterToOutcomeCorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to calculate correlation between cluster assignment to outcome variables and visualize to find meaningful clusters with Manhattan plot — clusterToOutcomeCorr","text":"df dataframe samples cluster_column outcomes columns. outcomes one outcomes interest df method correlation test method (\"chi-squared\" \"kruskal\") datatype name SNF integration datatype size sample size datatype integrated","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clusterToOutcomeCorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to calculate correlation between cluster assignment to outcome variables and visualize to find meaningful clusters with Manhattan plot — clusterToOutcomeCorr","text":"dataframe correlation test results cluster categories vs outcomes. output can fed directly clusterToOutcomeManhattan","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clusterToOutcomeManhattan.html","id":null,"dir":"Reference","previous_headings":"","what":"Display cluster assignment to outcome correlation as Manhattan plot — clusterToOutcomeManhattan","title":"Display cluster assignment to outcome correlation as Manhattan plot — clusterToOutcomeManhattan","text":"Manhattan plot plots correlation SNF clustering specified outcome, colored data types, dot size represents sample size.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clusterToOutcomeManhattan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display cluster assignment to outcome correlation as Manhattan plot — clusterToOutcomeManhattan","text":"","code":"clusterToOutcomeManhattan(target_pvals, levels = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/clusterToOutcomeManhattan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display cluster assignment to outcome correlation as Manhattan plot — clusterToOutcomeManhattan","text":"target_pvals short Correlation Clusters vs Outcomes (cco). dataframe columns: datatype: data type integrated clustered. Think predictor outcomes: outcome variables computed datatype. Think outcome p_value: p_value statistical testing datatype clusters vs outcome size: levels optional argument re-arrange outcome display x-axis","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clusterToOutcomeManhattan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display cluster assignment to outcome correlation as Manhattan plot — clusterToOutcomeManhattan","text":"plot Manhattan plot","code":""},{"path":"https://branchlab.github.io/metasnf/reference/collapse_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a data_list into a single dataframe — collapse_dl","title":"Collapse a data_list into a single dataframe — collapse_dl","text":"Collapse data_list single dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/collapse_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a data_list into a single dataframe — collapse_dl","text":"","code":"collapse_dl(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/collapse_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a data_list into a single dataframe — collapse_dl","text":"data_list data_list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","title":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","text":"Column name \"subjectkey\" reserved unique identifier subjects. function ensures dataframes UID set \"subjectkey\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","text":"","code":"convert_uids(data_list, uid = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","text":"data_list data_list uid (string) name uid column currently used data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","text":"dl_renamed_id data list 'subjectkey' UID","code":""},{"path":"https://branchlab.github.io/metasnf/reference/corrHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate correlation heatmap — corrHeatmap","title":"Generate correlation heatmap — corrHeatmap","text":"Generate correlation heatmap","code":""},{"path":"https://branchlab.github.io/metasnf/reference/corrHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate correlation heatmap — corrHeatmap","text":"","code":"corrHeatmap(corr, row_km, column_km, labels_color = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/corrHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate correlation heatmap — corrHeatmap","text":"corr matrix outcomes-outcomes correlation p_values row_km kmean partitioning features along rows display column_km kmean partitioning features along columns display labels_color optional argument specify color labels datatypes","code":""},{"path":"https://branchlab.github.io/metasnf/reference/corrHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate correlation heatmap — corrHeatmap","text":"hm correlation heatmap","code":""},{"path":"https://branchlab.github.io/metasnf/reference/corrHeatmap_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate correlation heatmap legend — corrHeatmap_legend","title":"Generate correlation heatmap legend — corrHeatmap_legend","text":"Generate legend correlation heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/corrHeatmap_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate correlation heatmap legend — corrHeatmap_legend","text":"","code":"corrHeatmap_legend(legend_name, labels, labels_color)"},{"path":"https://branchlab.github.io/metasnf/reference/corrHeatmap_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate correlation heatmap legend — corrHeatmap_legend","text":"legend_name graph path saved labels argument specify outcome label names labels_color argument specify outcome label name colors","code":""},{"path":"https://branchlab.github.io/metasnf/reference/corrHeatmap_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate correlation heatmap legend — corrHeatmap_legend","text":"pd collection heatmap legends saved file current path","code":""},{"path":"https://branchlab.github.io/metasnf/reference/diagnosis_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock diagnosis data — diagnosis_df","title":"Mock diagnosis data — diagnosis_df","text":"Mock diagnosis data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/diagnosis_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock diagnosis data — diagnosis_df","text":"","code":"diagnosis_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/diagnosis_df.html","id":"diagnosis-df","dir":"Reference","previous_headings":"","what":"diagnosis_df","title":"Mock diagnosis data — diagnosis_df","text":"data frame 200 rows 2 columns: patient_id Random three-digit number uniquely identifying patient diagnosis Mock diagnosis variable","code":""},{"path":"https://branchlab.github.io/metasnf/reference/diagnosis_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock diagnosis data — diagnosis_df","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domain_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"SNF scheme: Domain merge — domain_merge","title":"SNF scheme: Domain merge — domain_merge","text":"Given data_list, returns new data_list original data objects particlar domain concatenated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domain_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SNF scheme: Domain merge — domain_merge","text":"","code":"domain_merge(   data_list,   cont_dist_fn,   disc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row,   k,   alpha,   t )"},{"path":"https://branchlab.github.io/metasnf/reference/domain_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SNF scheme: Domain merge — domain_merge","text":"data_list nested list input data generated function get_data_list() cont_dist_fn distance metric function continuous data disc_dist_fn distance metric function discrete data ord_dist_fn distance metric function ordinal data cat_dist_fn distance metric function categorical data mix_dist_fn distance metric function mixed data weights_row dataframe row containing variable weights k k hyperparameter alpha alpha/eta/sigma hyperparameter t SNF number iterations hyperparameter","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domain_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SNF scheme: Domain merge — domain_merge","text":"fused_network final fused network clustering","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":null,"dir":"Reference","previous_headings":"","what":"Domains — domains","title":"Domains — domains","text":"Domains","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domains — domains","text":"","code":"domains(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domains — domains","text":"data_list nested list input data generated function get_data_list()","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Domains — domains","text":"domain_list list domains","code":""},{"path":"https://branchlab.github.io/metasnf/reference/drop_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute inclusion — drop_inputs","title":"Execute inclusion — drop_inputs","text":"Given data list settings matrix row, returns data list selected inputs","code":""},{"path":"https://branchlab.github.io/metasnf/reference/drop_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute inclusion — drop_inputs","text":"","code":"drop_inputs(settings_matrix, data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/drop_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute inclusion — drop_inputs","text":"settings_matrix matrix indicating parameters iterate SNF data_list nested list input data generated function get_data_list()","code":""},{"path":"https://branchlab.github.io/metasnf/reference/drop_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute inclusion — drop_inputs","text":"selected_data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/euclidean_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance metric: Euclidean distance — euclidean_distance","title":"Distance metric: Euclidean distance — euclidean_distance","text":"Distance metric: Euclidean distance","code":""},{"path":"https://branchlab.github.io/metasnf/reference/euclidean_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance metric: Euclidean distance — euclidean_distance","text":"","code":"euclidean_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/euclidean_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance metric: Euclidean distance — euclidean_distance","text":"df Dataframe containing least 1 data column weights_row Single-row dataframe column names contain column names df row contains corresponding weights_row.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/euclidean_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance metric: Euclidean distance — euclidean_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_design_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"deprecated function — execute_design_matrix","title":"deprecated function — execute_design_matrix","text":"deprecated function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_design_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deprecated function — execute_design_matrix","text":"","code":"execute_design_matrix()"},{"path":"https://branchlab.github.io/metasnf/reference/execute_design_matrix_p.html","id":null,"dir":"Reference","previous_headings":"","what":"deprecated function — execute_design_matrix_p","title":"deprecated function — execute_design_matrix_p","text":"deprecated function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_design_matrix_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deprecated function — execute_design_matrix_p","text":"","code":"execute_design_matrix_p()"},{"path":"https://branchlab.github.io/metasnf/reference/execute_inclusion.html","id":null,"dir":"Reference","previous_headings":"","what":"deprecated function — execute_inclusion","title":"deprecated function — execute_inclusion","text":"deprecated function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_inclusion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deprecated function — execute_inclusion","text":"","code":"execute_inclusion()"},{"path":"https://branchlab.github.io/metasnf/reference/expression_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Modification of SNFtool mock dataframe ","title":"Modification of SNFtool mock dataframe ","text":"Modification SNFtool mock dataframe \"Data1\"","code":""},{"path":"https://branchlab.github.io/metasnf/reference/expression_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modification of SNFtool mock dataframe ","text":"","code":"expression_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/expression_df.html","id":"expression-df","dir":"Reference","previous_headings":"","what":"expression_df","title":"Modification of SNFtool mock dataframe ","text":"data frame 200 rows 3 columns: gene_1_expression Mock gene expression variable gene_2_expression Mock gene expression variable patient_id Random three-digit number uniquely identifying patient","code":""},{"path":"https://branchlab.github.io/metasnf/reference/expression_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Modification of SNFtool mock dataframe ","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend an solutions matrix to include outcome evaluations — extend_solutions","title":"Extend an solutions matrix to include outcome evaluations — extend_solutions","text":"Extend solutions matrix include outcome evaluations","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend an solutions matrix to include outcome evaluations — extend_solutions","text":"","code":"extend_solutions(solutions_matrix, target_list)"},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend an solutions matrix to include outcome evaluations — extend_solutions","text":"solutions_matrix solutions_matrix target_list target_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend an solutions matrix to include outcome evaluations — extend_solutions","text":"extended_solutions_matrix extended solutions matrix contains p-value columns outcome provided target_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/format_weights_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep weights_row for matrix multiplication — format_weights_row","title":"Prep weights_row for matrix multiplication — format_weights_row","text":"Wrapper around diag() function. function created diag() applied scalar spit scalar back , instead returns identity matrix dimension (scalar * scalar).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/format_weights_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep weights_row for matrix multiplication — format_weights_row","text":"","code":"format_weights_row(weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/format_weights_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep weights_row for matrix multiplication — format_weights_row","text":"weights_row Vector (possibly size 1) weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fraction_clustered_together.html","id":null,"dir":"Reference","previous_headings":"","what":"Average fraction of clustering together — fraction_clustered_together","title":"Average fraction of clustering together — fraction_clustered_together","text":"Calculate average fraction times patients clusted together full solution continued cluster together subsampled solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fraction_clustered_together.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average fraction of clustering together — fraction_clustered_together","text":"","code":"fraction_clustered_together(   data_list_subsamples,   settings_matrix,   solutions_matrix )"},{"path":"https://branchlab.github.io/metasnf/reference/fraction_clustered_together.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average fraction of clustering together — fraction_clustered_together","text":"data_list_subsamples list subsets larger data_list. See ?subsample_data_list obtain object. settings_matrix settings_matrix. solutions_matrix solutions_matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fraction_clustered_together.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average fraction of clustering together — fraction_clustered_together","text":"fraction_together_df Dataframe containing average fraction continued clustering together supplied solutions","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gender_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock gender data — gender_df","title":"Mock gender data — gender_df","text":"Mock gender data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gender_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock gender data — gender_df","text":"","code":"gender_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/gender_df.html","id":"gender-df","dir":"Reference","previous_headings":"","what":"gender_df","title":"Mock gender data — gender_df","text":"data frame 200 rows 2 columns: patient_id Random three-digit number uniquely identifying patient gender_df Mock gene methylation variable","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gender_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock gender data — gender_df","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_annotations_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate annotations list — generate_annotations_list","title":"Generate annotations list — generate_annotations_list","text":"Intermediate function takes formatted lists variables annotations viewed returns annotation objects usable ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_annotations_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate annotations list — generate_annotations_list","text":"","code":"generate_annotations_list(   df,   left_bar = NULL,   right_bar = NULL,   top_bar = NULL,   bottom_bar = NULL,   left_hm = NULL,   right_hm = NULL,   top_hm = NULL,   bottom_hm = NULL,   annotation_colours = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_annotations_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate annotations list — generate_annotations_list","text":"df Dataframe containing data specified remaining arguments. left_bar Named list strings, strings variables df used barplot annotation left plot names names used caption plots legends. right_bar See left_bar. top_bar See left_bar. bottom_bar See left_bar. left_hm Like left_bar, heatmap annotation instead barplot annotation. right_hm See left_hm. top_hm See left_hm. bottom_hm See left_hm. annotation_colours Named list heatmap annotations colours.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_annotations_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate annotations list — generate_annotations_list","text":"annotations_list named list annotations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of custom clustering algorithms — generate_clust_algs_list","title":"Generate a list of custom clustering algorithms — generate_clust_algs_list","text":"function can used specify custom clustering algorithms apply final similarity matrices produced run batch_snf function.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of custom clustering algorithms — generate_clust_algs_list","text":"","code":"generate_clust_algs_list(..., disable_base = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a list of custom clustering algorithms — generate_clust_algs_list","text":"... arbitrary number named clustering functions (see examples ) disable_base TRUE, prepend base clustering algorithms (spectral_eigen spectral_rot, apply spectral clustering use eigen-gap rotation cost heuristics respectively determining number clusters graph.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list of custom clustering algorithms — generate_clust_algs_list","text":"clust_algs_list well-formatted list clustering algorithms can passed batch_snf generate_settings_list functions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a list of custom clustering algorithms — generate_clust_algs_list","text":"","code":"# Using just the base clustering algorithms -------------------------------- # This will just contain spectral_eigen and spectral_rot clust_algs_list <- generate_clust_algs_list()  # Adding algorithms provided by the package -------------------------------- # This will contain the base clustering algorithms (spectral_eigen, #  spectral_rot) as well as two pre-defined spectral clustering functions #  that force the number of clusters to be two or five clust_algs_list <- generate_clust_algs_list(     \"two_cluster_spectral\" = spectral_two,     \"five_cluster_spectral\" = spectral_five )  # Adding your own algorithms ----------------------------------------------- # This will contain the base and user-provided clustering algorithms my_clustering_algorithm <- function(similarity_matrix) {     # your code that converts similarity matrix to clusters here...     # solution_data <- list(\"solution\" = solution, \"nclust\" = number_of_clusters)     # return(solution_data) }  # Suppress the base algorithms---------------------------------------------- # This will contain only user-provided clustering algorithms  clust_algs_list <- generate_clust_algs_list(     \"two_cluster_spectral\" = spectral_two,     \"five_cluster_spectral\" = spectral_five,     disable_base = TRUE )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data_list object — generate_data_list","title":"Generate data_list object — generate_data_list","text":"major data object processed iterating settings matrix. full list contains one list per measurement type. Within measurement type's list, elements include actual data structure, name, domain, data 'type' (.e, numeric categorical).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data_list object — generate_data_list","text":"","code":"generate_data_list(   ...,   uid = NULL,   test_subjects = NULL,   train_subjects = NULL,   assigned_splits = NULL,   return_missing = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data_list object — generate_data_list","text":"... number list formatted (df, \"df_name\", \"df_domain\", \"df_type\") number lists lists formatted (df, \"df_name\", \"df_domain\", \"df_type\") uid (string) name uid column currently used data test_subjects character vector test subjects (useful building full data list label propagation) train_subjects character vector train subjects (useful building full data list label propagation) assigned_splits ouptut assign_splits function - can given alternative specifying train/test subjects separately. return_missing TRUE, function returns list first element data_list second element vector unique IDs patients removed complete data filtration step.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate data_list object — generate_data_list","text":"-: include checks make sure format data list correct","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data_list object — generate_data_list","text":"","code":"heart_rate_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var1 = c(0.04, 0.1, 0.3),     var2 = c(30, 2, 0.3) )  personality_test_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var3 = c(900, 1990, 373),     var4 = c(509, 2209, 83) )  dl <- generate_data_list(     list(heart_rate_df, \"data1\", \"domain1\", \"continuous\"),     list(personality_test_df, \"data2\", \"domain2\", \"continuous\"),     uid = \"patient_id\" )  # Alternative loading: providing a single list of lists  list_of_lists <- list(     list(heart_rate_df, \"data1\", \"domain1\", \"continuous\"),     list(personality_test_df, \"data2\", \"domain2\", \"continuous\") )  dl <- generate_data_list(     list_of_lists,     uid = \"patient_id\" )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_design_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"deprecated function — generate_design_matrix","title":"deprecated function — generate_design_matrix","text":"deprecated function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_design_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deprecated function — generate_design_matrix","text":"","code":"generate_design_matrix()"},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of distance metrics — generate_distance_metrics_list","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"function can used specify custom distance metrics","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"","code":"generate_distance_metrics_list(   continuous_distances = NULL,   discrete_distances = NULL,   ordinal_distances = NULL,   categorical_distances = NULL,   mixed_distances = NULL,   keep_defaults = TRUE )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"continuous_distances named list distance metric functions discrete_distances named list distance metric functions ordinal_distances named list distance metric functions categorical_distances named list distance metric functions mixed_distances named list distance metric functions keep_defaults TRUE (default), prepend base distance metrics (euclidean standard normalized euclidean)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"distance_metrics_list well-formatted list distance metrics","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"","code":"# Using just the base distance metrics  ------------------------------------ distance_metrics_list <- generate_distance_metrics_list()  # Adding your own metrics -------------------------------------------------- # This will contain the base and user-provided clustering algorithms my_distance_metric <- function(df) {     # your code that converts a dataframe to a distance metric here...     # return(distance_metric) }  distance_metrics_list <- generate_distance_metrics_list(     continuous_distances = list(          \"my_distance_metric\" = my_distance_metric     ) )  # Suppress the base metrics------------------------------------------------- # This will contain only user-provided clustering algorithms  distance_metrics_list <- generate_distance_metrics_list(     continuous_distances = list(          \"my_distance_metric\" = my_distance_metric     ),     discrete_distances = list(          \"my_distance_metric\" = my_distance_metric     ),     ordinal_distances = list(          \"my_distance_metric\" = my_distance_metric     ),     categorical_distances = list(          \"my_distance_metric\" = my_distance_metric     ),     mixed_distances = list(          \"my_distance_metric\" = my_distance_metric     ),     keep_defaults = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_output_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"deprecated function — generate_output_matrix","title":"deprecated function — generate_output_matrix","text":"deprecated function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_output_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deprecated function — generate_output_matrix","text":"","code":"generate_output_matrix()"},{"path":"https://branchlab.github.io/metasnf/reference/generate_settings_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a settings matrix — generate_settings_matrix","title":"Build a settings matrix — generate_settings_matrix","text":"Build settings matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_settings_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a settings matrix — generate_settings_matrix","text":"","code":"generate_settings_matrix(   data_list,   seed = NULL,   nrows = 0,   min_removed_inputs = 0,   max_removed_inputs = length(data_list) - 1,   dropout_dist = \"exponential\",   min_alpha = NULL,   max_alpha = NULL,   min_k = NULL,   max_k = NULL,   min_t = NULL,   max_t = NULL,   alpha_values = NULL,   k_values = NULL,   t_values = NULL,   possible_snf_schemes = c(1, 2, 3),   clustering_algorithms = NULL,   continuous_distances = NULL,   discrete_distances = NULL,   ordinal_distances = NULL,   categorical_distances = NULL,   mixed_distances = NULL,   distance_metrics_list = NULL,   snf_input_weights = NULL,   snf_domain_weights = NULL,   retry_limit = 10 )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_settings_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a settings matrix — generate_settings_matrix","text":"data_list data list object determine variables inclusion exclusion. seed set seed random matrix generation. Setting value change seed global environment. nrows Number rows generate settings matrix. min_removed_inputs smallest number input dataframes may randomly removed. default, 0. max_removed_inputs largest number input dataframes may randomly removed. default, 1 less provided input dataframes data_list. dropout_dist Parameter controlling random removal input dataframes occur. Can \"none\" (input dataframes randomly removed), \"uniform\" (uniformly sample min_removed_inputs max_removed_inputs determine number input dataframes remove), \"exponential\" (pick number input dataframes remove sampling min_removed_inputs max_removed_inputs exponential distribution; default). min_alpha minimum value alpha hyperparameter can . Random assigned value alpha row obtained uniformly sampling numbers min_alpha max_alpha intervals 0.1. used conjunction alpha_values parameter. max_alpha maximum value alpha hyperparameter can . See min_alpha parameter. used conjunction alpha_values parameter. min_k minimum value k hyperparameter can . Random assigned value k row obtained uniformly sampling numbers min_k max_k intervals 1. used conjunction k_values parameter. max_k maximum value k hyperparameter can . See min_k parameter. used conjunction k_values parameter. min_t minimum value t hyperparameter can . Random assigned value t row obtained uniformly sampling numbers min_t max_t intervals 1. used conjunction t_values parameter. max_t maximum value t hyperparameter can . See min_t parameter. used conjunction t_values parameter. alpha_values number numeric vector set possible values alpha can take . Value obtained uniformly sampling vector. used conjunction min_alpha max_alpha parameters. k_values number numeric vector set possible values k can take . Value obtained uniformly sampling vector. used conjunction min_k max_k parameters. t_values number numeric vector set possible values t can take . Value obtained uniformly sampling vector. used conjunction min_t max_t parameters. possible_snf_schemes vector containing possible snf_schemes uniformly randomly select . default, vector contains 3 possible schemes: c(1, 2, 3). 1 corresponds \"individual\" scheme, 2 corresponds \"domain\" scheme, 3 corresponds \"twostep\" scheme. clustering_algorithms list clustering algorithms uniformly randomly pick clustering. specified, randomly select spectral clustering using eigen-gap heuristic spectral clustering using rotation cost heuristic. See ?generate_clust_algs_list details running custom clustering algorithms. continuous_distances vector continuous distance metrics use custom distance_metrics_list provided. discrete_distances vector categorical distance metrics use custom distance_metrics_list provided. ordinal_distances vector categorical distance metrics use custom distance_metrics_list provided. categorical_distances vector categorical distance metrics use custom distance_metrics_list provided. mixed_distances vector mixed distance metrics use custom distance_metrics_list provided. distance_metrics_list List containing distance metrics vary . See ?generate_distance_metrics_list. snf_input_weights Nested list containing weights SNF used merge individual input measures (see ?generate_snf_weights) snf_domain_weights Nested list containing weights SNF used merge domains (see ?generate_snf_weights) retry_limit maximum number attempts generate novel row. function return matrices identical rows. range requested possible settings tightens number requested rows increases, risk randomly generating row already exists increases. new random row matched existing row retry_limit number times, function terminate.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_settings_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a settings matrix — generate_settings_matrix","text":"settings_matrix settings matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_solutions_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Build solutions matrix — generate_solutions_matrix","title":"Build solutions matrix — generate_solutions_matrix","text":"matrix contain columns populated SNF results.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_solutions_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build solutions matrix — generate_solutions_matrix","text":"","code":"generate_solutions_matrix(data_list, settings_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/generate_solutions_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build solutions matrix — generate_solutions_matrix","text":"data_list nested list input data generated function get_data_list() settings_matrix matrix indicating parameters iterate SNF ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_solutions_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build solutions matrix — generate_solutions_matrix","text":"solutions_matrix solutions matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_target_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate target_list object — generate_target_list","title":"Generate target_list object — generate_target_list","text":"major object containing outcome variables","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_target_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate target_list object — generate_target_list","text":"","code":"generate_target_list(..., uid = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/generate_target_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate target_list object — generate_target_list","text":"... Lists outcomes formatted (dataframe, \"name\", \"type\") uid (string) name uid column currently used data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_target_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate target_list object — generate_target_list","text":"target_list structure containing outcome measure data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a matrix to store variable weights — generate_weights_matrix","title":"Generate a matrix to store variable weights — generate_weights_matrix","text":"Generate matrix store variable weights","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a matrix to store variable weights — generate_weights_matrix","text":"","code":"generate_weights_matrix(data_list = NULL, nrow = 1, fill = \"ones\")"},{"path":"https://branchlab.github.io/metasnf/reference/generate_weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a matrix to store variable weights — generate_weights_matrix","text":"data_list data_list column names spanning variables may ever require weights. provided time data parameter. nrow Number rows generate template weights matrix . fill String indicating populate generate rows . Can \"ones\" (default; fill matrix 1), \"uniform\" (fill matrix uniformly distributed random values), \"exponential\" (fill matrix exponentially distributed random values).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a matrix to store variable weights — generate_weights_matrix","text":"weights_matrix properly formatted matrix containing columns variables require weights rows","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract dataframe of cluster and subject key from solutions matrix row — get_cluster_df","title":"Extract dataframe of cluster and subject key from solutions matrix row — get_cluster_df","text":"Extract dataframe cluster subject key solutions matrix row","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract dataframe of cluster and subject key from solutions matrix row — get_cluster_df","text":"","code":"get_cluster_df(om_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract dataframe of cluster and subject key from solutions matrix row — get_cluster_df","text":"om_row Output matrix row","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract dataframe of cluster and subject key from solutions matrix row — get_cluster_df","text":"cluster_df dataframe cluster subjectkey","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_solutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all cluster solutions from a solutions_matrix — get_cluster_solutions","title":"Extract all cluster solutions from a solutions_matrix — get_cluster_solutions","text":"Extract cluster solutions solutions_matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_solutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all cluster solutions from a solutions_matrix — get_cluster_solutions","text":"","code":"get_cluster_solutions(solutions_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_solutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all cluster solutions from a solutions_matrix — get_cluster_solutions","text":"solutions_matrix solutions_matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_solutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all cluster solutions from a solutions_matrix — get_cluster_solutions","text":"cluster_solutions dataframe row patient column different run SNF stored solutions_matrix. Values along columns cluster patient assigned .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clustered_subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get clustered subjects — get_clustered_subs","title":"Get clustered subjects — get_clustered_subs","text":"Pull dataframe clustered subjects solutions matrix structure.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clustered_subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get clustered subjects — get_clustered_subs","text":"","code":"get_clustered_subs(solutions_matrix_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_clustered_subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get clustered subjects — get_clustered_subs","text":"solutions_matrix_row Output matrix row containing subtype membership","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clustered_subs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get clustered subjects — get_clustered_subs","text":"clustered_subs Dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract list of assigned clusters — get_clusters","title":"Extract list of assigned clusters — get_clusters","text":"Extract list assigned clusters","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract list of assigned clusters — get_clusters","text":"","code":"get_clusters(om_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract list of assigned clusters — get_clusters","text":"om_row Output matrix row","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract list of assigned clusters — get_clusters","text":"clusters list assigned clusters","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance matrices — get_dist_matrix","title":"Calculate distance matrices — get_dist_matrix","text":"Given dataframe numerical variables, return euclidean distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance matrices — get_dist_matrix","text":"","code":"get_dist_matrix(   df,   input_type,   cont_dist_fn,   disc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row )"},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance matrices — get_dist_matrix","text":"df Raw dataframe subject IDs column \"subjectkey\" input_type Either \"numeric\" (resulting euclidean distances), \"categorical\" (resulting binary distances), \"mixed\" (resulting gower distances) cont_dist_fn distance metric function continuous data disc_dist_fn distance metric function discrete data ord_dist_fn distance metric function ordinal data cat_dist_fn distance metric function categorical data mix_dist_fn distance metric function mixed data weights_row Single-row dataframe column names contain column names df row contains corresponding weights_row.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance matrices — get_dist_matrix","text":"dist_matrix Matrix inter-observation distances","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_heatmap_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the row ordering of a meta-clustering solution — get_heatmap_order","title":"Return the row ordering of a meta-clustering solution — get_heatmap_order","text":"Pheatmap reorders meta clustering results enable meta-cluster visualization. function extracts new row orders apply matrices.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_heatmap_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the row ordering of a meta-clustering solution — get_heatmap_order","text":"","code":"get_heatmap_order(matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/get_heatmap_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the row ordering of a meta-clustering solution — get_heatmap_order","text":"matrix matrix used pheatmap input","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_heatmap_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the row ordering of a meta-clustering solution — get_heatmap_order","text":"pheatmap_order Row orders clustered pheatmap","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mean p-value — get_mean_p","title":"Get mean p-value — get_mean_p","text":"Given solutions matrix row containing evaluated p-values, returns mean.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mean p-value — get_mean_p","text":"","code":"get_mean_p(solutions_matrix_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mean p-value — get_mean_p","text":"solutions_matrix_row row solutions_matrix object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mean p-value — get_mean_p","text":"mean_p mean p-value","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_min_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Get minimum p-value — get_min_p","title":"Get minimum p-value — get_min_p","text":"Given solutions matrix row containing evaluated p-values, returns min.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_min_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get minimum p-value — get_min_p","text":"","code":"get_min_p(solutions_matrix_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_min_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get minimum p-value — get_min_p","text":"solutions_matrix_row row solutions_matrix object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_min_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get minimum p-value — get_min_p","text":"min_p minimum p-value","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Get p-value — get_p","title":"Get p-value — get_p","text":"Depending outcome measure, perform ordinal regression linear regression return p-value benchmark measure well-separated clusters outcome measure.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get p-value — get_p","text":"","code":"get_p(assigned_subs, outcome_df, outcome_type, outcome_name)"},{"path":"https://branchlab.github.io/metasnf/reference/get_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get p-value — get_p","text":"assigned_subs dataframe subjects assigned cluster cluster assigned outcome_df dataframe containing subjectkey outcome feautre column outcome_type string indicating outcome type (numeric ordinal) outcome_name string indicating name feature","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get p-value — get_p","text":"p_val smallest p-value interest","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_p_vals_row_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the p-values of a single settings_matrix row from a target_pvals df — get_p_vals_row_df","title":"Return the p-values of a single settings_matrix row from a target_pvals df — get_p_vals_row_df","text":"Return p-values single settings_matrix row target_pvals df","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_p_vals_row_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the p-values of a single settings_matrix row from a target_pvals df — get_p_vals_row_df","text":"","code":"get_p_vals_row_df(target_pvals, row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_p_vals_row_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the p-values of a single settings_matrix row from a target_pvals df — get_p_vals_row_df","text":"target_pvals Output \"p_val_select\" function. row Row ID solutions_matrix extract p-values .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gower_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance metric: Gower distance — gower_distance","title":"Distance metric: Gower distance — gower_distance","text":"Distance metric: Gower distance","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gower_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance metric: Gower distance — gower_distance","text":"","code":"gower_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/gower_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance metric: Gower distance — gower_distance","text":"df Dataframe containing least 1 data column. weights_row compatibility - function accept weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gower_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance metric: Gower distance — gower_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/hamming_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance metric: Hamming distance — hamming_distance","title":"Distance metric: Hamming distance — hamming_distance","text":"Distance metric: Hamming distance","code":""},{"path":"https://branchlab.github.io/metasnf/reference/hamming_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance metric: Hamming distance — hamming_distance","text":"","code":"hamming_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/hamming_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance metric: Hamming distance — hamming_distance","text":"df Dataframe containing one subjectkey column first column least 1 categorical data column. feature data categorical. weights_row Single-row dataframe column names contain column names df row contains corresponding weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/hamming_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance metric: Hamming distance — hamming_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/individual.html","id":null,"dir":"Reference","previous_headings":"","what":"SNF Scheme: Individual — individual","title":"SNF Scheme: Individual — individual","text":"\"vanilla\" scheme - distance matrix conversions input dataframe list ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/individual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SNF Scheme: Individual — individual","text":"","code":"individual(   data_list,   cont_dist_fn,   disc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row,   k,   alpha,   t )"},{"path":"https://branchlab.github.io/metasnf/reference/individual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SNF Scheme: Individual — individual","text":"data_list nested list input data generated function get_data_list() cont_dist_fn distance metric function continuous data disc_dist_fn distance metric function discrete data ord_dist_fn distance metric function ordinal data cat_dist_fn distance metric function categorical data mix_dist_fn distance metric function mixed data weights_row dataframe row containing variable weights k k hyperparameter alpha alpha/eta/sigma hyperparameter t SNF number iterations hyperparameter","code":""},{"path":"https://branchlab.github.io/metasnf/reference/individual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SNF Scheme: Individual — individual","text":"fused_network final fused network clustering","code":""},{"path":"https://branchlab.github.io/metasnf/reference/keep_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter data to training or testing subjects only — keep_split","title":"Filter data to training or testing subjects only — keep_split","text":"Given dataframe results train_test_split(), return just data subjects assigned specified split.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/keep_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter data to training or testing subjects only — keep_split","text":"","code":"keep_split(df, assigned_df, split, uid = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/keep_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter data to training or testing subjects only — keep_split","text":"df Dataframe subsetted training testing split assigned_df Dataframe containing \"subjectkey\" \"split\" cols train_test_assign() split String indicating split keep (\"train\" \"test\") uid (string) name uid column currently used data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/keep_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter data to training or testing subjects only — keep_split","text":"split_df Dataframe subsetted specified split","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Label propagation — label_prop","title":"Label propagation — label_prop","text":"Given full fused network (one containing pre-labeled training subjects unlabeled test-subjects) clusters pre-labeled subjects, return label propagated list clusters subjects. function derived SNFtool::groupPredict. Modifications made take full fused network input, rather taking input dataframes running SNF internally. ensures alternative approaches data normalization distance matrix calculations can chosen user.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label propagation — label_prop","text":"","code":"label_prop(full_fused_network, clusters)"},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label propagation — label_prop","text":"full_fused_network Network made running SNF training test subjects together clusters vector training subject assigned clusters matching order appear full_fused_network","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label propagation — label_prop","text":"new_clusters list cluster labels subjects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lin_reg_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear regression p-value — lin_reg_p","title":"Linear regression p-value — lin_reg_p","text":"Returns p-value following linear regression cluster IV provided ordinal variable DV.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lin_reg_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear regression p-value — lin_reg_p","text":"","code":"lin_reg_p(clust_membership, outcome_df, outcome_var)"},{"path":"https://branchlab.github.io/metasnf/reference/lin_reg_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear regression p-value — lin_reg_p","text":"clust_membership Dataframe cluster membership (get_clustered_subs) outcome_df Dataframe containing DV outcome_var DV string","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lin_reg_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear regression p-value — lin_reg_p","text":"p_val overall p-value distinguishing clusters DV","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_model_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear model p-value (generic) — linear_model_pval","title":"Linear model p-value (generic) — linear_model_pval","text":"Return p-value F-test linear model two variables","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_model_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear model p-value (generic) — linear_model_pval","text":"","code":"linear_model_pval(predictor, response)"},{"path":"https://branchlab.github.io/metasnf/reference/linear_model_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear model p-value (generic) — linear_model_pval","text":"predictor categorical numeric variable. response numeric variable.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_model_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear model p-value (generic) — linear_model_pval","text":"pval p-value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/list_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove items from a data_list or target_list — list_remove","title":"Remove items from a data_list or target_list — list_remove","text":"Removes specified elements provided data_list target_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/list_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove items from a data_list or target_list — list_remove","text":"","code":"list_remove(list_object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/list_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove items from a data_list or target_list — list_remove","text":"list_object data_list target_list containing components removed ... number components remove list object, passed strings","code":""},{"path":"https://branchlab.github.io/metasnf/reference/list_remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove items from a data_list or target_list — list_remove","text":"pruned_list pruned list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lp_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Label propagation over an solutions matrix — lp_row","title":"Label propagation over an solutions matrix — lp_row","text":"Given solutions matrix data_list object containing subjects, return dataframe label propagated results om rows","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lp_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label propagation over an solutions matrix — lp_row","text":"","code":"lp_row(   solutions_matrix,   full_data_list,   clust_algs_list = NULL,   distance_metrics_list = NULL,   weights_matrix = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/lp_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label propagation over an solutions matrix — lp_row","text":"solutions_matrix solutions matrix full_data_list data_list object made rbinding(train, test) data clust_algs_list List custom clustering algorithms apply final fused network. See ?generate_clust_algs_list distance_metrics_list distance_metrics_list. See ?generate_distance_metrics_list. weights_matrix matrix containing variable weights use distance matrix calculation. See ?generate_weights_matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lp_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label propagation over an solutions matrix — lp_row","text":"labeled_df dataframe label propagated results om rows","code":""},{"path":"https://branchlab.github.io/metasnf/reference/manhattan_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Manhattan plot of p-values — manhattan_plot","title":"Manhattan plot of p-values — manhattan_plot","text":"Manhattan plot p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/manhattan_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manhattan plot of p-values — manhattan_plot","text":"","code":"manhattan_plot(   data,   key_mode = FALSE,   threshold = NULL,   bonferroni_line = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/manhattan_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manhattan plot of p-values — manhattan_plot","text":"data Output either pval_select() function key_mode FALSE calculate_associations() function key_mode TRUE key_mode TRUE, generates plot associations relative key variable (calculated previously calculate_associations) rather associations cluster solution threshold P-value threshold plot dashed line . bonferroni_line TRUE, plots dashed black line Bonferroni-corrected equivalent p-value threshold.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mc_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Outdated adjusted_rand_index_heatmap — mc_heatmap","title":"Outdated adjusted_rand_index_heatmap — mc_heatmap","text":"Outdated adjusted_rand_index_heatmap","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mc_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outdated adjusted_rand_index_heatmap — mc_heatmap","text":"","code":"mc_heatmap(mc_results, save = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/mc_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outdated adjusted_rand_index_heatmap — mc_heatmap","text":"mc_results outdated save outdated","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge list of dataframes — merge_df_list","title":"Merge list of dataframes — merge_df_list","text":"Merge list dataframes","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge list of dataframes — merge_df_list","text":"","code":"merge_df_list(df_list, join = \"inner\")"},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge list of dataframes — merge_df_list","text":"df_list list dataframes join String indicating join \"inner\" \"full\"","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge list of dataframes — merge_df_list","text":"merged_df inner join dataframes list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/meta_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Outdated calc_om_aris — meta_cluster","title":"Outdated calc_om_aris — meta_cluster","text":"Outdated calc_om_aris","code":""},{"path":"https://branchlab.github.io/metasnf/reference/meta_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outdated calc_om_aris — meta_cluster","text":"","code":"meta_cluster(mc_om)"},{"path":"https://branchlab.github.io/metasnf/reference/meta_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outdated calc_om_aris — meta_cluster","text":"mc_om solutions matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/methylation_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Modification of SNFtool mock dataframe ","title":"Modification of SNFtool mock dataframe ","text":"Modification SNFtool mock dataframe \"Data2\"","code":""},{"path":"https://branchlab.github.io/metasnf/reference/methylation_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modification of SNFtool mock dataframe ","text":"","code":"methylation_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/methylation_df.html","id":"methylation-df","dir":"Reference","previous_headings":"","what":"methylation_df","title":"Modification of SNFtool mock dataframe ","text":"data frame 200 rows 3 columns: gene_1_expression Mock gene methylation variable gene_2_expression Mock gene methylation variable patient_id Random three-digit number uniquely identifying patient","code":""},{"path":"https://branchlab.github.io/metasnf/reference/methylation_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Modification of SNFtool mock dataframe ","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/no_subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","title":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","text":"Removes 'subject_' prefixed columns dataframe. Useful printing solutions_matrix structures console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/no_subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","text":"","code":"no_subs(df)"},{"path":"https://branchlab.github.io/metasnf/reference/no_subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","text":"df dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/no_subs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","text":"df_no_subs Dataframe without subjects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert dataframe columns to numeric type — numcol_to_numeric","title":"Convert dataframe columns to numeric type — numcol_to_numeric","text":"Converts columns dataframe can converted numeric type numeric type.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert dataframe columns to numeric type — numcol_to_numeric","text":"","code":"numcol_to_numeric(df)"},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert dataframe columns to numeric type — numcol_to_numeric","text":"df dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert dataframe columns to numeric type — numcol_to_numeric","text":"df dataframe possible columns converted type numeric","code":""},{"path":"https://branchlab.github.io/metasnf/reference/om_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot solutions matrix results by minimum and mean p-values — om_scatter","title":"Scatter plot solutions matrix results by minimum and mean p-values — om_scatter","text":"Scatter plot solutions matrix results minimum mean p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/om_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot solutions matrix results by minimum and mean p-values — om_scatter","text":"","code":"om_scatter(   om,   title = NULL,   pointsize = 5,   labelsize = 5,   fontsize = 20,   cluster_colours = 6,   xlim = NULL,   ylim = NULL,   save = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/om_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot solutions matrix results by minimum and mean p-values — om_scatter","text":"om solutions matrix title plot title pointsize size scatter plot point labelsize size label text fontsize plot fontsize cluster_colours use colour palette built specified number clusters. generating multiple graphs varying numbers clusters, specifying parameter ensure cluster count colour pairs stay constant. xlim x-axis limits log scale ylim y-axis limits log scale save optional path save figure ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordinal regression p-value — ord_reg_p","title":"Ordinal regression p-value — ord_reg_p","text":"Returns p-value following ordinal regression cluster IV provided ordinal variable DV.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordinal regression p-value — ord_reg_p","text":"","code":"ord_reg_p(clust_membership, outcome_df, outcome_var)"},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordinal regression p-value — ord_reg_p","text":"clust_membership Dataframe cluster membership (get_clustered_subs) outcome_df Dataframe containing DV outcome_var DV string","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordinal regression p-value — ord_reg_p","text":"p_val overall p-value distinguishing clusters DV","code":""},{"path":"https://branchlab.github.io/metasnf/reference/p_val_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select p-values from solutions matrix — p_val_select","title":"Select p-values from solutions matrix — p_val_select","text":"Select p-values solutions matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/p_val_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select p-values from solutions matrix — p_val_select","text":"","code":"p_val_select(solutions_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/p_val_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select p-values from solutions matrix — p_val_select","text":"solutions_matrix output batch_snf","code":""},{"path":"https://branchlab.github.io/metasnf/reference/p_val_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select p-values from solutions matrix — p_val_select","text":"p_val_matrix P-values ready heatmap plotting","code":""},{"path":"https://branchlab.github.io/metasnf/reference/parallel_batch_snf.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel processing form of batch_snf — parallel_batch_snf","title":"Parallel processing form of batch_snf — parallel_batch_snf","text":"Parallel processing form batch_snf","code":""},{"path":"https://branchlab.github.io/metasnf/reference/parallel_batch_snf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel processing form of batch_snf — parallel_batch_snf","text":"","code":"parallel_batch_snf(data_list, settings_matrix, processes)"},{"path":"https://branchlab.github.io/metasnf/reference/parallel_batch_snf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel processing form of batch_snf — parallel_batch_snf","text":"data_list nested list input data generated function get_data_list() settings_matrix matrix indicating parameters iterate SNF processes Number parallel processes used executing SNF","code":""},{"path":"https://branchlab.github.io/metasnf/reference/parallel_batch_snf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel processing form of batch_snf — parallel_batch_snf","text":"populated_settings_matrix settings matrix filled columns related subtype membership","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot_all_cbcl.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clusters across all CBCL measures — plot_all_cbcl","title":"Plot clusters across all CBCL measures — plot_all_cbcl","text":"Arrange optionally save grid bar charts cluster x-axis CBCL measure y-axis.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot_all_cbcl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clusters across all CBCL measures — plot_all_cbcl","text":"","code":"plot_all_cbcl(   om,   cbcl_list,   fig_path_fn,   save_prefix = NULL,   save_suffix = NULL,   include = NULL,   exclude = NULL,   w = 25,   h = 20 )"},{"path":"https://branchlab.github.io/metasnf/reference/plot_all_cbcl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clusters across all CBCL measures — plot_all_cbcl","text":"om solutions matrix-like structure cbcl_list List containing CBCL dataframes fig_path_fn Closure specifying location save final figure save_prefix prefix add file saved save_suffix suffix add file saved include string list strings specifying CBCL measures included. CBCL measures excluded. exclude string list strings specifying CBCL measures excluded. CBCL measures excluded. w width final saved plots h height final saved plots","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot_nmis.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot the NMI values for each row of an nmi_df — plot_nmis","title":"Scatter plot the NMI values for each row of an nmi_df — plot_nmis","text":"Scatter plot NMI values row nmi_df","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot_nmis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot the NMI values for each row of an nmi_df — plot_nmis","text":"","code":"plot_nmis(nmi_df, fig_path_fn = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/plot_nmis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot the NMI values for each row of an nmi_df — plot_nmis","text":"nmi_df dataframe input column number NMI columns fig_path_fn function returns full file path location","code":""},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dl_sk.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ","title":"Add ","text":"Add \"subject_\" prefix UID values subjectkey column","code":""},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dl_sk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ","text":"","code":"prefix_dl_sk(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dl_sk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ","text":"data_list data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dl_sk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add ","text":"data_list data_list without NAs","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pvals_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Pheatmap a matrix of p-values — pvals_heatmap","title":"Pheatmap a matrix of p-values — pvals_heatmap","text":"Pheatmap matrix p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pvals_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pheatmap a matrix of p-values — pvals_heatmap","text":"","code":"pvals_heatmap(   pvals,   order = NULL,   cluster_cols = TRUE,   show_rownames = FALSE,   save = NULL,   reverse_colours = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/pvals_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pheatmap a matrix of p-values — pvals_heatmap","text":"pvals matrix p-values order numeric vector indicating row ordering settings matrix cluster_cols TRUE, pheatmap cluster (rearrange) columns show_rownames TRUE (default), rownames shown heatmap save optional path save figure reverse_colours boolean invert colours","code":""},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random removal sequence — random_removal","title":"Generate random removal sequence — random_removal","text":"Helper function contribute rows within settings matrix. Number columns removed follows uniform exponential probability distribution.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random removal sequence — random_removal","text":"","code":"random_removal(   columns,   min_removed_inputs,   max_removed_inputs,   dropout_dist = \"exponential\" )"},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random removal sequence — random_removal","text":"columns Columns settings_matrix passed min_removed_inputs smallest number input dataframes may randomly removed. max_removed_inputs largest number input dataframes may randomly removed. dropout_dist Indication input dataframes dropped. can \"none\" (dropout), \"uniform\" (uniformly draw number min max removed inputs), \"exponential\" (like uniform, using exponential distribution; default).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random removal sequence — random_removal","text":"inclusions_df Dataframe can rbind'ed settings_matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/reduce_dl_to_common.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce data_list to common subjects — reduce_dl_to_common","title":"Reduce data_list to common subjects — reduce_dl_to_common","text":"Given data_list object, reduce nested dataframe contain set subjects shared nested dataframes","code":""},{"path":"https://branchlab.github.io/metasnf/reference/reduce_dl_to_common.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce data_list to common subjects — reduce_dl_to_common","text":"","code":"reduce_dl_to_common(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/reduce_dl_to_common.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce data_list to common subjects — reduce_dl_to_common","text":"data_list data_list object reduced","code":""},{"path":"https://branchlab.github.io/metasnf/reference/reduce_dl_to_common.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce data_list to common subjects — reduce_dl_to_common","text":"reduced_data_list data_list object subsetted subjectssnf shared across nested dataframes","code":""},{"path":"https://branchlab.github.io/metasnf/reference/remove_dl_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NAs from a data_list object — remove_dl_na","title":"Remove NAs from a data_list object — remove_dl_na","text":"Remove NAs data_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/remove_dl_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NAs from a data_list object — remove_dl_na","text":"","code":"remove_dl_na(data_list, return_missing = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/remove_dl_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NAs from a data_list object — remove_dl_na","text":"data_list data_list return_missing TRUE, function returns list first element data_list second element vector unique IDs patients removed complete data filtration step.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/remove_dl_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NAs from a data_list object — remove_dl_na","text":"data_list data_list without NAs","code":""},{"path":"https://branchlab.github.io/metasnf/reference/resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper resample function found in ?sample — resample","title":"Helper resample function found in ?sample — resample","text":"Like sample, given single value x, returns back single value instead random value 1 x.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper resample function found in ?sample — resample","text":"","code":"resample(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper resample function found in ?sample — resample","text":"x Vector single value sample ... Remaining arguments base::sample function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/scale_diagonals.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust the diagonals of a matrix — scale_diagonals","title":"Adjust the diagonals of a matrix — scale_diagonals","text":"Adjust diagonals matrix reduce contrast -diagonals plotting.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/scale_diagonals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust the diagonals of a matrix — scale_diagonals","text":"","code":"scale_diagonals(matrix, method = \"mean\")"},{"path":"https://branchlab.github.io/metasnf/reference/scale_diagonals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust the diagonals of a matrix — scale_diagonals","text":"matrix Matrix rescale. method Method rescaling. Can \"mean\" (replace diagonals average value -diagonals) \"zero\" (replace diagonals 0).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/select_om.html","id":null,"dir":"Reference","previous_headings":"","what":"deprecated function — select_om","title":"deprecated function — select_om","text":"deprecated function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/select_om.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deprecated function — select_om","text":"","code":"select_om()"},{"path":"https://branchlab.github.io/metasnf/reference/settings_matrix_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap settings matrix based on meta-clustering results — settings_matrix_heatmap","title":"Heatmap settings matrix based on meta-clustering results — settings_matrix_heatmap","text":"Normalizes settings matrix plots heatmap. Rows reordered match row-clustering present within provided meta-clustering result.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/settings_matrix_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap settings matrix based on meta-clustering results — settings_matrix_heatmap","text":"","code":"settings_matrix_heatmap(   settings_matrix,   order = NULL,   show_rownames = TRUE,   save = NULL,   hide_ids = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/settings_matrix_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap settings matrix based on meta-clustering results — settings_matrix_heatmap","text":"settings_matrix matrix indicating parameters iterate SNF order numeric vector indicating row ordering settings matrix show_rownames TRUE (default), rownames shown heatmap save optional path save figure hide_ids boolean indicating row_id numbers hidden","code":""},{"path":"https://branchlab.github.io/metasnf/reference/settings_matrix_row_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply-based function for batch_snf — settings_matrix_row_fn","title":"Apply-based function for batch_snf — settings_matrix_row_fn","text":"Apply-based function batch_snf","code":""},{"path":"https://branchlab.github.io/metasnf/reference/settings_matrix_row_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply-based function for batch_snf — settings_matrix_row_fn","text":"","code":"settings_matrix_row_fn(settings_matrix_row, dl)"},{"path":"https://branchlab.github.io/metasnf/reference/settings_matrix_row_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply-based function for batch_snf — settings_matrix_row_fn","text":"settings_matrix_row row settings matrix dl data list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/settings_matrix_row_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply-based function for batch_snf — settings_matrix_row_fn","text":"solutions_matrix_row corresponding solutions_matrix row","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sew_euclidean_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Squared (excluding weights) Euclidean distance — sew_euclidean_distance","title":"Squared (excluding weights) Euclidean distance — sew_euclidean_distance","text":"Squared (excluding weights) Euclidean distance","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sew_euclidean_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squared (excluding weights) Euclidean distance — sew_euclidean_distance","text":"","code":"sew_euclidean_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/sew_euclidean_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squared (excluding weights) Euclidean distance — sew_euclidean_distance","text":"df Dataframe containing least 1 data column. weights_row Single-row dataframe column names contain column names df row contains corresponding weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sew_euclidean_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Squared (excluding weights) Euclidean distance — sew_euclidean_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","title":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","text":"Plot heatmap similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","text":"","code":"similarity_matrix_heatmap(   similarity_matrix,   order = NULL,   cluster_solution = NULL,   scale_diag = \"mean\",   log_graph = TRUE,   cluster_rows = FALSE,   cluster_columns = FALSE,   show_row_names = FALSE,   show_column_names = FALSE,   data_list = NULL,   data = NULL,   left_bar = NULL,   right_bar = NULL,   top_bar = NULL,   bottom_bar = NULL,   left_hm = NULL,   right_hm = NULL,   top_hm = NULL,   bottom_hm = NULL,   annotation_colours = NULL,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","text":"similarity_matrix similarity matrix order Vector numbers reorder similarity matrix (data provided). Overwrites ordering specified cluster_solution param. cluster_solution Vector containing cluster assignments. scale_diag Method rescaling matrix diagonals. Can \"none\" (change diagonals), \"mean\" (replace diagonals average value -diagonals), \"zero\" (replace diagonals 0). log_graph TRUE, log transforms graph. cluster_rows Parameter ComplexHeatmap::Heatmap. cluster_columns Parameter ComplexHeatmap::Heatmap. show_row_names Parameter ComplexHeatmap::Heatmap. show_column_names Parameter ComplexHeatmap::Heatmap. data_list data_list containing elements requested annotation. data dataframe containing elements requested annotation. left_bar Named list strings, strings variables df used barplot annotation left plot names names used caption plots legends. right_bar See left_bar. top_bar See left_bar. bottom_bar See left_bar. left_hm Like left_bar, heatmap annotation instead barplot annotation. right_hm See left_hm. top_hm See left_hm. bottom_hm See left_hm. annotation_colours Named list heatmap annotations colours. ... Additional parameters passed ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","title":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","text":"Generate complete path filename store similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","text":"","code":"similarity_matrix_path(similarity_matrix_dir, i)"},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","text":"similarity_matrix_dir Directory store similarity matrices Corresponding settings matrix row","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","text":"path Complete path filename store similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/siw_euclidean_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Squared (including weights) Euclidean distance — siw_euclidean_distance","title":"Squared (including weights) Euclidean distance — siw_euclidean_distance","text":"Squared (including weights) Euclidean distance","code":""},{"path":"https://branchlab.github.io/metasnf/reference/siw_euclidean_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squared (including weights) Euclidean distance — siw_euclidean_distance","text":"","code":"siw_euclidean_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/siw_euclidean_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squared (including weights) Euclidean distance — siw_euclidean_distance","text":"df Dataframe containing least 1 data column. weights_row Single-row dataframe column names contain column names df row contains corresponding weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/siw_euclidean_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Squared (including weights) Euclidean distance — siw_euclidean_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sn_euclidean_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance metric: Standard normalization then Euclidean — sn_euclidean_distance","title":"Distance metric: Standard normalization then Euclidean — sn_euclidean_distance","text":"Distance metric: Standard normalization Euclidean","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sn_euclidean_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance metric: Standard normalization then Euclidean — sn_euclidean_distance","text":"","code":"sn_euclidean_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/sn_euclidean_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance metric: Standard normalization then Euclidean — sn_euclidean_distance","text":"df Dataframe containing least 1 data column. weights_row Single-row dataframe column names contain column names df row contains corresponding weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sn_euclidean_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance metric: Standard normalization then Euclidean — sn_euclidean_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":null,"dir":"Reference","previous_headings":"","what":"SNF a data_list — snf_step","title":"SNF a data_list — snf_step","text":"SNF data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SNF a data_list — snf_step","text":"","code":"snf_step(   data_list,   scheme,   k = 20,   alpha = 0.5,   t = 20,   cont_dist_fn,   disc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row )"},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SNF a data_list — snf_step","text":"data_list nested list input data generated function get_data_list() scheme SNF system use achieve final fused network k k hyperparameter alpha alpha/eta/sigma hyperparameter t SNF number iterations hyperparameter cont_dist_fn distance metric function continuous data disc_dist_fn distance metric function discrete data ord_dist_fn distance metric function ordinal data cat_dist_fn distance metric function categorical data mix_dist_fn distance metric function mixed data weights_row dataframe row containing variable weights","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SNF a data_list — snf_step","text":"fused_network final fused network clustering","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sol.html","id":null,"dir":"Reference","previous_headings":"","what":"deprecated function — sol","title":"deprecated function — sol","text":"deprecated function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deprecated function — sol","text":"","code":"sol()"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eigen.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen","title":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen","text":"Applies spectral clustering similarity matrix. Number clusters based eigen-gap heuristic.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eigen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen","text":"","code":"spectral_eigen(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eigen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eigen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen","text":"solution vector indicating cluster patient assigned ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eight.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a eight cluster solution — spectral_eight","title":"Clustering algorithm: Spectral clustering for a eight cluster solution — spectral_eight","text":"Applies spectral clustering similarity matrix. Seeks eight clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a eight cluster solution — spectral_eight","text":"","code":"spectral_eight(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a eight cluster solution — spectral_eight","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a eight cluster solution — spectral_eight","text":"solution vector indicating cluster patient assigned ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_five.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a five cluster solution — spectral_five","title":"Clustering algorithm: Spectral clustering for a five cluster solution — spectral_five","text":"Applies spectral clustering similarity matrix. Seeks five clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_five.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a five cluster solution — spectral_five","text":"","code":"spectral_five(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_five.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a five cluster solution — spectral_five","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_five.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a five cluster solution — spectral_five","text":"solution vector indicating cluster patient assigned ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_four.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a four cluster solution — spectral_four","title":"Clustering algorithm: Spectral clustering for a four cluster solution — spectral_four","text":"Applies spectral clustering similarity matrix. Seeks four clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_four.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a four cluster solution — spectral_four","text":"","code":"spectral_four(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_four.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a four cluster solution — spectral_four","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_four.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a four cluster solution — spectral_four","text":"solution vector indicating cluster patient assigned ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_rot.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot","title":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot","text":"Applies spectral clustering similarity matrix. Number clusters based rotation cost heuristic.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_rot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot","text":"","code":"spectral_rot(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_rot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_rot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot","text":"solution vector indicating cluster patient assigned ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_seven.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a seven cluster solution — spectral_seven","title":"Clustering algorithm: Spectral clustering for a seven cluster solution — spectral_seven","text":"Applies spectral clustering similarity matrix. Seeks seven clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_seven.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a seven cluster solution — spectral_seven","text":"","code":"spectral_seven(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_seven.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a seven cluster solution — spectral_seven","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_seven.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a seven cluster solution — spectral_seven","text":"solution vector indicating cluster patient assigned ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_six.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a six cluster solution — spectral_six","title":"Clustering algorithm: Spectral clustering for a six cluster solution — spectral_six","text":"Applies spectral clustering similarity matrix. Seeks six clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_six.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a six cluster solution — spectral_six","text":"","code":"spectral_six(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_six.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a six cluster solution — spectral_six","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_six.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a six cluster solution — spectral_six","text":"solution vector indicating cluster patient assigned ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_three.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a three cluster solution — spectral_three","title":"Clustering algorithm: Spectral clustering for a three cluster solution — spectral_three","text":"Applies spectral clustering similarity matrix. Seeks three clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_three.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a three cluster solution — spectral_three","text":"","code":"spectral_three(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_three.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a three cluster solution — spectral_three","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_three.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a three cluster solution — spectral_three","text":"solution vector indicating cluster patient assigned ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_two.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a two cluster solution — spectral_two","title":"Clustering algorithm: Spectral clustering for a two cluster solution — spectral_two","text":"Applies spectral clustering similarity matrix. Seeks two clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_two.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a two cluster solution — spectral_two","text":"","code":"spectral_two(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_two.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a two cluster solution — spectral_two","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_two.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a two cluster solution — spectral_two","text":"solution vector indicating cluster patient assigned ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Select all columns of a dataframe starting with a given string prefix. — subs","title":"Select all columns of a dataframe starting with a given string prefix. — subs","text":"Removes columns prefixed 'subject_' prefixed columns dataframe. Useful intermediate step extracting subject UIDs solutions_matrix structure.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select all columns of a dataframe starting with a given string prefix. — subs","text":"","code":"subs(df)"},{"path":"https://branchlab.github.io/metasnf/reference/subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select all columns of a dataframe starting with a given string prefix. — subs","text":"df Dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select all columns of a dataframe starting with a given string prefix. — subs","text":"df_subs Dataframe 'subject_' prefixed columns","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create subsamples of a data_list — subsample_data_list","title":"Create subsamples of a data_list — subsample_data_list","text":"Create subsamples data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create subsamples of a data_list — subsample_data_list","text":"","code":"subsample_data_list(   data_list,   n_subsamples,   subsample_fraction = NULL,   n_subjects = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/subsample_data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create subsamples of a data_list — subsample_data_list","text":"data_list data_list. n_subsamples Number subsamples create. subsample_fraction Percentage patients include per subsample. n_subjects Number patients include per subsample.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create subsamples of a data_list — subsample_data_list","text":"data_list_subsamples list subsampled data_list objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"Calculate pairwise adjusted Rand indices across subsamples data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"","code":"subsample_pairwise_aris(data_list_subsamples, settings_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"data_list_subsamples list subsets larger data_list. See ?subsample_data_list obtain object. settings_matrix settings_matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"pairwise_ari_df Dataframe containing column row (row original settings_matrix rest information corresponds ), mean_ari (average adjusted Rand Index across subsamples), ari_sd (standard deviation adjusted Rand Indices).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_clust_algs_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a clust_algs_list object — summarize_clust_algs_list","title":"Summarize a clust_algs_list object — summarize_clust_algs_list","text":"Summarize clust_algs_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_clust_algs_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a clust_algs_list object — summarize_clust_algs_list","text":"","code":"summarize_clust_algs_list(clust_algs_list)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_clust_algs_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a clust_algs_list object — summarize_clust_algs_list","text":"clust_algs_list clust_algs_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_clust_algs_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a clust_algs_list object — summarize_clust_algs_list","text":"summary_df Dataframe containing name algorithm number algorithm (value settings_matrix used access algorithm)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_distance_metrics_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize metrics contained in a distance_metrics_list — summarize_distance_metrics_list","title":"Summarize metrics contained in a distance_metrics_list — summarize_distance_metrics_list","text":"Summarize metrics contained distance_metrics_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_distance_metrics_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize metrics contained in a distance_metrics_list — summarize_distance_metrics_list","text":"","code":"summarize_distance_metrics_list(distance_metrics_list)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_distance_metrics_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize metrics contained in a distance_metrics_list — summarize_distance_metrics_list","text":"distance_metrics_list distance_metrics_list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize data list — summarize_dl","title":"Summarize data list — summarize_dl","text":"Summarize data list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize data list — summarize_dl","text":"","code":"summarize_dl(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize data list — summarize_dl","text":"data_list nested list input data generated function get_data_list()","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize data list — summarize_dl","text":"dl_summary Summarized output","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_target_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize target list — summarize_target_list","title":"Summarize target list — summarize_target_list","text":"Summarize target list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_target_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize target list — summarize_target_list","text":"","code":"summarize_target_list(target_list)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_target_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize target list — summarize_target_list","text":"target_list nested list input data generated function get_target_list()","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_target_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize target list — summarize_target_list","text":"ol_summary Summarized output","code":""},{"path":"https://branchlab.github.io/metasnf/reference/top_om_per_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Select the top solutions matrix rows for each cluster — top_om_per_cluster","title":"Select the top solutions matrix rows for each cluster — top_om_per_cluster","text":"Given solutions matrix, returns dataframe containing row lowest mean p-value lowest min p-value cluster sizes 2-5","code":""},{"path":"https://branchlab.github.io/metasnf/reference/top_om_per_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select the top solutions matrix rows for each cluster — top_om_per_cluster","text":"","code":"top_om_per_cluster(om)"},{"path":"https://branchlab.github.io/metasnf/reference/top_om_per_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select the top solutions matrix rows for each cluster — top_om_per_cluster","text":"om solutions matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/top_om_per_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select the top solutions matrix rows for each cluster — top_om_per_cluster","text":"top_clusts_df dataframe top om rows","code":""},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Training and testing split — train_test_assign","title":"Training and testing split — train_test_assign","text":"Given vector subject_id threshold, returns list members training set testing set. function relies whether absolute value Jenkins's one_at_a_time hash function exceeds maximum possible value (2147483647) multiplied threshold.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Training and testing split — train_test_assign","text":"","code":"train_test_assign(train_frac, subjects, seed = 42)"},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Training and testing split — train_test_assign","text":"train_frac fraction (0 1) subjects training subjects available subjects distribution seed Seed used Jenkins's one_at_a_time hash function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Training and testing split — train_test_assign","text":"split named list containing training testing subject_ids","code":""},{"path":"https://branchlab.github.io/metasnf/reference/two_step_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Two step SNF — two_step_merge","title":"Two step SNF — two_step_merge","text":"Individual dataframes individual similarity matrices one fused network per domain one final fused network.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/two_step_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two step SNF — two_step_merge","text":"","code":"two_step_merge(   data_list,   k = 20,   alpha = 0.5,   t = 20,   cont_dist_fn,   disc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row )"},{"path":"https://branchlab.github.io/metasnf/reference/two_step_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two step SNF — two_step_merge","text":"data_list nested list input data generated function get_data_list() k k hyperparameter alpha alpha/eta/sigma hyperparameter t SNF number iterations hyperparameter cont_dist_fn distance metric function continuous data disc_dist_fn distance metric function discrete data ord_dist_fn distance metric function ordinal data cat_dist_fn distance metric function categorical data mix_dist_fn distance metric function mixed data weights_row dataframe row containing variable weights","code":""},{"path":"https://branchlab.github.io/metasnf/reference/two_step_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two step SNF — two_step_merge","text":"fused_network final fused network clustering","code":""}]
