[{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://branchlab.github.io/metasnf/articles/metasnf-vignette.html","id":"install-metasnf","dir":"Articles","previous_headings":"Data set-up and pre-processing","what":"1. Install metasnf","title":"An example metasnf pipeline","text":"package currently hosted GitHub (CRAN). easiest way install metasnf devtools package.","code":"install.packages(\"devtools\") # if you don't have it already  # By default, this will install the latest version of the package devtools::install_github(\"BRANCHlab/metasnf\")  # To ensure you are always installing a specific version of the package, #  you can manually specify the latest commit: devtools::install_github(     \"BRANCHlab/metasnf@2b30771ca78c6bc0dcbdd61bba30d32a17cc3fd6\" )"},{"path":"https://branchlab.github.io/metasnf/articles/metasnf-vignette.html","id":"load-the-library-and-data-into-the-r-environment","dir":"Articles","previous_headings":"Data set-up and pre-processing","what":"2. Load the library and data into the R environment","title":"An example metasnf pipeline","text":"data loaded R environment following format: data one multiple data.frame objects data wide form (one row per patient) dataframe one column uniquely identifies patient row data fine missing data stage. package comes mock dataframes based real data Adolescent Brain Cognitive Development study: abcd_anxiety (anxiety scores CBCL) abcd_depress (depression scores CBCL) abcd_cort_t (cortical thicknesses) abcd_cort_sa (cortical surface areas mm^2) abcd_subc_v (subcortical volumes mm^3) abcd_income (household income 1-3 scale) abcd_pubertal (pubertal status 1-5 scale) abcd_colour (favourite colour among red, green, blue) ’s cortical thickness data looks like: Notice first column subjectkey unique identifier (UID) subjects ABCD study. also required UID data, don’t worry just yet. ’s household income data: Putting everything list help us get quicker summaries data. data missing values dataframes number participants.","code":"library(metasnf)  class(abcd_cort_t) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"  dim(abcd_cort_t) #> [1] 188 152  str(abcd_cort_t[1:5, 1:5]) #> Classes 'tbl_df', 'tbl' and 'data.frame':    5 obs. of  5 variables: #>  $ patient : chr  \"NDAR_INV0567T2Y9\" \"NDAR_INV0GLZNC2W\" \"NDAR_INV0IZ157F8\" \"NDAR_INV0J4PYA5F\" ... #>  $ mrisdp_1: num  2.6 2.62 2.62 2.6 2.53 #>  $ mrisdp_2: num  2.49 2.85 2.29 2.67 2.76 #>  $ mrisdp_3: num  2.8 2.78 2.53 2.68 2.83 #>  $ mrisdp_4: num  2.95 2.85 2.96 2.94 2.99  abcd_cort_t[1:5, 1:5] #>            patient mrisdp_1 mrisdp_2 mrisdp_3 mrisdp_4 #> 1 NDAR_INV0567T2Y9    2.601    2.487    2.801    2.954 #> 2 NDAR_INV0GLZNC2W    2.619    2.851    2.784    2.846 #> 3 NDAR_INV0IZ157F8    2.621    2.295    2.530    2.961 #> 4 NDAR_INV0J4PYA5F    2.599    2.670    2.676    2.938 #> 5 NDAR_INV0OYE291Q    2.526    2.761    2.829    2.986 dim(abcd_income) #> [1] 300   2  str(abcd_income[1:5, ]) #> Classes 'tbl_df', 'tbl' and 'data.frame':    5 obs. of  2 variables: #>  $ patient         : chr  \"NDAR_INV0567T2Y9\" \"NDAR_INV0GLZNC2W\" \"NDAR_INV0IZ157F8\" \"NDAR_INV0J4PYA5F\" ... #>  $ household_income: num  3 NA 1 2 1  abcd_income[1:5, ] #>            patient household_income #> 1 NDAR_INV0567T2Y9                3 #> 2 NDAR_INV0GLZNC2W               NA #> 3 NDAR_INV0IZ157F8                1 #> 4 NDAR_INV0J4PYA5F                2 #> 5 NDAR_INV0OYE291Q                1 abcd_data <- list(     abcd_anxiety,     abcd_depress,     abcd_cort_t,     abcd_cort_sa,     abcd_subc_v,     abcd_income,     abcd_pubertal )  # The number of rows in each dataframe: lapply(abcd_data, dim) #> [[1]] #> [1] 275   2 #>  #> [[2]] #> [1] 275   2 #>  #> [[3]] #> [1] 188 152 #>  #> [[4]] #> [1] 188 152 #>  #> [[5]] #> [1] 174  31 #>  #> [[6]] #> [1] 300   2 #>  #> [[7]] #> [1] 275   2  # Whether or not each dataframe has missing values: lapply(abcd_data,     function(x) {         any(is.na(x))     } ) #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] FALSE #>  #> [[4]] #> [1] FALSE #>  #> [[5]] #> [1] FALSE #>  #> [[6]] #> [1] TRUE #>  #> [[7]] #> [1] TRUE"},{"path":"https://branchlab.github.io/metasnf/articles/metasnf-vignette.html","id":"generating-the-data-list","dir":"Articles","previous_headings":"","what":"Generating the data list","title":"An example metasnf pipeline","text":"data_list structure basically just list dataframes (like one already created), additional features facilitate repeated clustering. contain input dataframes want directly use inputs clustering. ’ll set aside anxiety depression dataframes now just use dataframes clustering inputs. Building data_list may laborious part process. first entries lists contains following elements: actual dataframe name dataframe (string) name domain dataframe (string) type variable stored dataframe (options numeric, categorical, mixed) Finally, ’s argument old_uid (column name currently uniquely identifies subjects data). Behind scenes, function building nested list keeps track information, also: Converting UID data “subjectkey” Removing observations contain NAs Removing subjects present input dataframes Arranging subjects dataframe UID Prefixing UID values string “subject_” help cluster result characterization rows containing NAs removed. don’t want bunch data get slashed NAs sprinkled around , consider using imputation. mice package R nice . can get summary constructed data_list summarize_dl function: input dataframe now 100 subjects complete data.","code":"data_list <- generate_data_list(     list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"numeric\"),     list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"numeric\"),     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"numeric\"),     list(abcd_income, \"household_income\", \"demographics\", \"numeric\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"numeric\"),     old_uid = \"patient\" ) #> [1] \"UID successfully converted to subjectkey.\" summarize_dl(data_list) #>                    name    type       domain length width #> 1    cortical_thickness numeric neuroimaging    100   152 #> 2 cortical_surface_area numeric neuroimaging    100   152 #> 3    subcortical_volume numeric neuroimaging    100    31 #> 4      household_income numeric demographics    100     2 #> 5       pubertal_status numeric demographics    100     2"},{"path":"https://branchlab.github.io/metasnf/articles/metasnf-vignette.html","id":"generating-the-design-matrix","dir":"Articles","previous_headings":"","what":"Generating the design matrix","title":"An example metasnf pipeline","text":"design_matrix stores information settings ’d like use SNF runs. Calling generate_design_matrix function specified number rows automatically build randomly populated design_matrix. columns : inc* - binary columns indicating whether input dataframe included (1) excluded (0) corresponding SNF run (discussed appendix) snf_scheme - specific way input data gets collapsed final fused network (discussed appendix) eigen_or_rot binary variable indicating eigengap (1) rotation cost (2) heuristic used select number clusters specified applying spectral clustering final fused network K - nearest neighbors hyperparameter used SNF (input function SNFtool::SNF) alpha - Referred \\(\\eta\\) original SNF manuscript, alpha SNFtool code examples, sigma SNFtool source code, hyperparameter affinity matrix generation generate_design_matrix randomly populates columns ensures generated rows identical. Setting optional seed parameter (affect seed entire R session) ensures design matrix generated time run code. end random set settings , nothing wrong manually altering design matrix suit needs. example, wanted know much difference one input dataframe made, ensure half rows included input dataframe half didn’t. can also add random rows already existing dataframe using add_design_matrix_rows function.","code":"design_matrix <- generate_design_matrix(data_list, nrow = 30, seed = 42) #> [1] \"The global seed has been changed!\"  design_matrix #>    row_id inc_cortical_thickness inc_cortical_surface_area #> 1       1                      1                         0 #> 2       2                      1                         1 #> 3       3                      1                         1 #> 4       4                      1                         1 #> 5       5                      1                         1 #> 6       6                      1                         1 #> 7       7                      1                         1 #> 8       8                      1                         1 #> 9       9                      1                         1 #> 10     10                      1                         1 #> 11     11                      1                         1 #> 12     12                      1                         1 #> 13     13                      1                         1 #> 14     14                      1                         1 #> 15     15                      1                         1 #> 16     16                      0                         1 #> 17     17                      1                         1 #> 18     18                      1                         1 #> 19     19                      1                         1 #> 20     20                      1                         1 #> 21     21                      1                         1 #> 22     22                      1                         1 #> 23     23                      1                         1 #> 24     24                      1                         1 #> 25     25                      1                         1 #> 26     26                      1                         1 #> 27     27                      1                         1 #> 28     28                      1                         1 #> 29     29                      1                         1 #> 30     30                      1                         1 #>    inc_subcortical_volume inc_household_income inc_pubertal_status snf_scheme #> 1                       1                    0                   1          2 #> 2                       1                    1                   1          1 #> 3                       1                    1                   1          1 #> 4                       1                    1                   1          2 #> 5                       1                    1                   1          2 #> 6                       1                    1                   0          1 #> 7                       1                    1                   0          3 #> 8                       1                    1                   1          2 #> 9                       1                    1                   1          1 #> 10                      1                    1                   1          2 #> 11                      1                    1                   1          3 #> 12                      1                    1                   1          1 #> 13                      1                    1                   1          1 #> 14                      1                    1                   1          1 #> 15                      1                    1                   1          2 #> 16                      1                    0                   1          1 #> 17                      1                    1                   1          1 #> 18                      1                    1                   1          3 #> 19                      1                    1                   1          2 #> 20                      1                    1                   1          3 #> 21                      1                    1                   1          1 #> 22                      1                    1                   1          2 #> 23                      1                    1                   1          2 #> 24                      1                    1                   1          1 #> 25                      1                    1                   1          1 #> 26                      1                    1                   1          2 #> 27                      1                    0                   1          2 #> 28                      1                    0                   1          3 #> 29                      1                    1                   0          2 #> 30                      1                    1                   1          1 #>    eigen_or_rot  K alpha #> 1             2 25   0.8 #> 2             1 12   0.6 #> 3             2 15   0.9 #> 4             1 23   0.9 #> 5             2 10   0.9 #> 6             2 19   0.9 #> 7             1 23   0.6 #> 8             2 12   0.9 #> 9             2 20   0.7 #> 10            2 20   0.7 #> 11            2 24   1.0 #> 12            2 10   0.8 #> 13            1 29   0.6 #> 14            2 30   0.8 #> 15            1 29   0.9 #> 16            1 25   0.9 #> 17            2 14   0.6 #> 18            2 30   1.0 #> 19            2 11   0.7 #> 20            1 16   0.9 #> 21            1 16   0.6 #> 22            2 23   1.0 #> 23            2 29   0.7 #> 24            2 19   0.7 #> 25            1 27   0.7 #> 26            1 28   1.0 #> 27            1 30   0.6 #> 28            2 29   0.9 #> 29            1 23   0.9 #> 30            2 13   0.9"},{"path":"https://branchlab.github.io/metasnf/articles/metasnf-vignette.html","id":"executing-the-design-matrix","dir":"Articles","previous_headings":"","what":"Executing the design matrix","title":"An example metasnf pipeline","text":"execute_design_matrix function integrates data data_list using sets settings contained design_matrix. resulting structure output_matrix extension design_matrix contains columns specifying cluster subject assigned corresponding design_matrix row. goes like time. Just like , clustering done! Note: can also enable parallel processing run execute_design_matrix function faster machines multiple CPU cores. See “processes” parameter ?execute_design_matrix.","code":"output_matrix <- execute_design_matrix(data_list, design_matrix) #> [1] \"Row: 1/30 | Time remaining: 8 seconds\" #> [1] \"Row: 2/30 | Time remaining: 8 seconds\" #> [1] \"Row: 3/30 | Time remaining: 8 seconds\" #> [1] \"Row: 4/30 | Time remaining: 8 seconds\" #> [1] \"Row: 5/30 | Time remaining: 8 seconds\" #> [1] \"Row: 6/30 | Time remaining: 8 seconds\" #> [1] \"Row: 7/30 | Time remaining: 7 seconds\" #> [1] \"Row: 8/30 | Time remaining: 7 seconds\" #> [1] \"Row: 9/30 | Time remaining: 7 seconds\" #> [1] \"Row: 10/30 | Time remaining: 7 seconds\" #> [1] \"Row: 11/30 | Time remaining: 6 seconds\" #> [1] \"Row: 12/30 | Time remaining: 6 seconds\" #> [1] \"Row: 13/30 | Time remaining: 6 seconds\" #> [1] \"Row: 14/30 | Time remaining: 5 seconds\" #> [1] \"Row: 15/30 | Time remaining: 5 seconds\" #> [1] \"Row: 16/30 | Time remaining: 4 seconds\" #> [1] \"Row: 17/30 | Time remaining: 4 seconds\" #> [1] \"Row: 18/30 | Time remaining: 4 seconds\" #> [1] \"Row: 19/30 | Time remaining: 3 seconds\" #> [1] \"Row: 20/30 | Time remaining: 3 seconds\" #> [1] \"Row: 21/30 | Time remaining: 3 seconds\" #> [1] \"Row: 22/30 | Time remaining: 3 seconds\" #> [1] \"Row: 23/30 | Time remaining: 2 seconds\" #> [1] \"Row: 24/30 | Time remaining: 2 seconds\" #> [1] \"Row: 25/30 | Time remaining: 2 seconds\" #> [1] \"Row: 26/30 | Time remaining: 1 seconds\" #> [1] \"Row: 27/30 | Time remaining: 1 seconds\" #> [1] \"Row: 28/30 | Time remaining: 1 seconds\" #> [1] \"Row: 29/30 | Time remaining: 0 seconds\" #> [1] \"Row: 30/30 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 9.949 seconds.\"  colnames(output_matrix)[1:20] #>  [1] \"row_id\"                    \"inc_cortical_thickness\"    #>  [3] \"inc_cortical_surface_area\" \"inc_subcortical_volume\"    #>  [5] \"inc_household_income\"      \"inc_pubertal_status\"       #>  [7] \"snf_scheme\"                \"eigen_or_rot\"              #>  [9] \"K\"                         \"alpha\"                     #> [11] \"nclust\"                    \"subject_NDAR_INV0567T2Y9\"  #> [13] \"subject_NDAR_INV0IZ157F8\"  \"subject_NDAR_INV0J4PYA5F\"  #> [15] \"subject_NDAR_INV10OMKVLE\"  \"subject_NDAR_INV15FPCW4O\"  #> [17] \"subject_NDAR_INV19NB4RJK\"  \"subject_NDAR_INV1HLGR738\"  #> [19] \"subject_NDAR_INV1KR0EZFU\"  \"subject_NDAR_INV1L3Y9EOP\" output_matrix[1:5, 1:20] #>   row_id inc_cortical_thickness inc_cortical_surface_area #> 1      1                      1                         0 #> 2      2                      1                         1 #> 3      3                      1                         1 #> 4      4                      1                         1 #> 5      5                      1                         1 #>   inc_subcortical_volume inc_household_income inc_pubertal_status snf_scheme #> 1                      1                    0                   1          2 #> 2                      1                    1                   1          1 #> 3                      1                    1                   1          1 #> 4                      1                    1                   1          2 #> 5                      1                    1                   1          2 #>   eigen_or_rot  K alpha nclust subject_NDAR_INV0567T2Y9 #> 1            2 25   0.8      5                        2 #> 2            1 12   0.6      2                        2 #> 3            2 15   0.9      2                        1 #> 4            1 23   0.9      2                        1 #> 5            2 10   0.9      2                        1 #>   subject_NDAR_INV0IZ157F8 subject_NDAR_INV0J4PYA5F subject_NDAR_INV10OMKVLE #> 1                        5                        4                        1 #> 2                        1                        2                        1 #> 3                        1                        2                        1 #> 4                        1                        2                        1 #> 5                        1                        2                        1 #>   subject_NDAR_INV15FPCW4O subject_NDAR_INV19NB4RJK subject_NDAR_INV1HLGR738 #> 1                        1                        3                        3 #> 2                        2                        2                        2 #> 3                        2                        2                        2 #> 4                        2                        1                        1 #> 5                        2                        2                        1 #>   subject_NDAR_INV1KR0EZFU subject_NDAR_INV1L3Y9EOP #> 1                        3                        1 #> 2                        1                        2 #> 3                        1                        2 #> 4                        1                        2 #> 5                        1                        2"},{"path":"https://branchlab.github.io/metasnf/articles/metasnf-vignette.html","id":"picking-a-solution-1-examining-meta-clusters","dir":"Articles","previous_headings":"","what":"Picking a solution #1: examining meta clusters","title":"An example metasnf pipeline","text":"now group cluster solutions stored output_matrix. Proposing tens hundreds (thousands) clustering solutions research paper doesn’t seem fashionable right now, need pick solution move forward . section, ’ll take look cluster--clusters approach picking favourite solution move forward . believe approach best truly exploratory clustering (read: way prefer choose two clustering solutions ambiguous vibes). first step calculate adjusted Rand index (ARI) pair cluster solutions. metric tells us similar solutions , thereby allowing us find clusters cluster solutions. can visualize resulting inter-cluster similarities heatmap: can optionally save heatmap specifying path save parameter (e.g., ari_heatmap(output_matrix_aris, save = \"./ari_heatmap.png\")). . clustering solutions along rows columns figure, cells intersection two solutions show similar (big ARI) solutions . diagonals always red, representing maximum value 1, show similarity clustering solution . Agglomerative hierarchical clustering applied solutions default (thank , pheatmap package) orders clustering solutions exactly line order clustering solutions present design matrix. can examine un-clustered heatmap like : ’s option hide corresponding design matrix rows: pattern appears bit common theme randomly generated design matrix, owing solutions SNF schemes significantly variability solutions within SNF schemes (thus producing 3 rough meta clusters). ’d like try expand space clustering solutions produced even , consider manually constructing different design matrix. Later updates package focus customizing design matrix little easier (e.g., choosing design matrix parameters stay fixed possible values parameters can take ). see something interesting heatmap, may curious know corresponds settings design matrix. recommend visualizing design matrix yet another heatmap: variables beginning “inc” show variables (blue) (red) randomly dropped . 30 solutions examined 5 input dataframes, dropout may seem little conservative. stated , future goal design matrix yield diverse clustering solutions little efficiently, likely rely aggressive input dataframe dropout (variable scaling). can use solution order clustered ARI heatmap reorder design matrix heatmap: order just vector numbers… … can passed dm_heatmap function: Maybe ’ll see something interesting! ’s row interest (say, row 5), format may useful subsequent analyses: , ’re (next vignette, maybe?)","code":"output_matrix_aris <- calc_om_aris(output_matrix) #> [1] \"Please wait - this may take a minute.\" #>  22.98851% completed... 45.97701% completed... 68.96552% completed... 91.95402% completed...  dim(output_matrix_aris) #> [1] 30 30 ari_heatmap(output_matrix_aris) ari_heatmap(     output_matrix_aris,     cluster_rows = FALSE,     cluster_cols = FALSE) ari_heatmap(output_matrix_aris, hide_ids = TRUE) dm_heatmap(design_matrix) om_ari_order <- get_pheatmap_order(output_matrix_aris) om_ari_order #>  [1] 22 27  1 16 20 11 18  8  5 19 23  4 10 12  2 17 21  3 30 13 25 14  9 24 28 #> [26]  6  7 29 15 26 dm_heatmap(design_matrix, order = om_ari_order) cluster_df <- get_cluster_df(output_matrix[5, ])  head(cluster_df) #>   cluster               subjectkey #> 2       1 subject_NDAR_INV0567T2Y9 #> 3       1 subject_NDAR_INV0IZ157F8 #> 4       2 subject_NDAR_INV0J4PYA5F #> 5       1 subject_NDAR_INV10OMKVLE #> 6       2 subject_NDAR_INV15FPCW4O #> 7       2 subject_NDAR_INV19NB4RJK"},{"path":"https://branchlab.github.io/metasnf/articles/metasnf-vignette.html","id":"picking-a-solution-2-specifying-an-objective-function","dir":"Articles","previous_headings":"","what":"Picking a solution #2: specifying an objective function","title":"An example metasnf pipeline","text":"Warning: approach can easily result overfitting data producing clustering results generalize poorly subjects outside dataset. Consider setting aside data validate results avoid issue. can specify metric objective function may tell useful clustering solution purposes advance, makes cluster selection process much less arbitrary. many ways go , package offers one way outcome_list structure. outcome_list contains dataframes can examine clustering results linear regression (numeric data), ordinal regression (ordinal data), Chi-squared test (categorical data). outcome_list like data_list, without domain attribute. time, dataframe used build outcome_list must single-feature. Just like generating initial data_list, need specify name column provided dataframes originally used uniquely identify different observations old_uid parameter. next extend output_matrix p-values regressing outcome_list features onto generated clusters. just want p-values: course, heatmap visualizing : p-values hold real meaning traditional hypothesis-testing context. , just tool find clustering solutions well-separated according outcome measures ’ve specified. Finding cluster solution like similar supervised learning approach, optimization method just random sampling. risk overfitting data approach considerable, make sure rigorous external validation reporting findings. ’ve relied label propagation (provided SNFtool package groupPredict function) take top clustering solution training data, assign predicted clusters held test subjects, characterized test subjects see well clustering solution seemed worked. package provides wrapper SNFtool::groupPredict make label propagation process little easier apply output_matrix structure.","code":"outcome_list <- generate_outcome_list(     list(abcd_anxiety, \"anxiety\", \"ordinal\"),     list(abcd_depress, \"depressed\", \"ordinal\"),     list(abcd_colour, \"colour\", \"categorical\"),     old_uid = \"patient\" ) #> [1] \"UID successfully converted to subjectkey.\"  summarize_ol(outcome_list) #>        name        type length width #> 1   anxiety     ordinal    275     2 #> 2 depressed     ordinal    275     2 #> 3    colour categorical    275     2 extended_output_matrix <- extend_om(output_matrix, outcome_list) #> [1] \"In row 1, the Chi-squared test was applied on a table that had at least one cell containing fewer than 5 elements. Please note that when the expected number of elements per cell is less than 5, an assumption in the test is violated.\" #> [1] \"In row 11, the Chi-squared test was applied on a table that had at least one cell containing fewer than 5 elements. Please note that when the expected number of elements per cell is less than 5, an assumption in the test is violated.\" #> [1] \"In row 16, the Chi-squared test was applied on a table that had at least one cell containing fewer than 5 elements. Please note that when the expected number of elements per cell is less than 5, an assumption in the test is violated.\" #> [1] \"In row 18, the Chi-squared test was applied on a table that had at least one cell containing fewer than 5 elements. Please note that when the expected number of elements per cell is less than 5, an assumption in the test is violated.\" #> [1] \"In row 20, the Chi-squared test was applied on a table that had at least one cell containing fewer than 5 elements. Please note that when the expected number of elements per cell is less than 5, an assumption in the test is violated.\" #> [1] \"In row 22, the Chi-squared test was applied on a table that had at least one cell containing fewer than 5 elements. Please note that when the expected number of elements per cell is less than 5, an assumption in the test is violated.\" #> [1] \"In row 27, the Chi-squared test was applied on a table that had at least one cell containing fewer than 5 elements. Please note that when the expected number of elements per cell is less than 5, an assumption in the test is violated.\" #> [1] \"In row 28, the Chi-squared test was applied on a table that had at least one cell containing fewer than 5 elements. Please note that when the expected number of elements per cell is less than 5, an assumption in the test is violated.\"  colnames(extended_output_matrix) #>   [1] \"row_id\"                    \"inc_cortical_thickness\"    #>   [3] \"inc_cortical_surface_area\" \"inc_subcortical_volume\"    #>   [5] \"inc_household_income\"      \"inc_pubertal_status\"       #>   [7] \"snf_scheme\"                \"eigen_or_rot\"              #>   [9] \"K\"                         \"alpha\"                     #>  [11] \"nclust\"                    \"subject_NDAR_INV0567T2Y9\"  #>  [13] \"subject_NDAR_INV0IZ157F8\"  \"subject_NDAR_INV0J4PYA5F\"  #>  [15] \"subject_NDAR_INV10OMKVLE\"  \"subject_NDAR_INV15FPCW4O\"  #>  [17] \"subject_NDAR_INV19NB4RJK\"  \"subject_NDAR_INV1HLGR738\"  #>  [19] \"subject_NDAR_INV1KR0EZFU\"  \"subject_NDAR_INV1L3Y9EOP\"  #>  [21] \"subject_NDAR_INV1TCP5GNM\"  \"subject_NDAR_INV1ZHRDJ6B\"  #>  [23] \"subject_NDAR_INV2EJ41YSZ\"  \"subject_NDAR_INV2PK6C85M\"  #>  [25] \"subject_NDAR_INV2XO1PHCT\"  \"subject_NDAR_INV3CU5Y9BZ\"  #>  [27] \"subject_NDAR_INV3MBSY16V\"  \"subject_NDAR_INV3N0QFDLO\"  #>  [29] \"subject_NDAR_INV3N1476QE\"  \"subject_NDAR_INV3Y027GVK\"  #>  [31] \"subject_NDAR_INV40Z7GVYJ\"  \"subject_NDAR_INV49UPOXHJ\"  #>  [33] \"subject_NDAR_INV4AKIU1WX\"  \"subject_NDAR_INV4G7032E6\"  #>  [35] \"subject_NDAR_INV4KQ3WEFY\"  \"subject_NDAR_INV4N5XGZE8\"  #>  [37] \"subject_NDAR_INV4OWRB536\"  \"subject_NDAR_INV4X80QUZY\"  #>  [39] \"subject_NDAR_INV50JL2RXP\"  \"subject_NDAR_INV5BRNFYQC\"  #>  [41] \"subject_NDAR_INV5Q9YWRCK\"  \"subject_NDAR_INV64F9GH0V\"  #>  [43] \"subject_NDAR_INV6RVH5KZS\"  \"subject_NDAR_INV6WBQCY2I\"  #>  [45] \"subject_NDAR_INV752EFAQ0\"  \"subject_NDAR_INV7O30HFV6\"  #>  [47] \"subject_NDAR_INV7QO93CJH\"  \"subject_NDAR_INV84G9ONXP\"  #>  [49] \"subject_NDAR_INV8EHP6W1U\"  \"subject_NDAR_INV8MJFUKIW\"  #>  [51] \"subject_NDAR_INV8WGK6ECZ\"  \"subject_NDAR_INV915R2Z67\"  #>  [53] \"subject_NDAR_INV94AKNGMJ\"  \"subject_NDAR_INV9GAZYV8Q\"  #>  [55] \"subject_NDAR_INV9IREH05N\"  \"subject_NDAR_INV9KC3GVMU\"  #>  [57] \"subject_NDAR_INV9NFKZ82A\"  \"subject_NDAR_INV9S1BMDE5\"  #>  [59] \"subject_NDAR_INVA68OU0YK\"  \"subject_NDAR_INVADCYZ38B\"  #>  [61] \"subject_NDAR_INVAYM8WTIN\"  \"subject_NDAR_INVB4MU1PDA\"  #>  [63] \"subject_NDAR_INVB8O4LAQV\"  \"subject_NDAR_INVBAP80W1R\"  #>  [65] \"subject_NDAR_INVBTRW1NUK\"  \"subject_NDAR_INVCI0KZWMN\"  #>  [67] \"subject_NDAR_INVCIXE0496\"  \"subject_NDAR_INVCYBSZD0N\"  #>  [69] \"subject_NDAR_INVD37Z9N61\"  \"subject_NDAR_INVD61ZUBC7\"  #>  [71] \"subject_NDAR_INVDXKG2UBF\"  \"subject_NDAR_INVEO3JM5CB\"  #>  [73] \"subject_NDAR_INVEQ1OBNSM\"  \"subject_NDAR_INVEQ4D2M8P\"  #>  [75] \"subject_NDAR_INVEVBDLSTM\"  \"subject_NDAR_INVEY0FMJDI\"  #>  [77] \"subject_NDAR_INVFLU0YINE\"  \"subject_NDAR_INVFNZPWMSI\"  #>  [79] \"subject_NDAR_INVFY76P8AJ\"  \"subject_NDAR_INVG3T0PXW6\"  #>  [81] \"subject_NDAR_INVG5CI7XK4\"  \"subject_NDAR_INVG8BRLSO9\"  #>  [83] \"subject_NDAR_INVGDBYXWV4\"  \"subject_NDAR_INVH1KV76BQ\"  #>  [85] \"subject_NDAR_INVH3P4T8C2\"  \"subject_NDAR_INVH4FZC2XB\"  #>  [87] \"subject_NDAR_INVH8QN7WLT\"  \"subject_NDAR_INVHERPS382\"  #>  [89] \"subject_NDAR_INVHEUWA52I\"  \"subject_NDAR_INVHM3XS68O\"  #>  [91] \"subject_NDAR_INVI1RKT9MX\"  \"subject_NDAR_INVIZFV08RU\"  #>  [93] \"subject_NDAR_INVJ4THFRD2\"  \"subject_NDAR_INVJ574KX6A\"  #>  [95] \"subject_NDAR_INVJEV61XIU\"  \"subject_NDAR_INVJR3S271G\"  #>  [97] \"subject_NDAR_INVK3FL5CP2\"  \"subject_NDAR_INVK9ULDQA2\"  #>  [99] \"subject_NDAR_INVKB0CYO1H\"  \"subject_NDAR_INVKHWS26UN\"  #> [101] \"subject_NDAR_INVKTUMPLXY\"  \"subject_NDAR_INVKYH529RD\"  #> [103] \"subject_NDAR_INVL045Z1TY\"  \"subject_NDAR_INVL4NIUZYF\"  #> [105] \"subject_NDAR_INVLDQH8ATK\"  \"subject_NDAR_INVLF3TNDUZ\"  #> [107] \"subject_NDAR_INVLI58ERQC\"  \"subject_NDAR_INVLIQRM8KC\"  #> [109] \"subject_NDAR_INVLXDP1SWT\"  \"subject_NDAR_INVMBOZVEA4\"  #> [111] \"subject_NDAR_INVMIWOSHJN\"  \"cbcl_anxiety_r_p\"          #> [113] \"cbcl_depress_r_p\"          \"colour_p\"                  #> [115] \"min_p_val\"                 \"mean_p_val\"  # Looking at the newly added columns head(no_subs(extended_output_matrix)) #>   row_id inc_cortical_thickness inc_cortical_surface_area #> 1      1                      1                         0 #> 2      2                      1                         1 #> 3      3                      1                         1 #> 4      4                      1                         1 #> 5      5                      1                         1 #> 6      6                      1                         1 #>   inc_subcortical_volume inc_household_income inc_pubertal_status snf_scheme #> 1                      1                    0                   1          2 #> 2                      1                    1                   1          1 #> 3                      1                    1                   1          1 #> 4                      1                    1                   1          2 #> 5                      1                    1                   1          2 #> 6                      1                    1                   0          1 #>   eigen_or_rot  K alpha nclust  cbcl_anxiety_r_p  cbcl_depress_r_p #> 1            2 25   0.8      5 0.655340602502448 0.527336751675068 #> 2            1 12   0.6      2 0.629818229507898 0.285216408530843 #> 3            2 15   0.9      2 0.648151472850297 0.303888538712499 #> 4            1 23   0.9      2 0.356246119090021 0.364287773404045 #> 5            2 10   0.9      2 0.699411847073354 0.750751159488881 #> 6            2 19   0.9      3  0.20899687436932 0.269200532430708 #>            colour_p min_p_val mean_p_val #> 1 0.248885257094024 0.2488853  0.4771875 #> 2 0.256478690781187 0.2564787  0.3905044 #> 3 0.208806077650664 0.2088061  0.3869487 #> 4 0.061952996110309 0.0619530  0.2608290 #> 5 0.199994808454036 0.1999948  0.5500526 #> 6 0.595592209760178 0.2089969  0.3579299 p_val_select(extended_output_matrix) #>    row_id cbcl_anxiety_r_p cbcl_depress_r_p    colour_p #> 1       1        0.6553406        0.5273368 0.248885257 #> 2       2        0.6298182        0.2852164 0.256478691 #> 3       3        0.6481515        0.3038885 0.208806078 #> 4       4        0.3562461        0.3642878 0.061952996 #> 5       5        0.6994118        0.7507512 0.199994808 #> 6       6        0.2089969        0.2692005 0.595592210 #> 7       7        0.1223251        0.4533414 0.836928458 #> 8       8        0.4138061        0.4649807 0.182533103 #> 9       9        0.5283445        0.2627846 0.431562402 #> 10     10        0.2454652        0.3314808 0.096910147 #> 11     11        0.6813803        0.5355564 0.226989561 #> 12     12        0.7883525        0.5695269 0.095882802 #> 13     13        0.1788353        0.2084599 0.105096820 #> 14     14        0.1705398        0.4225477 0.724605822 #> 15     15        0.1770468        0.4733003 0.266608093 #> 16     16        0.6553406        0.5273368 0.248885257 #> 17     17        0.6008227        0.1551543 0.087201835 #> 18     18        0.6813803        0.5355564 0.226989561 #> 19     19        0.6781680        0.7129344 0.093727026 #> 20     20        0.6813803        0.5355564 0.226989561 #> 21     21        0.6866630        0.2771175 0.201914223 #> 22     22        0.6635075        0.2849664 0.105158205 #> 23     23        0.1368030        0.1672179 0.005438086 #> 24     24        0.7130265        0.3075909 0.360429812 #> 25     25        0.1788353        0.2084599 0.105096820 #> 26     26        0.2917708        0.4578138 0.201764518 #> 27     27        0.6553406        0.5273368 0.248885257 #> 28     28        0.8032757        0.8162200 0.803359122 #> 29     29        0.1223251        0.4533414 0.836928458 #> 30     30        0.6481515        0.5243160 0.276597362 om_pvals <- p_val_select(extended_output_matrix)  pvals_pheatmap(om_pvals, order = om_ari_order)"},{"path":"https://branchlab.github.io/metasnf/articles/metasnf-vignette.html","id":"validating-results-with-label-propagation","dir":"Articles","previous_headings":"","what":"Validating results with label propagation","title":"An example metasnf pipeline","text":"’s quick step complete procedure, beginning, label propagation validate findings. metasnf package comes equipped function training/testing split :) Note, label propagation workflow, maintaining consistent ordering train test subjects across dataframes particularly important. ensure full data list constructed order compatible training testing splits made , can either specify train_subjects test_subjects parameters , provide assigned_splits output train_test_assign function. , wanted, see clustering solutions propagate test set, mean reusing test set removing protection overfitting conferred procedure. ’s now! questions, comments, suggestions, bugs, etc. feel free post issue https://github.com/BRANCHlab/metasnf.","code":"# All the subjects present in all dataframes with no NAs all_subjects <- data_list[[1]]$\"data\"$\"subjectkey\"  # Remove the \"subject_\" prefix to allow merges with the original data all_subjects <- gsub(\"subject_\", \"\", all_subjects)  # Dataframe assigning 80% of subjects to train and 20% to test assigned_splits <- train_test_assign(train_frac = 0.8, subjects = all_subjects)  # Partition a training set train_abcd_cort_t <- keep_split(abcd_cort_t, assigned_splits, \"train\", old_uid = \"patient\") train_abcd_cort_sa <- keep_split(abcd_cort_sa, assigned_splits, \"train\", old_uid = \"patient\") train_abcd_subc_v <- keep_split(abcd_subc_v, assigned_splits, \"train\", old_uid = \"patient\") train_abcd_income <- keep_split(abcd_income, assigned_splits, \"train\", old_uid = \"patient\") train_abcd_pubertal <- keep_split(abcd_pubertal, assigned_splits, \"train\", old_uid = \"patient\") train_abcd_anxiety <- keep_split(abcd_anxiety, assigned_splits, \"train\", old_uid = \"patient\") train_abcd_depress <- keep_split(abcd_depress, assigned_splits, \"train\", old_uid = \"patient\")  # Partition a test set test_abcd_cort_t <- keep_split(abcd_cort_t, assigned_splits, \"test\", old_uid = \"patient\") test_abcd_cort_sa <- keep_split(abcd_cort_sa, assigned_splits, \"test\", old_uid = \"patient\") test_abcd_subc_v <- keep_split(abcd_subc_v, assigned_splits, \"test\", old_uid = \"patient\") test_abcd_income <- keep_split(abcd_income, assigned_splits, \"test\", old_uid = \"patient\") test_abcd_pubertal <- keep_split(abcd_pubertal, assigned_splits, \"test\", old_uid = \"patient\") test_abcd_anxiety <- keep_split(abcd_anxiety, assigned_splits, \"test\", old_uid = \"patient\") test_abcd_depress <- keep_split(abcd_depress, assigned_splits, \"test\", old_uid = \"patient\")  # Construct the data lists train_data_list <- generate_data_list(     list(train_abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"numeric\"),     list(train_abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"numeric\"),     list(train_abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"numeric\"),     list(train_abcd_income, \"household_income\", \"demographics\", \"numeric\"),     list(train_abcd_pubertal, \"pubertal_status\", \"demographics\", \"numeric\"),     old_uid = \"patient\" ) #> [1] \"UID successfully converted to subjectkey.\"  test_data_list <- generate_data_list(     list(test_abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"numeric\"),     list(test_abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"numeric\"),     list(test_abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"numeric\"),     list(test_abcd_income, \"household_income\", \"demographics\", \"numeric\"),     list(test_abcd_pubertal, \"pubertal_status\", \"demographics\", \"numeric\"),     old_uid = \"patient\" ) #> [1] \"UID successfully converted to subjectkey.\" full_data_list <- generate_data_list(     list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"numeric\"),     list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"numeric\"),     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"numeric\"),     list(abcd_income, \"household_income\", \"demographics\", \"numeric\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"numeric\"),     old_uid = \"patient\",     assigned_splits = assigned_splits ) #> [1] \"UID successfully converted to subjectkey.\"  # Construct the outcome lists train_outcome_list <- generate_outcome_list(     list(train_abcd_anxiety, \"anxiety\", \"ordinal\"),     list(train_abcd_depress, \"depressed\", \"ordinal\"),     old_uid = \"patient\" ) #> [1] \"UID successfully converted to subjectkey.\"  # Find a clustering solution in your training data design_matrix <- generate_design_matrix(train_data_list, nrow = 5, seed = 42) #> [1] \"The global seed has been changed!\"  train_output_matrix <- execute_design_matrix(train_data_list, design_matrix) #> [1] \"Row: 1/5 | Time remaining: 1 seconds\" #> [1] \"Row: 2/5 | Time remaining: 1 seconds\" #> [1] \"Row: 3/5 | Time remaining: 1 seconds\" #> [1] \"Row: 4/5 | Time remaining: 0 seconds\" #> [1] \"Row: 5/5 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 1.379 seconds.\"  extended_output_matrix <- extend_om(train_output_matrix, train_outcome_list)  # The fourth row had the lowest minimum p-value across our outcomes which(extended_output_matrix$\"min_p_val\" ==       min(extended_output_matrix$\"min_p_val\")) #> [1] 4  # Keep track of your top solution top_om_row <- extended_output_matrix[4, ]  # Hand over the output matrix as well as the full data list to propagate labels #  to the test subjects propagated_labels <- lp_om(top_om_row, full_data_list) #> [1] \"If you add a 'significance' column to your output matrix those values will be used to name each solution (instead of row IDs)\" #> [1] \"Processing row 1 of 1...\" head(propagated_labels) #>                 subjectkey group 4 #> 1 subject_NDAR_INV0567T2Y9 train 1 #> 2 subject_NDAR_INV0IZ157F8 train 2 #> 3 subject_NDAR_INV0J4PYA5F train 1 #> 4 subject_NDAR_INV10OMKVLE train 2 #> 5 subject_NDAR_INV15FPCW4O train 1 #> 6 subject_NDAR_INV19NB4RJK train 2 tail(propagated_labels) #>                   subjectkey group 4 #> 95  subject_NDAR_INVGDBYXWV4  test 1 #> 96  subject_NDAR_INVHEUWA52I  test 1 #> 97  subject_NDAR_INVK9ULDQA2  test 1 #> 98  subject_NDAR_INVKYH529RD  test 1 #> 99  subject_NDAR_INVL045Z1TY  test 1 #> 100 subject_NDAR_INVLDQH8ATK  test 1 propagated_labels_all <- lp_om(extended_output_matrix, full_data_list) #> [1] \"If you add a 'significance' column to your output matrix those values will be used to name each solution (instead of row IDs)\" #> [1] \"Processing row 1 of 5...\" #> [1] \"Processing row 2 of 5...\" #> [1] \"Processing row 3 of 5...\" #> [1] \"Processing row 4 of 5...\" #> [1] \"Processing row 5 of 5...\" head(propagated_labels_all) #>                 subjectkey group 1 2 3 4 5 #> 1 subject_NDAR_INV0567T2Y9 train 2 2 2 1 1 #> 2 subject_NDAR_INV0IZ157F8 train 5 1 1 2 1 #> 3 subject_NDAR_INV0J4PYA5F train 4 2 2 1 2 #> 4 subject_NDAR_INV10OMKVLE train 1 1 1 2 1 #> 5 subject_NDAR_INV15FPCW4O train 1 2 2 1 2 #> 6 subject_NDAR_INV19NB4RJK train 3 2 2 2 2 tail(propagated_labels_all) #>                   subjectkey group 1 2 3 4 5 #> 95  subject_NDAR_INVGDBYXWV4  test 1 2 2 1 2 #> 96  subject_NDAR_INVHEUWA52I  test 5 2 2 1 1 #> 97  subject_NDAR_INVK9ULDQA2  test 3 2 2 1 2 #> 98  subject_NDAR_INVKYH529RD  test 4 2 2 1 2 #> 99  subject_NDAR_INVL045Z1TY  test 1 2 2 1 1 #> 100 subject_NDAR_INVLDQH8ATK  test 1 2 2 1 1"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/articles/metasnf-vignette.html","id":"inc","dir":"Articles","previous_headings":"Appendix","what":"inc*","title":"An example metasnf pipeline","text":"section describes generate_design_matrix function randomly assigns input dataframess dropped different SNF runs access wider space possible solutions. default, generate_design_matrix build empty dataframe containing columns outlined design matrix section. non-zero number rows specified calling generate_design_matrix, function calls add_design_matrix_rows add rows randomly valid values. input dataframe inclusion variables rely yet another helper function: random_removal function randomly picks number columns remove according exponential function. likely number input dataframes removed 0, followed 1, way \\(D - 1\\) dataframes \\(D\\) number provided input dataframes. exponential distribution seemed preferrable uniform one, lead large number input dataframes dropped every SNF run.","code":"random_removal #> function (num_cols, min_removed, max_removed)  #> { #>     if (is.null(min_removed)) { #>         min_removed <- 0 #>     } #>     if (is.null(max_removed)) { #>         max_removed <- num_cols - 1 #>     } #>     if (max_removed >= num_cols || min_removed < 0) { #>         stop(paste0(\"The number of removed elements must be between 0 and the\",  #>             \" total number of elements in the data_list (\", num_cols,  #>             \").\")) #>     } #>     rand_vals <- stats::rexp(10000) #>     difference <- max_removed - min_removed #>     rand_vals <- rand_vals/max(rand_vals) #>     rand_vals <- rand_vals * difference #>     rand_vals <- rand_vals + min_removed #>     rand_vals <- round(rand_vals) #>     num_removed <- sample(rand_vals, 1) #>     remove_placeholders <- rep(0, num_removed) #>     keep_placeholders <- rep(1, num_cols - num_removed) #>     unshuffled_removals <- c(remove_placeholders, keep_placeholders) #>     shuffled_removals <- sample(unshuffled_removals) #>     return(shuffled_removals) #> } #> <bytecode: 0x55ec4c3915a8> #> <environment: namespace:metasnf>"},{"path":"https://branchlab.github.io/metasnf/articles/metasnf-vignette.html","id":"snf_scheme","dir":"Articles","previous_headings":"Appendix","what":"snf_scheme","title":"An example metasnf pipeline","text":"section describes individual input dataframes converted final fused network different ways using snf_scheme parameter. snf_scheme: One consideration SNF choosing organize individual features (columns) input dataframes get fused SNF. original SNF paper, input dataframes organized according “measurement type”: three input dataframes containing several features related miRNA, mRNA, DNA methylation. work, large set input dataframes varying amounts overlap expected information content, made grouping features little bit less clear. example, consider input dataframes (1) thicknesses cortical brain regions, (2) surface areas cortical brain regions, (3) volumes subcortical brain regions, (4) mean blood pressure. 4 distinct sets features, 3 distinct sets units (cortical thickness subcortical volume \\(mm^3\\)), (arguably) 2 distinct sources information: structural brain data blood pressure data. immediately clear collapsing data one mentioned sets give rise useful clustering solution purpose. number ways can take individual features produce single SNF-fused similarity matrix end quite large. two examples getting single similarity matrix two single-feature input dataframes: Example 1: Concatenation -> single similarity matrix Two individual dataframes, prior concatenation start joining two features concatenation: single concatenated dataframe Giving rise following distance matrix: \\[\\begin{bmatrix} 0&1&2.24&3.61 \\\\ 1&0&1.41&2.83 \\\\ 2.24&1.41&0&1.41 \\\\ 3.61&2.83&1.41&0 \\\\ \\end{bmatrix}\\] subsequent similarity matrix: \\[\\begin{bmatrix} 0.52&0.23&0.04&0.01 \\\\ 0.23&0.69&0.11&0.02 \\\\ 0.04&0.11&0.71&0.14 \\\\ 0.01&0.02&0.14&0.46 \\\\ \\end{bmatrix}\\] \\(~\\) Example 2: Similarity matrices -> integration SNF first convert input dataframes distance matrices: \\[\\begin{bmatrix} 0&1&2&3 \\\\ 1&0&1&2 \\\\ 2&1&0&1 \\\\ 3&2&1&0 \\\\ \\end{bmatrix}\\] \\[\\begin{bmatrix} 0&0&1&2 \\\\ 0&0&1&2 \\\\ 1&1&0&1 \\\\ 2&2&1&0 \\\\ \\end{bmatrix}\\] convert distance matrices similarity matrices: \\[\\begin{bmatrix} 0.6&0.21&0.04&0.01 \\\\ 0.21&0.9&0.17&0.04 \\\\ 0.04&0.17&0.9&0.21 \\\\ 0.01&0.04&0.21&0.6 \\\\ \\end{bmatrix}\\] \\[\\begin{bmatrix} 1.2&1.2&0.11&0.02 \\\\ 1.2&1.2&0.11&0.02 \\\\ 0.11&0.11&1.2&0.17 \\\\ 0.02&0.02&0.17&0.72 \\\\ \\end{bmatrix}\\] fuse similarity matrices together using SNF: \\[\\begin{bmatrix} 0.5&0.24&0.13&0.12 \\\\ 0.24&0.5&0.14&0.13 \\\\ 0.13&0.14&0.5&0.24 \\\\ 0.12&0.13&0.24&0.5 \\\\ \\end{bmatrix}\\] Contrast similarity matrix obtained Example 1: \\[\\begin{bmatrix} 0.52&0.23&0.04&0.01 \\\\ 0.23&0.69&0.11&0.02 \\\\ 0.04&0.11&0.71&0.14 \\\\ 0.01&0.02&0.14&0.46 \\\\ \\end{bmatrix}\\] ’m entirely sure happening diagonal values identical second matrix, aside, results seem mostly similar. Person 1 similar person 2, person 2 similar person 1, person 3 similar person 4, person 4 similar person 3. values aren’t identical, imagine complicated example slightly different choice feature collapsing, resulting clustering solution different. Going back example input dataframes : cortical thicknesses cortical surface areas subcortical volumes mean blood pressure imagine individually converting 4 input dataframes 4 separate distance matrices, converting similarity matrices, fusing 4 matrices one single network SNF little bit skewed favour brain imaging information. 3 sources describing structural brain features, 1 source blood. Varying snf_scheme parameter gives us access wider range possible clustering solutions changing following approaches taken digest initial input dataframes final fused network: Individual: Input dataframes combined final network SNF. Two-step: Input dataframes combined within user-specified data domains one round SNF combined across domains second round SNF. Domain: Input dataframes combined within domains concatenation combined single fused network SNF. options comprehensive. schemes like added package, feel free make request GitHub.","code":"df1 <- data.frame(     subjectkey = c(\"person1\", \"person2\", \"person3\", \"person4\"),     feature1 = c(1, 2, 3, 4) )  df2 <- data.frame(     subjectkey = c(\"person1\", \"person2\", \"person3\", \"person4\"),     feature2 = c(3, 3, 4, 5) ) df3 <- dplyr::inner_join(df1, df2, by = \"subjectkey\") df3_dist <- df3[, 2:3] |>     stats::dist() |>     as.matrix() |>     round(2) df3_sim <- SNFtool::affinityMatrix(df3_dist, K = 3, sigma = 0.5) |>     round(2) df1 <- data.frame(     subjectkey = c(\"person1\", \"person2\", \"person3\", \"person4\"),     feature1 = c(1, 2, 3, 4) )  df2 <- data.frame(     subjectkey = c(\"person1\", \"person2\", \"person3\", \"person4\"),     feature2 = c(3, 3, 4, 5) ) df1_dist <- df1[, 2] |>     stats::dist() |>     as.matrix() |>     round(2)  df2_dist <- df2[, 2] |>     stats::dist() |>     as.matrix() |>     round(2) df1_sim <- SNFtool::affinityMatrix(df1_dist, K = 3, sigma = 0.5) |>     round(2)  df2_sim <- SNFtool::affinityMatrix(df2_dist, K = 3, sigma = 0.5) |>     round(2) df1_df2_fused <- SNFtool::SNF(list(df1_sim, df2_sim), K = 3) |>     round(2)"},{"path":"https://branchlab.github.io/metasnf/articles/metasnf-vignette.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"An example metasnf pipeline","text":"Caruana, Rich, Mohamed Elhawary, Nam Nguyen, Casey Smith. 2006. “Meta Clustering.” Sixth International Conference Data Mining (ICDM’06), 107–18. https://doi.org/10.1109/ICDM.2006.103. Wang, Bo, Aziz M. Mezlini, Feyyaz Demir, Marc Fiume, Zhuowen Tu, Michael Brudno, Benjamin Haibe-Kains, Anna Goldenberg. 2014. “Similarity Network Fusion Aggregating Data Types Genomic Scale.” Nature Methods 11 (3): 333–37. https://doi.org/10.1038/nmeth.2810.","code":""},{"path":"https://branchlab.github.io/metasnf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Prashanth Velayudhan. Author, maintainer. Eman Nishat. Author. Sonja Stojanovski. Author. Anne L Wheeler. Author, thesis advisor. Bo Wang. Contributor.            Author included SNFtool fragments Aziz Mezlini. Contributor.            Author included SNFtool fragments Feyyaz Demir. Contributor.            Author included SNFtool fragments Marc Fiume. Contributor.            Author included SNFtool fragments Zhuowen Tu. Contributor.            Author included SNFtool fragments Michael Brudno. Contributor.            Author included SNFtool fragments Benjamin Haibe-Kains. Contributor.            Author included SNFtool fragments Anna Goldenberg. Contributor.            Author included SNFtool fragments Benjamin Brew. Contributor.            Author included SNFtool fragments","code":""},{"path":"https://branchlab.github.io/metasnf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Velayudhan P, Nishat E, Stojanovski S, Wheeler (2023). metasnf: Meta Clustering Similarity Network Fusion. R package version 0.2.0, https://branchlab.github.io/metasnf/.","code":"@Manual{,   title = {metasnf: Meta Clustering with Similarity Network Fusion},   author = {Prashanth Velayudhan and Eman Nishat and Sonja Stojanovski and Anne L Wheeler},   year = {2023},   note = {R package version 0.2.0},   url = {https://branchlab.github.io/metasnf/}, }"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Meta Clustering with Similarity Network Fusion","text":"package currently active development. recommend installing latest development version package (best stuff!): require stable version package, please keep track commit want installing.","code":"devtools::install_github(\"BRANCHlab/metasnf\") devtools::install_github(\"BRANCHlab/metasnf@8badfd4d7acaaf3b3c7af62d52b5c9324b82cc6c\")"},{"path":"https://branchlab.github.io/metasnf/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Meta Clustering with Similarity Network Fusion","text":"metasnf package facilitates usage meta clustering paradigm described (Caruana et al. 2006) similarity network fusion (SNF) data integration procedure developed (Wang et al. 2014). package enables repeated iterations SNF distinct clustering hyperparameters combinations input variables making use key data structures. major structures :","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"the-design_matrix","dir":"","previous_headings":"Overview","what":"The design_matrix","title":"Meta Clustering with Similarity Network Fusion","text":"design_matrix dataframe includes tunable clustering settings columns. row represents distinct set clustering settings used produce single clustering solution SNF spectral clustering.","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"the-data_list","dir":"","previous_headings":"Overview","what":"The data_list","title":"Meta Clustering with Similarity Network Fusion","text":"data_list nested list contains preprocessed input data ready used clustering. list within data_list contains (1) dataframe used clustering, (2) name dataframe, (3) domain dataframe, (4) type data (continuous, ordinal, discrete, nominal (categorical), mixed) features within dataframe. Domains user-specified labels indicate dataframes describe similar sources data. example, structural MRI data diffusion MRI data may grouped within neuroimaging domain.","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"the-outcome_list","dir":"","previous_headings":"Overview","what":"The outcome_list","title":"Meta Clustering with Similarity Network Fusion","text":"optional data structure closely resembles data_list, contains data sources meant included direct inputs clustering. Data within outcome_list reserved --model measures comparing completed clustering solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"the-output_matrix","dir":"","previous_headings":"Overview","what":"The output_matrix","title":"Meta Clustering with Similarity Network Fusion","text":"output_matrix large dataframe appends cluster solution columns (one column per subject) design_matrix. contains clustering results generated different settings included design_matrix. output_matrix can convereted extended_output_matrix contains overall regression p-values measures stored outcome_list. extended_output_matrix useful pipelines separation across one several variables stored outcome_list serve primary metric automating selection top clustering solution. Alternatively, top clustering solution can selected regular output_matrix using traditional meta clustering approach clustering cluster solutions manually examining solutions qualitatively distinct “meta clusters” emerge.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD anxiety data — abcd_anxiety","title":"Mock ABCD anxiety data — abcd_anxiety","text":"randomly shuffled anonymized copy anxiety data NIMH Data archive. original file used pdem02.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cbcl_anxiety.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD anxiety data — abcd_anxiety","text":"","code":"abcd_anxiety"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":"abcd-anxiety","dir":"Reference","previous_headings":"","what":"abcd_anxiety","title":"Mock ABCD anxiety data — abcd_anxiety","text":"data frame 275 rows 2 columns: subjectkey unique identifier ABCD dataset cbcl_anxiety_r Ordinal value impairment CBCL anxiety, either 0 (impairment), 1 (borderline clinical), 2 (clinically impaired)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD anxiety data — abcd_anxiety","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD ","title":"Mock ABCD ","text":"randomly shuffled anonymized copy depression data NIMH Data archive. original file used pdem02.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cbcl_depress. data transformed categorical colour values demonstrate Chi-squared test capabilities extend_om.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD ","text":"","code":"abcd_colour"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":"abcd-colour","dir":"Reference","previous_headings":"","what":"abcd_colour","title":"Mock ABCD ","text":"data frame 275 rows 2 columns: subjectkey unique identifier ABCD dataset colour Categorical transformation cbcl_depress.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD ","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD cortical surface area data — abcd_cort_sa","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"randomly shuffled anonymized copy cortical surface area data NIMH Data archive. original file used mrisdp10201.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cort_t.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"","code":"abcd_cort_sa"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":"abcd-cort-sa","dir":"Reference","previous_headings":"","what":"abcd_cort_sa","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"data frame 188 rows 152 columns: subjectkey unique identifier ABCD dataset ... Cortical surface areas various ROIs (mm^2, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD cortical thickness data — abcd_cort_t","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"randomly shuffled anonymized copy cortical thickness data NIMH Data archive. original file used mrisdp10201.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cort_t.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"","code":"abcd_cort_t"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":"abcd-cort-t","dir":"Reference","previous_headings":"","what":"abcd_cort_t","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"data frame 188 rows 152 columns: subjectkey unique identifier ABCD dataset ... Cortical thicknesses various ROIs (mm^3, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD depression data — abcd_depress","title":"Mock ABCD depression data — abcd_depress","text":"randomly shuffled anonymized copy depression data NIMH Data archive. original file used pdem02.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cbcl_depress.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD depression data — abcd_depress","text":"","code":"abcd_depress"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":"abcd-depress","dir":"Reference","previous_headings":"","what":"abcd_depress","title":"Mock ABCD depression data — abcd_depress","text":"data frame 275 rows 2 columns: subjectkey unique identifier ABCD dataset cbcl_depress_r Ordinal value impairment CBCL anxiety, either 0 (impairment), 1 (borderline clinical), 2 (clinically impaired)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD depression data — abcd_depress","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD income data — abcd_income","title":"Mock ABCD income data — abcd_income","text":"randomly shuffled anonymized copy income data NIMH Data archive. original file used pdem02.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_income.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD income data — abcd_income","text":"","code":"abcd_income"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":"abcd-income","dir":"Reference","previous_headings":"","what":"abcd_income","title":"Mock ABCD income data — abcd_income","text":"data frame 300 rows 2 columns: subjectkey unique identifier ABCD dataset household_income Household income 3 category levels (low = 1, medium = 2, high = 3)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD income data — abcd_income","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD pubertal status data — abcd_pubertal","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"randomly shuffled anonymized copy pubertal status data NIMH Data archive. original files used abcd_ssphp01.txt abcd_ssphy01.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_pubertal_status.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"","code":"abcd_pubertal"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":"abcd-pubertal","dir":"Reference","previous_headings":"","what":"abcd_pubertal","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"data frame 275 rows 2 columns: subjectkey unique identifier ABCD dataset pubertal_status Average reported pubertal status child parent (1-5 categorical scale)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD subcortical volumes data — abcd_subc_v","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"randomly shuffled anonymized copy subcortical volume data NIMH Data archive. original file used smrip10201.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_subc_v.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"","code":"abcd_subc_v"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":"abcd-subc-v","dir":"Reference","previous_headings":"","what":"abcd_subc_v","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"data frame 174 rows 31 columns: subjectkey unique identifier ABCD dataset ... Subcortical volumes various ROIs (mm^3, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns to a dataframe — add_columns","title":"Add columns to a dataframe — add_columns","text":"Add new columns dataframe providing character vector column names (param newcols) value occupy row new columns (param fill, NA default)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns to a dataframe — add_columns","text":"","code":"add_columns(df, newcols, fill = NA)"},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns to a dataframe — add_columns","text":"df dataframe extend newcols vector containing new column names fill values elements newly added columns. NA default.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns to a dataframe — add_columns","text":"extended_df dataframe containing added columns","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_design_matrix_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Add design matrix rows — add_design_matrix_rows","title":"Add design matrix rows — add_design_matrix_rows","text":"Add design matrix rows","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_design_matrix_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add design matrix rows — add_design_matrix_rows","text":"","code":"add_design_matrix_rows(   design_matrix,   nrows,   min_removed = NULL,   max_removed = NULL,   retry_limit = 10 )"},{"path":"https://branchlab.github.io/metasnf/reference/add_design_matrix_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add design matrix rows — add_design_matrix_rows","text":"design_matrix existing design matrix nrows number rows added design matrix min_removed smallest number elements may removed max_removed largest number elements may removed retry_limit maximum number attempts generate novel row","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_design_matrix_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add design matrix rows — add_design_matrix_rows","text":"design_matrix New design matrix containing additional rows","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ari_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap meta-clustering results — ari_heatmap","title":"Heatmap meta-clustering results — ari_heatmap","text":"Heatmap meta-clustering results","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ari_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap meta-clustering results — ari_heatmap","text":"","code":"ari_heatmap(   output_matrix_aris,   title = \"\",   save = NULL,   cluster_cols = TRUE,   cluster_rows = TRUE,   hide_columns = FALSE,   hide_rows = FALSE,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/ari_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap meta-clustering results — ari_heatmap","text":"output_matrix_aris results meta_cluster function title plot title save optional path save figure cluster_cols boolean indicating columns shold clustered cluster_rows boolean indicating rows shold clustered hide_columns boolean indicating column names hidden hide_rows boolean indicating row names hidden ... additional parameters pass pheatmap","code":""},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a data_list object, sort data elements by subjectkey — arrange_dl","title":"Given a data_list object, sort data elements by subjectkey — arrange_dl","text":"Given data_list object, sort data elements subjectkey","code":""},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a data_list object, sort data elements by subjectkey — arrange_dl","text":"","code":"arrange_dl(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a data_list object, sort data elements by subjectkey — arrange_dl","text":"data_list data_list object arranged","code":""},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a data_list object, sort data elements by subjectkey — arrange_dl","text":"arranged_data_list arranged data_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram of cluster membership across an output matrix — assigned_clust_hist","title":"Histogram of cluster membership across an output matrix — assigned_clust_hist","text":"Histogram cluster membership across output matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram of cluster membership across an output matrix — assigned_clust_hist","text":"","code":"assigned_clust_hist(om, save = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram of cluster membership across an output matrix — assigned_clust_hist","text":"om output matrix save optional path save figure ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_pheatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Pheatmap of cluster membership across an output matrix — assigned_clust_pheatmap","title":"Pheatmap of cluster membership across an output matrix — assigned_clust_pheatmap","text":"Pheatmap cluster membership across output matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_pheatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pheatmap of cluster membership across an output matrix — assigned_clust_pheatmap","text":"","code":"assigned_clust_pheatmap(om, save = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_pheatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pheatmap of cluster membership across an output matrix — assigned_clust_pheatmap","text":"om output matrix save optional path save figure ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot of cluster membership across an output matrix — assigned_clust_scatter","title":"Scatter plot of cluster membership across an output matrix — assigned_clust_scatter","text":"Scatter plot cluster membership across output matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot of cluster membership across an output matrix — assigned_clust_scatter","text":"","code":"assigned_clust_scatter(om, save = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/assigned_clust_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot of cluster membership across an output matrix — assigned_clust_scatter","text":"om output matrix save optional path save figure ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_ari.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate adjusted rand index between two rows of output matrix — calc_ari","title":"Calculate adjusted rand index between two rows of output matrix — calc_ari","text":"Output matrix must row_id non-sub columns","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_ari.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate adjusted rand index between two rows of output matrix — calc_ari","text":"","code":"calc_ari(r1, r2, df)"},{"path":"https://branchlab.github.io/metasnf/reference/calc_ari.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate adjusted rand index between two rows of output matrix — calc_ari","text":"r1 first row cluster labels r2 second row cluster labels df dataframe containing cluster labels","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_ari.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate adjusted rand index between two rows of output matrix — calc_ari","text":"ari adjusted rand index","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_om_aris.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta-cluster calculations — calc_om_aris","title":"Meta-cluster calculations — calc_om_aris","text":"Generate matrix pairwise cluster-solution similarities Adjusted Rand index calculations","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_om_aris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta-cluster calculations — calc_om_aris","text":"","code":"calc_om_aris(om)"},{"path":"https://branchlab.github.io/metasnf/reference/calc_om_aris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meta-cluster calculations — calc_om_aris","text":"om output_matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_om_aris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Meta-cluster calculations — calc_om_aris","text":"om_aris ARIs clustering solutions output matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_anova.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate anova p-values for a characterization_df — cbcl_anova","title":"Calculate anova p-values for a characterization_df — cbcl_anova","text":"Calculate anova p-values characterization_df","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate anova p-values for a characterization_df — cbcl_anova","text":"","code":"cbcl_anova(characterization_df, bonferroni = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate anova p-values for a characterization_df — cbcl_anova","text":"characterization_df merged list containing cluster, subjectkey, various CBCL outcomes bonferroni boolean reporting bonferroni corrected p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_bar_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar chart CBCL values for a characterization dataframe — cbcl_bar_chart","title":"Bar chart CBCL values for a characterization dataframe — cbcl_bar_chart","text":"Bar chart CBCL values characterization dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_bar_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar chart CBCL values for a characterization dataframe — cbcl_bar_chart","text":"","code":"cbcl_bar_chart(characterization_df, outcome, nclust = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_bar_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar chart CBCL values for a characterization dataframe — cbcl_bar_chart","text":"characterization_df merged list containing cluster, subjectkey, various CBCL outcomes outcome string specifying outcome interest, e.g. cbcl_nausea nclust number clusters","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_ord_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate overall p-values for a characterization_df — cbcl_ord_reg","title":"Calculate overall p-values for a characterization_df — cbcl_ord_reg","text":"Calculate overall p-values characterization_df","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_ord_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate overall p-values for a characterization_df — cbcl_ord_reg","text":"","code":"cbcl_ord_reg(characterization_df, bonferroni = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_ord_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate overall p-values for a characterization_df — cbcl_ord_reg","text":"characterization_df merged list containing cluster, subjectkey, various CBCL outcomes bonferroni boolean reporting bonferroni corrected p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_ord_reg_from_om.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate overall p-values for an om — cbcl_ord_reg_from_om","title":"Calculate overall p-values for an om — cbcl_ord_reg_from_om","text":"Calculate overall p-values om","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_ord_reg_from_om.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate overall p-values for an om — cbcl_ord_reg_from_om","text":"","code":"cbcl_ord_reg_from_om(om, cbcl_list, bonferroni = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/cbcl_ord_reg_from_om.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate overall p-values for an om — cbcl_ord_reg_from_om","text":"om output matrix cbcl_list list CBCL measures bonferroni boolean reporting bonferroni corrected p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert character-type columns of a dataframe to factor-type — char_to_fac","title":"Convert character-type columns of a dataframe to factor-type — char_to_fac","text":"Convert character-type columns dataframe factor-type","code":""},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert character-type columns of a dataframe to factor-type — char_to_fac","text":"","code":"char_to_fac(df)"},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert character-type columns of a dataframe to factor-type — char_to_fac","text":"df dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert character-type columns of a dataframe to factor-type — char_to_fac","text":"df_converted dataframe factor-type columns instead char-type columns","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_subj_orders_for_lp.html","id":null,"dir":"Reference","previous_headings":"","what":"Check subject orders for label propagation — check_subj_orders_for_lp","title":"Check subject orders for label propagation — check_subj_orders_for_lp","text":"Prior label propagation, essential subject orders full fused network supplied clustering information consistent.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_subj_orders_for_lp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check subject orders for label propagation — check_subj_orders_for_lp","text":"","code":"check_subj_orders_for_lp(data_list, om_row, n_train, n_test)"},{"path":"https://branchlab.github.io/metasnf/reference/check_subj_orders_for_lp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check subject orders for label propagation — check_subj_orders_for_lp","text":"data_list data list om_row output matrix row n_train number training subjects n_test number testing subjects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_subj_orders_for_lp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check subject orders for label propagation — check_subj_orders_for_lp","text":"all_checks_passed boolean indicating subs order","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_sq_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Chi-squared test p-value — chi_sq_p","title":"Chi-squared test p-value — chi_sq_p","text":"Returns p-value following chi-squared test (without Yates' continuity correction) distribution categorical variable cluster.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_sq_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chi-squared test p-value — chi_sq_p","text":"","code":"chi_sq_p(clust_membership, outcome_df, outcome_var)"},{"path":"https://branchlab.github.io/metasnf/reference/chi_sq_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chi-squared test p-value — chi_sq_p","text":"clust_membership Dataframe cluster membership (get_clustered_subs) outcome_df Dataframe containing outcome feature outcome_var Outcome feature string","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_sq_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chi-squared test p-value — chi_sq_p","text":"p_val chi-squared test p-value","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clean_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean a plot — clean_plot","title":"Clean a plot — clean_plot","text":"Given ggplot object list elements removed, return cleaned version plot.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clean_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean a plot — clean_plot","text":"","code":"clean_plot(plot, removables = c())"},{"path":"https://branchlab.github.io/metasnf/reference/clean_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean a plot — clean_plot","text":"plot ggplot object removables character vector items removed. Can contain \"x\" x-axis label, \"y\" y-axis label, \"legend\" remove legend.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/clean_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean a plot — clean_plot","text":"plot cleaned ggplot object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","title":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","text":"Column name \"subjectkey\" reserved unique identifier subjects. function ensures dataframes UID set \"subjectkey\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","text":"","code":"convert_uids(data_list, old_uid = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","text":"data_list data_list old_uid (string) name uid column currently used data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","text":"dl_renamed_id data list 'subjectkey' UID","code":""},{"path":"https://branchlab.github.io/metasnf/reference/discretisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Adaptation of SNFtool's discretisation function — discretisation","title":"Adaptation of SNFtool's discretisation function — discretisation","text":"Adaptation SNFtool's discretisation function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/discretisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adaptation of SNFtool's discretisation function — discretisation","text":"","code":"discretisation(eigenvectors)"},{"path":"https://branchlab.github.io/metasnf/reference/discretisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adaptation of SNFtool's discretisation function — discretisation","text":"eigenvectors Eigenvectors","code":""},{"path":"https://branchlab.github.io/metasnf/reference/discretisationeigenvectordata.html","id":null,"dir":"Reference","previous_headings":"","what":"Adaptation of SNFtool's discretisationeigenvectordata — discretisationeigenvectordata","title":"Adaptation of SNFtool's discretisationeigenvectordata — discretisationeigenvectordata","text":"Adaptation SNFtool's discretisationeigenvectordata","code":""},{"path":"https://branchlab.github.io/metasnf/reference/discretisationeigenvectordata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adaptation of SNFtool's discretisationeigenvectordata — discretisationeigenvectordata","text":"","code":"discretisationeigenvectordata(eigenvector)"},{"path":"https://branchlab.github.io/metasnf/reference/discretisationeigenvectordata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adaptation of SNFtool's discretisationeigenvectordata — discretisationeigenvectordata","text":"eigenvector Eigenvector","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dm_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap design matrix based on meta-clustering results — dm_heatmap","title":"Heatmap design matrix based on meta-clustering results — dm_heatmap","text":"Normalizes design matrix plots heatmap. Rows reordered match row-clustering present within provided meta-clustering result.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dm_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap design matrix based on meta-clustering results — dm_heatmap","text":"","code":"dm_heatmap(   design_matrix,   order = NULL,   show_rownames = TRUE,   save = NULL,   hide_ids = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/dm_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap design matrix based on meta-clustering results — dm_heatmap","text":"design_matrix matrix indicating parameters iterate SNF order numeric vector indicating row ordering design matrix show_rownames TRUE (default), rownames shown heatmap save optional path save figure hide_ids boolean indicating row_id numbers hidden","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dm_row_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply-based function for execute design matrix — dm_row_fn","title":"Apply-based function for execute design matrix — dm_row_fn","text":"Apply-based function execute design matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dm_row_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply-based function for execute design matrix — dm_row_fn","text":"","code":"dm_row_fn(dm_row, dl)"},{"path":"https://branchlab.github.io/metasnf/reference/dm_row_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply-based function for execute design matrix — dm_row_fn","text":"dm_row row design matrix dl data list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dm_row_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply-based function for execute design matrix — dm_row_fn","text":"corresponding OM row","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domain_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Domain merge — domain_merge","title":"Domain merge — domain_merge","text":"Given data_list, returns new data_list original data objects particlar domain concatenated","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domain_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domain merge — domain_merge","text":"","code":"domain_merge(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/domain_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domain merge — domain_merge","text":"data_list nested list input data generated function get_data_list()","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domain_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Domain merge — domain_merge","text":"domain_dl","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":null,"dir":"Reference","previous_headings":"","what":"Domains — domains","title":"Domains — domains","text":"Domains","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domains — domains","text":"","code":"domains(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domains — domains","text":"data_list nested list input data generated function get_data_list()","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Domains — domains","text":"domain_list list domains","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_design_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute variations of SNF as described by a design matrix — execute_design_matrix","title":"Execute variations of SNF as described by a design matrix — execute_design_matrix","text":"Execute variations SNF described design matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_design_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute variations of SNF as described by a design matrix — execute_design_matrix","text":"","code":"execute_design_matrix(data_list, design_matrix, processes = 1)"},{"path":"https://branchlab.github.io/metasnf/reference/execute_design_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute variations of SNF as described by a design matrix — execute_design_matrix","text":"data_list nested list input data generated function get_data_list() design_matrix matrix indicating parameters iterate SNF processes Specify number processes used complete SNF iterations * 1 (default) Sequential processing: function iterate design_matrix one row time loop. option make use multiple CPU cores, show progress bar. * 2 higher: Parallel processing use future.apply::future_apply distribute SNF iterations across specified number CPU cores. higher number available cores, warning printed maximum number cores used. * max: available cores used.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_design_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute variations of SNF as described by a design matrix — execute_design_matrix","text":"populated_design_matrix design matrix filled columns related subtype membership","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_design_matrix_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel processing form of execute design matrix — execute_design_matrix_p","title":"Parallel processing form of execute design matrix — execute_design_matrix_p","text":"Parallel processing form execute design matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_design_matrix_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel processing form of execute design matrix — execute_design_matrix_p","text":"","code":"execute_design_matrix_p(data_list, design_matrix, processes)"},{"path":"https://branchlab.github.io/metasnf/reference/execute_design_matrix_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel processing form of execute design matrix — execute_design_matrix_p","text":"data_list nested list input data generated function get_data_list() design_matrix matrix indicating parameters iterate SNF processes Number parallel processes used executing SNF","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_design_matrix_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel processing form of execute design matrix — execute_design_matrix_p","text":"populated_design_matrix design matrix filled columns related subtype membership","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_inclusion.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute inclusion — execute_inclusion","title":"Execute inclusion — execute_inclusion","text":"Given data list design matrix row, returns data list selected inputs","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_inclusion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute inclusion — execute_inclusion","text":"","code":"execute_inclusion(design_matrix, data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/execute_inclusion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute inclusion — execute_inclusion","text":"design_matrix matrix indicating parameters iterate SNF data_list nested list input data generated function get_data_list()","code":""},{"path":"https://branchlab.github.io/metasnf/reference/execute_inclusion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute inclusion — execute_inclusion","text":"selected_data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_om.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend an output matrix to include outcome evaluations — extend_om","title":"Extend an output matrix to include outcome evaluations — extend_om","text":"Extend output matrix include outcome evaluations","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_om.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend an output matrix to include outcome evaluations — extend_om","text":"","code":"extend_om(output_matrix, outcome_list)"},{"path":"https://branchlab.github.io/metasnf/reference/extend_om.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend an output matrix to include outcome evaluations — extend_om","text":"output_matrix output_matrix outcome_list outcome_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_om.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend an output matrix to include outcome evaluations — extend_om","text":"extended_output_matrix extended output matrix contains p-value columns outcome provided outcome_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data_list object - but softcoded — generate_data_list","title":"Generate data_list object - but softcoded — generate_data_list","text":"major data object processed iterating design matrix. full list contains one list per measurement type. Within measurement type's list, elements include actual data structure, name, domain, data 'type' (.e, numeric categorical).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data_list object - but softcoded — generate_data_list","text":"","code":"generate_data_list(   ...,   old_uid = NULL,   test_subjects = NULL,   train_subjects = NULL,   assigned_splits = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data_list object - but softcoded — generate_data_list","text":"... number list formatted (df, \"df_name\", \"df_domain\", \"df_type\") number lists lists formatted (df, \"df_name\", \"df_domain\", \"df_type\") old_uid (string) name uid column currently used data test_subjects character vector test subjects (useful building full data list label propagation) train_subjects character vector train subjects (useful building full data list label propagation) assigned_splits ouptut assign_splits function - can given alternative specifying train/test subjects separately.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate data_list object - but softcoded — generate_data_list","text":"-: include checks make sure format data list correct","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data_list object - but softcoded — generate_data_list","text":"","code":"heart_rate_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var1 = c(0.04, 0.1, 0.3),     var2 = c(30, 2, 0.3) )  personality_test_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var3 = c(900, 1990, 373),     var4 = c(509, 2209, 83) )  dl <- generate_data_list(     list(heart_rate_df, \"data1\", \"domain1\", \"numeric\"),     list(personality_test_df, \"data2\", \"domain2\", \"numeric\"),     old_uid = \"patient_id\" ) #> [1] \"UID successfully converted to subjectkey.\"  # Alternative loading: providing a single list of lists  list_of_lists <- list(     list(heart_rate_df, \"data1\", \"domain1\", \"numeric\"),     list(personality_test_df, \"data2\", \"domain2\", \"numeric\") )  dl <- generate_data_list(     list_of_lists,     old_uid = \"patient_id\" ) #> [1] \"UID successfully converted to subjectkey.\""},{"path":"https://branchlab.github.io/metasnf/reference/generate_design_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a design matrix - but softcoded — generate_design_matrix","title":"Build a design matrix - but softcoded — generate_design_matrix","text":"Build design matrix - softcoded","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_design_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a design matrix - but softcoded — generate_design_matrix","text":"","code":"generate_design_matrix(   data_list,   nrows = 0,   seed = NULL,   min_removed = NULL,   max_removed = NULL,   retry_limit = 10 )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_design_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a design matrix - but softcoded — generate_design_matrix","text":"data_list data list object determine variables inclusion exclusion nrows number design matrix rows seed set seed random matrix generation. Note min_removed smallest number elements may removed max_removed largest number elements may removed retry_limit maximum number attempts generate novel row affects global seed.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_design_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a design matrix - but softcoded — generate_design_matrix","text":"design_matrix design matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_design_matrix_ak.html","id":null,"dir":"Reference","previous_headings":"","what":"Build design matrix for scanning alpha and K — generate_design_matrix_ak","title":"Build design matrix for scanning alpha and K — generate_design_matrix_ak","text":"Build design matrix scanning alpha K","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_design_matrix_ak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build design matrix for scanning alpha and K — generate_design_matrix_ak","text":"","code":"generate_design_matrix_ak()"},{"path":"https://branchlab.github.io/metasnf/reference/generate_design_matrix_ak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build design matrix for scanning alpha and K — generate_design_matrix_ak","text":"design_matrix Adds standard grid expansion SNF hyperparams","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_outcome_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate outcome_list object - but softcoded — generate_outcome_list","title":"Generate outcome_list object - but softcoded — generate_outcome_list","text":"major object containing outcome variables","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_outcome_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate outcome_list object - but softcoded — generate_outcome_list","text":"","code":"generate_outcome_list(..., old_uid = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/generate_outcome_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate outcome_list object - but softcoded — generate_outcome_list","text":"... Lists outcomes formatted (dataframe, \"name\", \"type\") old_uid (string) name uid column currently used data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_outcome_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate outcome_list object - but softcoded — generate_outcome_list","text":"outcome_list structure containing outcome measure data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_output_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Build output matrix — generate_output_matrix","title":"Build output matrix — generate_output_matrix","text":"matrix contain columns populated SNF results","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_output_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build output matrix — generate_output_matrix","text":"","code":"generate_output_matrix(data_list, design_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/generate_output_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build output matrix — generate_output_matrix","text":"data_list nested list input data generated function get_data_list() design_matrix matrix indicating parameters iterate SNF ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_output_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build output matrix — generate_output_matrix","text":"output_matrix output matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract dataframe of cluster and subject key from output matrix row — get_cluster_df","title":"Extract dataframe of cluster and subject key from output matrix row — get_cluster_df","text":"Extract dataframe cluster subject key output matrix row","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract dataframe of cluster and subject key from output matrix row — get_cluster_df","text":"","code":"get_cluster_df(om_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract dataframe of cluster and subject key from output matrix row — get_cluster_df","text":"om_row Output matrix row","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract dataframe of cluster and subject key from output matrix row — get_cluster_df","text":"cluster_df dataframe cluster subjectkey","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clustered_subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get clustered subjects — get_clustered_subs","title":"Get clustered subjects — get_clustered_subs","text":"Pull dataframe clustered subjects output matrix structure","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clustered_subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get clustered subjects — get_clustered_subs","text":"","code":"get_clustered_subs(output_matrix_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_clustered_subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get clustered subjects — get_clustered_subs","text":"output_matrix_row Output matrix row containing subtype membership","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clustered_subs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get clustered subjects — get_clustered_subs","text":"clustered_subs Dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract list of assigned clusters — get_clusters","title":"Extract list of assigned clusters — get_clusters","text":"Extract list assigned clusters","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract list of assigned clusters — get_clusters","text":"","code":"get_clusters(om_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract list of assigned clusters — get_clusters","text":"om_row Output matrix row","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract list of assigned clusters — get_clusters","text":"clusters list assigned clusters","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance matrices — get_dist_matrix","title":"Calculate distance matrices — get_dist_matrix","text":"Given dataframe numerical variables, return euclidean distance matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance matrices — get_dist_matrix","text":"","code":"get_dist_matrix(df, input_type, scale = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance matrices — get_dist_matrix","text":"df Raw dataframe subject IDs column 1 input_type Either \"numeric\" (resulting euclidean distances), \"categorical\" (resulting binary distances), \"mixed\" (resulting gower distances) scale Whether data standard normalized prior distance calculations","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance matrices — get_dist_matrix","text":"dist_matrix Matrix inter-observation distances","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mean p-value — get_mean_p","title":"Get mean p-value — get_mean_p","text":"Given output matrix row containing evaluated p-values, returns mean","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mean p-value — get_mean_p","text":"","code":"get_mean_p(output_matrix_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mean p-value — get_mean_p","text":"output_matrix_row row output_matrix object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mean p-value — get_mean_p","text":"mean_p mean p-value","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_min_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Get minimum p-value — get_min_p","title":"Get minimum p-value — get_min_p","text":"Given output matrix row containing evaluated p-values, returns minimum","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_min_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get minimum p-value — get_min_p","text":"","code":"get_min_p(output_matrix_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_min_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get minimum p-value — get_min_p","text":"output_matrix_row row output_matrix object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_min_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get minimum p-value — get_min_p","text":"min_p minimum p-value","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Get p-value — get_p","title":"Get p-value — get_p","text":"Depending outcome measure, perform ordinal regression linear regression return p-value benchmark measure well-separated clusters outcome measure","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get p-value — get_p","text":"","code":"get_p(assigned_subs, outcome_df, outcome_type, outcome_name)"},{"path":"https://branchlab.github.io/metasnf/reference/get_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get p-value — get_p","text":"assigned_subs dataframe subjects assigned cluster cluster assigned outcome_df dataframe containing subjectkey outcome feautre column outcome_type string indicating outcome type (numeric ordinal) outcome_name string indicating name feature","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get p-value — get_p","text":"p_val smallest p-value interest","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_pheatmap_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the row ordering of a meta-clustering solution — get_pheatmap_order","title":"Return the row ordering of a meta-clustering solution — get_pheatmap_order","text":"Pheatmap reorders meta clustering results enable meta-cluster visualization. function extracts new row orders apply matrices.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_pheatmap_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the row ordering of a meta-clustering solution — get_pheatmap_order","text":"","code":"get_pheatmap_order(matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/get_pheatmap_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the row ordering of a meta-clustering solution — get_pheatmap_order","text":"matrix matrix used pheatmap input","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_pheatmap_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the row ordering of a meta-clustering solution — get_pheatmap_order","text":"pheatmap_order Row orders clustered pheatmap","code":""},{"path":"https://branchlab.github.io/metasnf/reference/keep_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter data to training or testing subjects only — keep_split","title":"Filter data to training or testing subjects only — keep_split","text":"Given dataframe results train_test_split(), return just data subjects assigned specified split","code":""},{"path":"https://branchlab.github.io/metasnf/reference/keep_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter data to training or testing subjects only — keep_split","text":"","code":"keep_split(df, assigned_df, split, old_uid = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/keep_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter data to training or testing subjects only — keep_split","text":"df Dataframe subsetted training testing split assigned_df Dataframe containing \"subjectkey\" \"split\" cols train_test_assign() split String indicating split keep (\"train\" \"test\") old_uid (string) name uid column currently used data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/keep_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter data to training or testing subjects only — keep_split","text":"split_df Dataframe subsetted specified split","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Label propagation — label_prop","title":"Label propagation — label_prop","text":"Given full fused network (one containing pre-labeled training subjects unlabeled test-subjects) clusters pre-labeled subjects, return label propagated list clusters subjects. function derived SNFtool::groupPredict. Modifications made take full fused network input, rather taking input dataframes running SNF internally. ensures alternative approaches data normalization distance matrix calculations can chosen user.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label propagation — label_prop","text":"","code":"label_prop(full_fused_network, clusters)"},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label propagation — label_prop","text":"full_fused_network Network made running SNF training test subjects together clusters vector training subject assigned clusters matching order appear full_fused_network","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label propagation — label_prop","text":"new_clusters list cluster labels subjects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lin_reg_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear regression p-value — lin_reg_p","title":"Linear regression p-value — lin_reg_p","text":"Returns p-value following linear regression cluster IV provided ordinal variable DV","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lin_reg_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear regression p-value — lin_reg_p","text":"","code":"lin_reg_p(clust_membership, outcome_df, outcome_var)"},{"path":"https://branchlab.github.io/metasnf/reference/lin_reg_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear regression p-value — lin_reg_p","text":"clust_membership Dataframe cluster membership (get_clustered_subs) outcome_df Dataframe containing DV outcome_var DV string","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lin_reg_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear regression p-value — lin_reg_p","text":"p_val overall p-value distinguishing clusters DV","code":""},{"path":"https://branchlab.github.io/metasnf/reference/list_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove items from a data_list or outcome_list — list_remove","title":"Remove items from a data_list or outcome_list — list_remove","text":"Removes specified elements provided data_list outcome_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/list_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove items from a data_list or outcome_list — list_remove","text":"","code":"list_remove(list_object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/list_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove items from a data_list or outcome_list — list_remove","text":"list_object data_list outcome_list containing components removed ... number components remove list object, passed strings","code":""},{"path":"https://branchlab.github.io/metasnf/reference/list_remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove items from a data_list or outcome_list — list_remove","text":"pruned_list pruned list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lp_om.html","id":null,"dir":"Reference","previous_headings":"","what":"Label propagation over an output matrix — lp_om","title":"Label propagation over an output matrix — lp_om","text":"Given output matrix data_list object containing subjects, return dataframe label propagated results om rows","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lp_om.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label propagation over an output matrix — lp_om","text":"","code":"lp_om(om, full_data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/lp_om.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label propagation over an output matrix — lp_om","text":"om output matrix full_data_list data_list object made rbinding(train, test) data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lp_om.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label propagation over an output matrix — lp_om","text":"labeled_df dataframe label propagated results om rows","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mc_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Outdated ari_heatmap — mc_heatmap","title":"Outdated ari_heatmap — mc_heatmap","text":"Outdated ari_heatmap","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mc_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outdated ari_heatmap — mc_heatmap","text":"","code":"mc_heatmap(mc_results, save = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/mc_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outdated ari_heatmap — mc_heatmap","text":"mc_results outdated save outdated","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge list of dataframes — merge_df_list","title":"Merge list of dataframes — merge_df_list","text":"Merge list dataframes","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge list of dataframes — merge_df_list","text":"","code":"merge_df_list(df_list, join = \"inner\")"},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge list of dataframes — merge_df_list","text":"df_list list dataframes join String indicating join \"inner\" \"full\"","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge list of dataframes — merge_df_list","text":"merged_df inner join dataframes list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/meta_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Outdated calc_om_aris — meta_cluster","title":"Outdated calc_om_aris — meta_cluster","text":"Outdated calc_om_aris","code":""},{"path":"https://branchlab.github.io/metasnf/reference/meta_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outdated calc_om_aris — meta_cluster","text":"","code":"meta_cluster(mc_om)"},{"path":"https://branchlab.github.io/metasnf/reference/meta_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outdated calc_om_aris — meta_cluster","text":"mc_om output matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/no_subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","title":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","text":"Removes 'subject_' prefixed columns dataframe. Useful printing output_matrix structures console","code":""},{"path":"https://branchlab.github.io/metasnf/reference/no_subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","text":"","code":"no_subs(df)"},{"path":"https://branchlab.github.io/metasnf/reference/no_subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","text":"df dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/no_subs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","text":"df_no_subs Dataframe without subjects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert dataframe columns to numeric type — numcol_to_numeric","title":"Convert dataframe columns to numeric type — numcol_to_numeric","text":"Converts columns dataframe can converted numeric type numeric type.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert dataframe columns to numeric type — numcol_to_numeric","text":"","code":"numcol_to_numeric(df)"},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert dataframe columns to numeric type — numcol_to_numeric","text":"df dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert dataframe columns to numeric type — numcol_to_numeric","text":"df dataframe possible columns converted type numeric","code":""},{"path":"https://branchlab.github.io/metasnf/reference/om_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot output matrix results by minimum and mean p-values — om_scatter","title":"Scatter plot output matrix results by minimum and mean p-values — om_scatter","text":"Scatter plot output matrix results minimum mean p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/om_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot output matrix results by minimum and mean p-values — om_scatter","text":"","code":"om_scatter(   om,   title = NULL,   pointsize = 5,   labelsize = 5,   fontsize = 20,   cluster_colours = 6,   xlim = NULL,   ylim = NULL,   save = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/om_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot output matrix results by minimum and mean p-values — om_scatter","text":"om output matrix title plot title pointsize size scatter plot point labelsize size label text fontsize plot fontsize cluster_colours use colour palette built specified number clusters. generating multiple graphs varying numbers clusters, specifying parameter ensure cluster count colour pairs stay constant. xlim x-axis limits log scale ylim y-axis limits log scale save optional path save figure ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordinal regression p-value — ord_reg_p","title":"Ordinal regression p-value — ord_reg_p","text":"Returns p-value following ordinal regression cluster IV provided ordinal variable DV","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordinal regression p-value — ord_reg_p","text":"","code":"ord_reg_p(clust_membership, outcome_df, outcome_var)"},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordinal regression p-value — ord_reg_p","text":"clust_membership Dataframe cluster membership (get_clustered_subs) outcome_df Dataframe containing DV outcome_var DV string","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordinal regression p-value — ord_reg_p","text":"p_val overall p-value distinguishing clusters DV","code":""},{"path":"https://branchlab.github.io/metasnf/reference/p_val_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select p-values from output matrix — p_val_select","title":"Select p-values from output matrix — p_val_select","text":"Select p-values output matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/p_val_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select p-values from output matrix — p_val_select","text":"","code":"p_val_select(output_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/p_val_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select p-values from output matrix — p_val_select","text":"output_matrix output execute_design_matrix()","code":""},{"path":"https://branchlab.github.io/metasnf/reference/p_val_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select p-values from output matrix — p_val_select","text":"p_val_matrix P-values ready heatmap plotting","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot_all_cbcl.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clusters across all CBCL measures — plot_all_cbcl","title":"Plot clusters across all CBCL measures — plot_all_cbcl","text":"Arrange optionally save grid bar charts cluster x-axis CBCL measure y-axis.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot_all_cbcl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clusters across all CBCL measures — plot_all_cbcl","text":"","code":"plot_all_cbcl(   om,   cbcl_list,   fig_path_fn,   save_prefix = NULL,   save_suffix = NULL,   include = NULL,   exclude = NULL,   w = 25,   h = 20 )"},{"path":"https://branchlab.github.io/metasnf/reference/plot_all_cbcl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clusters across all CBCL measures — plot_all_cbcl","text":"om output matrix-like structure cbcl_list List containing CBCL dataframes fig_path_fn Closure specifying location save final figure save_prefix prefix add file saved save_suffix suffix add file saved include string list strings specifying CBCL measures included. CBCL measures excluded. exclude string list strings specifying CBCL measures excluded. CBCL measures excluded. w width final saved plots h height final saved plots","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot_nmis.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot the NMI values for each row of an nmi_df — plot_nmis","title":"Scatter plot the NMI values for each row of an nmi_df — plot_nmis","text":"Scatter plot NMI values row nmi_df","code":""},{"path":"https://branchlab.github.io/metasnf/reference/plot_nmis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot the NMI values for each row of an nmi_df — plot_nmis","text":"","code":"plot_nmis(nmi_df, fig_path_fn = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/plot_nmis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot the NMI values for each row of an nmi_df — plot_nmis","text":"nmi_df dataframe input column number NMI columns fig_path_fn function returns full file path location","code":""},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dl_sk.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ","title":"Add ","text":"Add \"subject_\" prefix UID values subjectkey column","code":""},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dl_sk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ","text":"","code":"prefix_dl_sk(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dl_sk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ","text":"data_list data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dl_sk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add ","text":"data_list data_list without NAs","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pvals_pheatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Pheatmap a matrix of p-values — pvals_pheatmap","title":"Pheatmap a matrix of p-values — pvals_pheatmap","text":"Pheatmap matrix p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pvals_pheatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pheatmap a matrix of p-values — pvals_pheatmap","text":"","code":"pvals_pheatmap(   pvals,   order = NULL,   cluster_cols = TRUE,   show_rownames = FALSE,   save = NULL,   reverse_colours = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/pvals_pheatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pheatmap a matrix of p-values — pvals_pheatmap","text":"pvals matrix p-values order numeric vector indicating row ordering design matrix cluster_cols TRUE, pheatmap cluster (rearrange) columns show_rownames TRUE (default), rownames shown heatmap save optional path save figure reverse_colours boolean invert colours","code":""},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random removal sequence — random_removal","title":"Generate random removal sequence — random_removal","text":"Helper function contribute rows within design matrix. Number columns removed follows exponential probability distribution typically keep columns.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random removal sequence — random_removal","text":"","code":"random_removal(num_cols, min_removed, max_removed)"},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random removal sequence — random_removal","text":"num_cols Number feature elements consideration exclusion min_removed smallest number elements may removed max_removed largest number elements may removed","code":""},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random removal sequence — random_removal","text":"shuffled_removals Binary vector sequence indicating column included (1) excluded (0)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/reduce_dl_to_common.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce data_list to common subjects — reduce_dl_to_common","title":"Reduce data_list to common subjects — reduce_dl_to_common","text":"Given data_list object, reduce nested dataframe contain set subjects shared nested dataframes","code":""},{"path":"https://branchlab.github.io/metasnf/reference/reduce_dl_to_common.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce data_list to common subjects — reduce_dl_to_common","text":"","code":"reduce_dl_to_common(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/reduce_dl_to_common.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce data_list to common subjects — reduce_dl_to_common","text":"data_list data_list object reduced","code":""},{"path":"https://branchlab.github.io/metasnf/reference/reduce_dl_to_common.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce data_list to common subjects — reduce_dl_to_common","text":"reduced_data_list data_list object subsetted subjectssnf shared across nested dataframes","code":""},{"path":"https://branchlab.github.io/metasnf/reference/remove_dl_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NAs from a data_list object — remove_dl_na","title":"Remove NAs from a data_list object — remove_dl_na","text":"Remove NAs data_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/remove_dl_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NAs from a data_list object — remove_dl_na","text":"","code":"remove_dl_na(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/remove_dl_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NAs from a data_list object — remove_dl_na","text":"data_list data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/remove_dl_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NAs from a data_list object — remove_dl_na","text":"data_list data_list without NAs","code":""},{"path":"https://branchlab.github.io/metasnf/reference/select_om.html","id":null,"dir":"Reference","previous_headings":"","what":"Select specific row_ids from an output matrix — select_om","title":"Select specific row_ids from an output matrix — select_om","text":"Select specific row_ids output matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/select_om.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select specific row_ids from an output matrix — select_om","text":"","code":"select_om(om, row_ids)"},{"path":"https://branchlab.github.io/metasnf/reference/select_om.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select specific row_ids from an output matrix — select_om","text":"om output matrix row_ids vector row_id values selected","code":""},{"path":"https://branchlab.github.io/metasnf/reference/select_om.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select specific row_ids from an output matrix — select_om","text":"selected_om","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":null,"dir":"Reference","previous_headings":"","what":"SNF a data_list — snf_step","title":"SNF a data_list — snf_step","text":"SNF data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SNF a data_list — snf_step","text":"","code":"snf_step(data_list, scheme, K = 20, alpha = 0.5)"},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SNF a data_list — snf_step","text":"data_list nested list input data generated function get_data_list() scheme SNF system use achieve final fused network K K hyperparameter alpha alpha/eta/sigma hyperparameter","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SNF a data_list — snf_step","text":"fused_network final fused network clustering","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sol.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize an outcome list — sol","title":"Summarize an outcome list — sol","text":"Summarize outcome list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize an outcome list — sol","text":"","code":"sol(outcome_list)"},{"path":"https://branchlab.github.io/metasnf/reference/sol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize an outcome list — sol","text":"outcome_list outcome_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize an outcome list — sol","text":"ol_summary Summarized output","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_clustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Adaptation of SNFtool's spectral clustering function — spectral_clustering","title":"Adaptation of SNFtool's spectral clustering function — spectral_clustering","text":"Adaptation SNFtool's spectral clustering function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_clustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adaptation of SNFtool's spectral clustering function — spectral_clustering","text":"","code":"spectral_clustering(affinity, K, type = 3)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_clustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adaptation of SNFtool's spectral clustering function — spectral_clustering","text":"affinity similarity matrix K hyperparameter type type spectral clustering","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_clustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adaptation of SNFtool's spectral clustering function — spectral_clustering","text":"RETURN","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Select all columns of a dataframe starting with a given string prefix. — subs","title":"Select all columns of a dataframe starting with a given string prefix. — subs","text":"Removes columns prefixed 'subject_' prefixed columns dataframe. Useful intermediate step extracting subject UIDs output_matrix structure.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select all columns of a dataframe starting with a given string prefix. — subs","text":"","code":"subs(df)"},{"path":"https://branchlab.github.io/metasnf/reference/subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select all columns of a dataframe starting with a given string prefix. — subs","text":"df Dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select all columns of a dataframe starting with a given string prefix. — subs","text":"df_subs Dataframe 'subject_' prefixed columns","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize data list — summarize_dl","title":"Summarize data list — summarize_dl","text":"Summarize data list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize data list — summarize_dl","text":"","code":"summarize_dl(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize data list — summarize_dl","text":"data_list nested list input data generated function get_data_list()","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize data list — summarize_dl","text":"dl_summary Summarized output","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_ol.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize outcome list — summarize_ol","title":"Summarize outcome list — summarize_ol","text":"Summarize outcome list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_ol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize outcome list — summarize_ol","text":"","code":"summarize_ol(outcome_list)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_ol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize outcome list — summarize_ol","text":"outcome_list nested list input data generated function get_outcome_list()","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_ol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize outcome list — summarize_ol","text":"ol_summary Summarized output","code":""},{"path":"https://branchlab.github.io/metasnf/reference/top_om_per_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Select the top output matrix rows for each cluster — top_om_per_cluster","title":"Select the top output matrix rows for each cluster — top_om_per_cluster","text":"Given output matrix, returns dataframe containing row lowest mean p-value lowest min p-value cluster sizes 2-5","code":""},{"path":"https://branchlab.github.io/metasnf/reference/top_om_per_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select the top output matrix rows for each cluster — top_om_per_cluster","text":"","code":"top_om_per_cluster(om)"},{"path":"https://branchlab.github.io/metasnf/reference/top_om_per_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select the top output matrix rows for each cluster — top_om_per_cluster","text":"om output matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/top_om_per_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select the top output matrix rows for each cluster — top_om_per_cluster","text":"top_clusts_df dataframe top om rows","code":""},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Training and testing split — train_test_assign","title":"Training and testing split — train_test_assign","text":"Given vector subject_id threshold, returns list members training set testing set. function relies whether absolute value Jenkins's one_at_a_time hash function exceeds maximum possible value (2147483647) multiplied threshold.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Training and testing split — train_test_assign","text":"","code":"train_test_assign(train_frac, subjects, seed = 42)"},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Training and testing split — train_test_assign","text":"train_frac fraction (0 1) subjects training subjects available subjects distribution seed Seed used Jenkins's one_at_a_time hash function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Training and testing split — train_test_assign","text":"split named list containing training testing subject_ids","code":""},{"path":"https://branchlab.github.io/metasnf/reference/two_step_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Two step SNF — two_step_merge","title":"Two step SNF — two_step_merge","text":"Individual dataframes individual similarity matrices one fused network per domain one final fused network.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/two_step_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two step SNF — two_step_merge","text":"","code":"two_step_merge(data_list, K = 20, alpha = 0.5)"},{"path":"https://branchlab.github.io/metasnf/reference/two_step_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two step SNF — two_step_merge","text":"data_list nested list input data generated function get_data_list() K K hyperparameter alpha alpha/eta/sigma hyperparameter","code":""},{"path":"https://branchlab.github.io/metasnf/reference/two_step_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two step SNF — two_step_merge","text":"fused_network final fused network clustering","code":""}]
