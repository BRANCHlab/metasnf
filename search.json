[{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://branchlab.github.io/metasnf/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"load-the-library-and-data-into-the-r-environment","dir":"Articles","previous_headings":"1. Setting up the data","what":"Load the library and data into the R environment","title":"A Complete Example","text":"data loaded R environment following format: data one data.frame objects data wide form (one row per patient cluster) dataframes exactly one column uniquely identifies patient row data data complete (missing values) future vignette outline metaSNF can used simultaneously cluster distinct imputations dataset. package comes mock dataframes based real data Adolescent Brain Cognitive Development study: abcd_anxiety (anxiety scores CBCL) abcd_depress (depression scores CBCL) abcd_cort_t (cortical thicknesses) abcd_cort_sa (cortical surface areas mm^2) abcd_subc_v (subcortical volumes mm^3) abcd_h_income (household income 1-3 scale) abcd_pubertal (pubertal status 1-5 scale) ’s cortical thickness data looks like: first column “patient” unique identifier (UID) subjects data. ’s household income data: Putting everything list help us get quicker summaries data. data missing values dataframes number participants. SNF can run complete data, ’ll need either use complete case analysis (removal observations missing values) impute missing values proceed clustering. mentioned , metaSNF can used visualize changes clustering results across different imputations data. now, ’ll just examine simpler complete-case analysis approach reducing dataframes common complete patients.","code":"library(metasnf)  class(abcd_cort_t) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\" dim(abcd_cort_t) #> [1] 188 152 str(abcd_cort_t[1:5, 1:5]) #> Classes 'tbl_df', 'tbl' and 'data.frame':    5 obs. of  5 variables: #>  $ patient : chr  \"NDAR_INV0567T2Y9\" \"NDAR_INV0GLZNC2W\" \"NDAR_INV0IZ157F8\" \"NDAR_INV0J4PYA5F\" ... #>  $ mrisdp_1: num  2.6 2.62 2.62 2.6 2.53 #>  $ mrisdp_2: num  2.49 2.85 2.29 2.67 2.76 #>  $ mrisdp_3: num  2.8 2.78 2.53 2.68 2.83 #>  $ mrisdp_4: num  2.95 2.85 2.96 2.94 2.99 abcd_cort_t[1:5, 1:5] #>            patient mrisdp_1 mrisdp_2 mrisdp_3 mrisdp_4 #> 1 NDAR_INV0567T2Y9    2.601    2.487    2.801    2.954 #> 2 NDAR_INV0GLZNC2W    2.619    2.851    2.784    2.846 #> 3 NDAR_INV0IZ157F8    2.621    2.295    2.530    2.961 #> 4 NDAR_INV0J4PYA5F    2.599    2.670    2.676    2.938 #> 5 NDAR_INV0OYE291Q    2.526    2.761    2.829    2.986 dim(abcd_h_income) #> [1] 275   2 str(abcd_h_income[1:5, ]) #> Classes 'tbl_df', 'tbl' and 'data.frame':    5 obs. of  2 variables: #>  $ patient         : chr  \"NDAR_INV0567T2Y9\" \"NDAR_INV0GLZNC2W\" \"NDAR_INV0IZ157F8\" \"NDAR_INV0J4PYA5F\" ... #>  $ household_income: num  3 NA 1 2 1 abcd_h_income[1:5, ] #>            patient household_income #> 1 NDAR_INV0567T2Y9                3 #> 2 NDAR_INV0GLZNC2W               NA #> 3 NDAR_INV0IZ157F8                1 #> 4 NDAR_INV0J4PYA5F                2 #> 5 NDAR_INV0OYE291Q                1 abcd_data <- list(     abcd_anxiety,     abcd_depress,     abcd_cort_t,     abcd_cort_sa,     abcd_subc_v,     abcd_h_income,     abcd_pubertal )  # The number of rows in each dataframe: lapply(abcd_data, dim) #> [[1]] #> [1] 275   2 #>  #> [[2]] #> [1] 275   2 #>  #> [[3]] #> [1] 188 152 #>  #> [[4]] #> [1] 188 152 #>  #> [[5]] #> [1] 174  31 #>  #> [[6]] #> [1] 275   2 #>  #> [[7]] #> [1] 275   2 # Whether or not each dataframe has missing values: lapply(abcd_data,     function(x) {         any(is.na(x))     } ) #> [[1]] #> [1] TRUE #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] FALSE #>  #> [[4]] #> [1] FALSE #>  #> [[5]] #> [1] FALSE #>  #> [[6]] #> [1] TRUE #>  #> [[7]] #> [1] TRUE abcd_merged_df <- merge_df_list(abcd_data, uid = \"patient\", no_na = TRUE)  common_patients <- abcd_merged_df$\"patient\"  print(length(common_patients)) #> [1] 87 # Reducing dataframes to only common subjects with no missing data abcd_anxiety <- abcd_anxiety[abcd_anxiety$\"patient\" %in% common_patients, ] abcd_depress <- abcd_depress[abcd_depress$\"patient\" %in% common_patients, ] abcd_cort_t <- abcd_cort_t[abcd_cort_t$\"patient\" %in% common_patients, ] abcd_cort_sa <- abcd_cort_sa[abcd_cort_sa$\"patient\" %in% common_patients, ] abcd_subc_v <- abcd_subc_v[abcd_subc_v$\"patient\" %in% common_patients, ] abcd_h_income <- abcd_h_income[abcd_h_income$\"patient\" %in% common_patients, ] abcd_pubertal <- abcd_pubertal[abcd_pubertal$\"patient\" %in% common_patients, ]"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"generating-the-data-list","dir":"Articles","previous_headings":"1. Setting up the data","what":"Generating the data list","title":"A Complete Example","text":"data_list structure structured list dataframes (like one already created), additional metadata dataframe. contain input dataframes want directly use inputs clustering. data available us, may working context anxiety depression data especially important patient outcomes, want know can find subtypes using rest data still good job separating patients anxiety depression scores. ’ll start creating data list stores input variables. process removes patients complete data across provided input dataframes. ’d like keep track information, can set “return_missing” parameter TRUE receive list containing data_list well removed patients. structure data list nested list tracking data, name dataframe, domain (broader source information) data belongs , type variable stored dataframe. Options variable type include “continuous”, “discrete”, “ordinal”, “categorical”. “uid” parameter name column dataframes uniquely identifies patient. Upon data list creation, UID converted “subjectkey” consistency across functions package. can get summary constructed data_list summarize_dl function: input dataframe now 87 subjects complete data. width refers number columns dataframe, equals 1 UID (subjectkey) column + number features dataframe. data_list now stores variables intend using clustering. ’re interested knowing clustering solutions generate can distinguish children apart based anxiety depression scores. , ’ll also create data list storing variables ’ll use evaluating cluster solutions clustering . ’ll refer “target_list”. Note necessary make use partition input --model measures way. ’d like target list instead use every single variable interest clustering, can stick just using one data list.","code":"# Note that you do not need to explicitly name every single named element # (data = ..., name = ..., etc.) data_list <- generate_data_list(     list(         data = abcd_cort_t,         name = \"cortical_thickness\",         domain = \"neuroimaging\",         type = \"continuous\"     ),     list(         data = abcd_cort_sa,         name = \"cortical_surface_area\",         domain = \"neuroimaging\",         type = \"continuous\"     ),     list(         data = abcd_subc_v,         name = \"subcortical_volume\",         domain = \"neuroimaging\",         type = \"continuous\"     ),     list(         data = abcd_h_income,         name = \"household_income\",         domain = \"demographics\",         type = \"continuous\"     ),     list(         data = abcd_pubertal,         name = \"pubertal_status\",         domain = \"demographics\",         type = \"continuous\"     ),     uid = \"patient\" ) summarize_dl(data_list) #>                    name       type       domain length width #> 1    cortical_thickness continuous neuroimaging     87   152 #> 2 cortical_surface_area continuous neuroimaging     87   152 #> 3    subcortical_volume continuous neuroimaging     87    31 #> 4      household_income continuous demographics     87     2 #> 5       pubertal_status continuous demographics     87     2 target_list <- generate_data_list(     list(abcd_anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(abcd_depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"patient\" )  summarize_dl(target_list) #>        name    type    domain length width #> 1   anxiety ordinal behaviour     87     2 #> 2 depressed ordinal behaviour     87     2"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"building-a-space-of-settings-to-cluster-over","dir":"Articles","previous_headings":"","what":"2. Building a space of settings to cluster over","title":"A Complete Example","text":"settings_matrix stores information settings ’d like use SNF runs. Calling generate_settings_matrix function specified number rows automatically build randomly populated settings_matrix. columns : row_id: Integer keep track row alpha - hyperparameter SNF (variable influences subtyping process) k - hyperparameter SNF t - hyperparameter SNF snf_scheme - specific way input data gets collapsed final fused network (discussed SNF schemes vignette) clust_alg - clustering algorithm applied final fused network produced SNF *_dist - distance metric used different types data (discussed distance metrics vignette) inc_* - binary columns indicating whether input dataframe included (1) excluded (0) corresponding SNF run (discussed settings matrix vignette) Without specifying additional parameters, generate_settings_matrix randomly populates columns ensures generated rows identical. ’s important now matrix (technically dataframe R environment) contains several rows outline different reasonable way raw data converted patient subtypes. customization settings_matrix enable access broadest possible space reasonable cluster solutions data can produce using SNF ideally get closer generalizable useful solution context. settings_matrix customization can found settings matrix vignette. Setting optional seed parameter (affect seed entire R session) ensures settings matrix generated time run code. end random set settings , nothing wrong manually altering settings matrix suit needs. example, wanted know much difference one input dataframe made, ensure half rows included input dataframe half didn’t. can also add random rows already existing dataframe using add_settings_matrix_rows function (discussed vignette).","code":"settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     min_k = 20,     max_k = 50,     seed = 42 ) #> [1] \"The global seed has been changed!\" settings_matrix[1:5, ] #>   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist #> 1      1   0.5 29 20          2         1         1         1        1        1 #> 2      2   0.4 26 20          1         1         1         1        1        1 #> 3      3   0.3 44 20          2         2         1         1        1        1 #> 4      4   0.3 43 20          1         1         1         1        1        1 #> 5      5   0.5 29 20          2         2         1         1        1        1 #>   mix_dist inc_cortical_thickness inc_cortical_surface_area #> 1        1                      1                         0 #> 2        1                      1                         1 #> 3        1                      1                         0 #> 4        1                      1                         1 #> 5        1                      1                         1 #>   inc_subcortical_volume inc_household_income inc_pubertal_status #> 1                      1                    0                   1 #> 2                      1                    1                   1 #> 3                      0                    1                   1 #> 4                      0                    1                   1 #> 5                      1                    1                   1"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"running-snf","dir":"Articles","previous_headings":"","what":"3. Running SNF","title":"A Complete Example","text":"batch_snf function integrates data data_list using sets settings contained settings_matrix. resulting structure solutions_matrix extension settings_matrix contains columns specifying cluster subject assigned corresponding settings_matrix row. goes like time. Just like , 20 different cluster solutions generated! practice, may end wanting create hundreds thousands cluster solutions time. access multi-core system, batch_snf can run parallel processing enabled. See ?batch_snf parallel processing vignette information. can pull clustering results row using get_cluster_solutions function:","code":"solutions_matrix <- batch_snf(data_list, settings_matrix) #> [1] \"Row: 1/20 | Time remaining: 3 seconds\" #> [1] \"Row: 2/20 | Time remaining: 4 seconds\" #> [1] \"Row: 3/20 | Time remaining: 3 seconds\" #> [1] \"Row: 4/20 | Time remaining: 3 seconds\" #> [1] \"Row: 5/20 | Time remaining: 3 seconds\" #> [1] \"Row: 6/20 | Time remaining: 3 seconds\" #> [1] \"Row: 7/20 | Time remaining: 2 seconds\" #> [1] \"Row: 8/20 | Time remaining: 2 seconds\" #> [1] \"Row: 9/20 | Time remaining: 2 seconds\" #> [1] \"Row: 10/20 | Time remaining: 2 seconds\" #> [1] \"Row: 11/20 | Time remaining: 2 seconds\" #> [1] \"Row: 12/20 | Time remaining: 1 seconds\" #> [1] \"Row: 13/20 | Time remaining: 1 seconds\" #> [1] \"Row: 14/20 | Time remaining: 1 seconds\" #> [1] \"Row: 15/20 | Time remaining: 1 seconds\" #> [1] \"Row: 16/20 | Time remaining: 1 seconds\" #> [1] \"Row: 17/20 | Time remaining: 1 seconds\" #> [1] \"Row: 18/20 | Time remaining: 0 seconds\" #> [1] \"Row: 19/20 | Time remaining: 0 seconds\" #> [1] \"Row: 20/20 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 4 seconds.\" colnames(solutions_matrix)[1:30] #>  [1] \"row_id\"                    \"alpha\"                     #>  [3] \"k\"                         \"t\"                         #>  [5] \"snf_scheme\"                \"clust_alg\"                 #>  [7] \"cont_dist\"                 \"disc_dist\"                 #>  [9] \"ord_dist\"                  \"cat_dist\"                  #> [11] \"mix_dist\"                  \"inc_cortical_thickness\"    #> [13] \"inc_cortical_surface_area\" \"inc_subcortical_volume\"    #> [15] \"inc_household_income\"      \"inc_pubertal_status\"       #> [17] \"nclust\"                    \"subject_NDAR_INV0567T2Y9\"  #> [19] \"subject_NDAR_INV0J4PYA5F\"  \"subject_NDAR_INV10OMKVLE\"  #> [21] \"subject_NDAR_INV15FPCW4O\"  \"subject_NDAR_INV19NB4RJK\"  #> [23] \"subject_NDAR_INV1HLGR738\"  \"subject_NDAR_INV1KR0EZFU\"  #> [25] \"subject_NDAR_INV1L3Y9EOP\"  \"subject_NDAR_INV1TCP5GNM\"  #> [27] \"subject_NDAR_INV1ZHRDJ6B\"  \"subject_NDAR_INV2EJ41YSZ\"  #> [29] \"subject_NDAR_INV2PK6C85M\"  \"subject_NDAR_INV2XO1PHCT\" cluster_solutions <- get_cluster_solutions(solutions_matrix)  head(cluster_solutions) #>                 subjectkey 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #> 1 subject_NDAR_INV0567T2Y9 5 3 1 1 1 1 1 3 3  2  6  1  1  3  2  1  1  1  1  1 #> 2 subject_NDAR_INV0J4PYA5F 2 3 7 2 6 2 4 4 3  4  5  7  2  3  2  4  2  7  2  3 #> 3 subject_NDAR_INV10OMKVLE 1 2 3 1 4 2 3 1 2  2  7  2  2  2  1  1  3  4  2  2 #> 4 subject_NDAR_INV15FPCW4O 1 2 5 2 5 2 3 1 2  3  7  5  2  2  1  1  2  5  2  3 #> 5 subject_NDAR_INV19NB4RJK 4 2 9 1 7 2 3 2 2  3  8  6  2  2  1  6  3  2  2  2 #> 6 subject_NDAR_INV1HLGR738 4 2 9 1 7 2 3 2 2  1  8  6  2  2  1  6  3  2  2  2"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"identifying-and-visualizing-meta-clusters","dir":"Articles","previous_headings":"","what":"4. Identifying and visualizing meta clusters","title":"A Complete Example","text":"Now access 20 different clustering solutions, ’ll need find way pick optimal one move forward additional characterization. case, plotting running stats manually solutions might reasonable way determine ones like . number solutions generated goes hundreds (thousands), ’re going need automated approaches. main approach recommend using meta clustering approach described Caruana et al., 2016. Meta clustering good approach use criterion makes one cluster solution better another hard formalize quantitatively (hence, hard fully automate). idea cluster clustering solutions arrive manageable number qualitatively similar meta clusters. , characterization representative solutions meta cluster can done efficiently identify top choice. first step calculate adjusted Rand index (ARI) pair cluster solutions. metric tells us similar solutions , thereby allowing us find clusters cluster solutions. can visualize resulting inter-cluster similarities heatmap. First, call get_matrix_order get hierarchical clustering-based ordering rows adjusted rand indices. order can passed adjusted_rand_index_heatmap function get clearer view existing meta clusters. clustering solutions along rows columns figure, cells intersection two solutions show similar (big ARI) solutions . diagonals always red, representing maximum value 1, show similarity clustering solution . Complete-linkage, Euclidean-distance based hierarchical clustering applied solutions obtain row ordering. also default approach used ComplexHeatmap package, backbone heatmap functions metaSNF. heatmap integral understanding meta clusters exist data (given space parameters explored settings matrix). later see customize heatmap add rich information plotted cluster solution differs various measures quality, different clustering settings, different levels separation input --model measures. First, ’ll divide heatmap meta clusters visual inspection. indices meta cluster boundaries can passed adjusted_rand_index_heatmap function split_vector parameter. can determine vector trial error using shiny_annotator function (wrapper around functionality InteractiveComplexHeatmap package). demonstration shiny app can seen : Meta Cluster Identification Note shiny app running, R console unresponsive. Clicking cell boundaries tracking row/column indices (printed R console well displayed app) can get us results looking something like : point, meta clusters yet sure differ terms structure across input --model variables. start running extend_solutions function, calculate p-values representing strength association cluster membership (treated categorical variable) feature present provided data list /target_list. extend_solutions also adds summary p-value measures (min, mean, max) features present target list. Functionally, difference data_list target_list arguments target_list features also part summary measures. summary p-value measures can suppressed setting calculate_summaries = FALSE. extended_solutions_matrix created can passed adjusted_rand_index_heatmap function easily visualize level separation variables cluster solutions. adjusted_rand_index_heatmap function wraps around generic similarity_matrix_heatmap function package, wrapper around ComplexHeatmap::Heatmap(). Consequently, anything can done ComplexHeatmap package can done . also makes documentation ComplexHeatmap package one best places learn can done heatmaps. data annotations don’t necessarily need come functions metaSNF either. wanted , example, highlight solutions two specific patients happened cluster together, easily add another annotation: Now ’ve visually delineated meta clusters, can get quick summary sort separation exists across input held variables taking closer look one representative cluster solution meta cluster. can achieved get_representative_solutions function, extracts one cluster solution per meta cluster based highest average ARI solutions meta cluster. neg_log_pval_thresh sets threshold negative log p-values displayed. value 5, p-value smaller 1e-5 truncated 1e-5. Note Manhattan plot automatically uses vertical line separate features data_list argument target_list. Vertical boundaries can controlled xints parameter. plot bit unwieldy plot given many neuroimaging ROIs present. Let’s take cortical thickness surface area measures make plot little clearer. ’ll also able read variable measures clearly dial number features plotted back bit, well. see something interesting heatmap, may curious know corresponds settings settings matrix. certainly stack setting ARI heatmap annotations, may bit cumbersome given many settings . Another option start taking first look entire settings_matrix, sorted meta cluster results, settings_matrix_heatmap function. heatmap rescales columns settings_matrix maximum value 1. purpose re-ordering settings matrix way see associations exist certain settings values pairwise cluster solution similarities. heatmap can show settings values associated particular type clustering result. particular important settings, can simply add adjusted rand index heatmap annotations. Recall solutions_matrix (, extension, extended_solutions_matrix) extension settings matrix, data manipulation needed add setting variable heatmap annotation. Give try code :","code":"solutions_matrix_aris <- calc_aris(solutions_matrix) #> 52.63158% completed... #> Done. meta_cluster_order <- get_matrix_order(solutions_matrix_aris)  # Just a vector of numbers meta_cluster_order #>  [1] 10 19  6 13  3 18  5 12  7 17 20  4 15  9  2 14  1  8 11 16 ari_hm <- adjusted_rand_index_heatmap(     solutions_matrix_aris,     order = meta_cluster_order )  save_heatmap(     heatmap = ari_hm,     path = \"./adjusted_rand_index_heatmap.png\",     width = 550,     height = 500,     res = 100 ) shiny_annotator(ari_hm) split_vec <- c(2, 5, 12, 17)  ari_mc_hm <- adjusted_rand_index_heatmap(     solutions_matrix_aris,     order = meta_cluster_order,     split_vector = split_vec )  save_heatmap(     heatmap = ari_mc_hm,     path = \"./ari_mc_hm.png\",     width = 550,     height = 500,     res = 100 ) # Only looking at our out-of-model p-values extended_solutions_matrix <- extend_solutions(     solutions_matrix,     target_list = target_list ) #> [1] \"Processing row 1 of 20\" #> [1] \"Processing row 2 of 20\" #> [1] \"Processing row 3 of 20\" #> [1] \"Processing row 4 of 20\" #> [1] \"Processing row 5 of 20\" #> [1] \"Processing row 6 of 20\" #> [1] \"Processing row 7 of 20\" #> [1] \"Processing row 8 of 20\" #> [1] \"Processing row 9 of 20\" #> [1] \"Processing row 10 of 20\" #> [1] \"Processing row 11 of 20\" #> [1] \"Processing row 12 of 20\" #> [1] \"Processing row 13 of 20\" #> [1] \"Processing row 14 of 20\" #> [1] \"Processing row 15 of 20\" #> [1] \"Processing row 16 of 20\" #> [1] \"Processing row 17 of 20\" #> [1] \"Processing row 18 of 20\" #> [1] \"Processing row 19 of 20\" #> [1] \"Processing row 20 of 20\" # What columns have been added? old_cols <- colnames(extended_solutions_matrix) %in% colnames(solutions_matrix) new_cols <- !old_cols  head(extended_solutions_matrix[, new_cols]) #>   cbcl_anxiety_r_pval cbcl_depress_r_pval  min_pval mean_pval  max_pval #> 1           0.7344315           0.7263495 0.7263495 0.7303905 0.7344315 #> 2           0.6644469           0.3238038 0.3238038 0.4941253 0.6644469 #> 3           0.3961268           0.6817113 0.3961268 0.5389191 0.6817113 #> 4           0.4843825           0.7564136 0.4843825 0.6203981 0.7564136 #> 5           0.2256718           0.7895325 0.2256718 0.5076021 0.7895325 #> 6           0.2566391           0.1324778 0.1324778 0.1945585 0.2566391 # Re-running to calculate the p-value for every single input and out-of-model # feature: extended_solutions_matrix <- extend_solutions(     solutions_matrix,     data_list = data_list,     target_list = target_list ) #> [1] \"Processing row 1 of 20\" #> [1] \"Processing row 2 of 20\" #> [1] \"Processing row 3 of 20\" #> [1] \"Processing row 4 of 20\" #> [1] \"Processing row 5 of 20\" #> [1] \"Processing row 6 of 20\" #> [1] \"Processing row 7 of 20\" #> [1] \"Processing row 8 of 20\" #> [1] \"Processing row 9 of 20\" #> [1] \"Processing row 10 of 20\" #> [1] \"Processing row 11 of 20\" #> [1] \"Processing row 12 of 20\" #> [1] \"Processing row 13 of 20\" #> [1] \"Processing row 14 of 20\" #> [1] \"Processing row 15 of 20\" #> [1] \"Processing row 16 of 20\" #> [1] \"Processing row 17 of 20\" #> [1] \"Processing row 18 of 20\" #> [1] \"Processing row 19 of 20\" #> [1] \"Processing row 20 of 20\" # Also would work, but without any summary p-values extended_solutions_matrix <- extend_solutions(     solutions_matrix,     data_list = c(data_list, target_list) )  # Also would work, but now every feature would be part of the summaries extended_solutions_matrix <- extend_solutions(     solutions_matrix,     target_list = c(data_list, target_list) ) annotated_ari_hm <- adjusted_rand_index_heatmap(     solutions_matrix_aris,     order = meta_cluster_order,     split_vector = split_vec,     data = extended_solutions_matrix,     top_hm = list(         \"Depression p-value\" = \"cbcl_depress_r_pval\",         \"Anxiety p-value\" = \"cbcl_anxiety_r_pval\",         \"Overall outcomes p-value\" = \"mean_pval\"     ),     bottom_bar = list(         \"Number of Clusters\" = \"nclust\"     ),     annotation_colours = list(         \"Depression p-value\" = colour_scale(             extended_solutions_matrix$\"cbcl_depress_r_pval\",             min_colour = \"purple\",             max_colour = \"black\"         ),         \"Anxiety p-value\" = colour_scale(             extended_solutions_matrix$\"cbcl_anxiety_r_pval\",             min_colour = \"green\",             max_colour = \"black\"         ),         \"Overall outcomes p-value\" = colour_scale(             extended_solutions_matrix$\"mean_pval\",             min_colour = \"lightblue\",             max_colour = \"black\"         )     ) )  save_heatmap(     heatmap = annotated_ari_hm,     path = \"./annotated_ari_hm.png\",     width = 700,     height = 500,     res = 100 ) extended_solutions_matrix2 <- extended_solutions_matrix |>     dplyr::mutate(         key_patients_cluster_together = dplyr::case_when(             subject_NDAR_INVLF3TNDUZ == subject_NDAR_INVLDQH8ATK ~ TRUE,             TRUE ~ FALSE         )     )  annotated_ari_hm2 <- adjusted_rand_index_heatmap(     solutions_matrix_aris,     order = meta_cluster_order,     split_vector = split_vec,     data = extended_solutions_matrix2,     top_hm = list(         \"Depression p-value\" = \"cbcl_depress_r_pval\",         \"Anxiety p-value\" = \"cbcl_anxiety_r_pval\",         \"Key Patients Clustered Together\" = \"key_patients_cluster_together\"     ),     bottom_bar = list(         \"Number of Clusters\" = \"nclust\"     ),     annotation_colours = list(         \"Depression p-value\" = colour_scale(             extended_solutions_matrix$\"cbcl_depress_r_pval\",             min_colour = \"purple\",             max_colour = \"black\"         ),         \"Anxiety p-value\" = colour_scale(             extended_solutions_matrix$\"cbcl_anxiety_r_pval\",             min_colour = \"purple\",             max_colour = \"black\"         ),         \"Key Patients Clustered Together\" = c(             \"TRUE\" = \"blue\",             \"FALSE\" = \"black\"         )     ) )  save_heatmap(     heatmap = annotated_ari_hm2,     path = \"./annotated_ari_hm2.png\",     width = 700,     height = 500,     res = 100 ) rep_solutions <- get_representative_solutions(     solutions_matrix_aris,     split_vector = split_vec,     order = meta_cluster_order,     extended_solutions_matrix )  mc_manhattan <- mc_manhattan_plot(     rep_solutions,     data_list = data_list,     target_list = target_list,     hide_x_labels = TRUE,     point_size = 2,     text_size = 12,     threshold = 0.05,     neg_log_pval_thresh = 5 )  ggsave(     \"mc_manhattan.png\",     mc_manhattan,     height = 6,     width = 12 ) rep_solutions_no_cort <- dplyr::select(     rep_solutions,     -dplyr::contains(\"mrisdp\") )  mc_manhattan2 <- mc_manhattan_plot(     rep_solutions_no_cort,     data_list = data_list,     target_list = target_list,     point_size = 4,     threshold = 0.01,     text_size = 12,     domain_colours = c(         \"neuroimaging\" = \"cadetblue\",         \"demographics\" = \"purple\",         \"behaviour\" = \"firebrick\"     ) ) mc_manhattan2  ggsave(     \"mc_manhattan2.png\",     mc_manhattan2,     height = 8,     width = 12 ) sm_hm <- settings_matrix_heatmap(     settings_matrix,     order = meta_cluster_order )  save_heatmap(     heatmap = sm_hm,     path = \"./settings_matrix_heatmap_ordered.png\",     width = 400,     height = 500,     res = 75 ) annotated_ari_hm3 <- adjusted_rand_index_heatmap(     solutions_matrix_aris,     order = meta_cluster_order,     split_vector = c(11, 14),     data = extended_solutions_matrix,     top_hm = list(         \"Depression p-value\" = \"cbcl_depress_r_pval\",         \"Anxiety p-value\" = \"cbcl_anxiety_r_pval\",         \"Key Patients Clustered Together\" = \"key_patients_cluster_together\"     ),     left_hm = list(         \"Clustering Algorithm\" = \"clust_alg\" # from the original settings     ),     bottom_bar = list(         \"Number of Clusters\" = \"nclust\" # also from the original settings     ),     annotation_colours = list(         \"Depression p-value\" = colour_scale(             extended_solutions_matrix$\"cbcl_depress_r_pval\",             min_colour = \"purple\",             max_colour = \"black\"         ),         \"Anxiety p-value\" = colour_scale(             extended_solutions_matrix$\"cbcl_anxiety_r_pval\",             min_colour = \"purple\",             max_colour = \"black\"         ),         \"Key Patients Clustered Together\" = c(             \"TRUE\" = \"blue\",             \"FALSE\" = \"black\"         )     ) )"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"quality-measures","dir":"Articles","previous_headings":"4. Identifying and visualizing meta clusters","what":"2. Quality measures","title":"A Complete Example","text":"Quality metrics another useful heuristic goodness cluster don’t require contextualization results domain may used . metaSNF enables measures silhouette scores, Dunn indices, Davies-Bouldin indices. calculate values, ’ll need cluster results also final fused network (similarity matrices produced SNF) clusters came . similarity matrices can collected batch_snf using return_similarity_matrices parameter: time, output batch_snf list. first element list single solutions_matrix, like usually get. second element yet another list containing one final fused network (AKA similarity matrix / similarity matrix) per SNF run. Using two lists, can calculate mentioned quality metrics: first function wrapper around cluster::silhouette second third come clv package. clv isn’t set mandatory part installation, ’ll ned install calculate two metrics. original documentation functions can helpful interpreting working : cluster::silhouette documentation clv::clv.Dunn documentation clv::clv.Davies.Bouldin documentation","code":"batch_snf_results <- batch_snf(     data_list,     settings_matrix,     return_similarity_matrices = TRUE ) #> [1] \"Row: 1/20 | Time remaining: 3 seconds\" #> [1] \"Row: 2/20 | Time remaining: 4 seconds\" #> [1] \"Row: 3/20 | Time remaining: 3 seconds\" #> [1] \"Row: 4/20 | Time remaining: 3 seconds\" #> [1] \"Row: 5/20 | Time remaining: 3 seconds\" #> [1] \"Row: 6/20 | Time remaining: 2 seconds\" #> [1] \"Row: 7/20 | Time remaining: 2 seconds\" #> [1] \"Row: 8/20 | Time remaining: 2 seconds\" #> [1] \"Row: 9/20 | Time remaining: 2 seconds\" #> [1] \"Row: 10/20 | Time remaining: 2 seconds\" #> [1] \"Row: 11/20 | Time remaining: 2 seconds\" #> [1] \"Row: 12/20 | Time remaining: 1 seconds\" #> [1] \"Row: 13/20 | Time remaining: 1 seconds\" #> [1] \"Row: 14/20 | Time remaining: 1 seconds\" #> [1] \"Row: 15/20 | Time remaining: 1 seconds\" #> [1] \"Row: 16/20 | Time remaining: 1 seconds\" #> [1] \"Row: 17/20 | Time remaining: 1 seconds\" #> [1] \"Row: 18/20 | Time remaining: 0 seconds\" #> [1] \"Row: 19/20 | Time remaining: 0 seconds\" #> [1] \"Row: 20/20 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 4 seconds.\" solutions_matrix <- batch_snf_results$\"solutions_matrix\" similarity_matrices <- batch_snf_results$\"similarity_matrices\" silhouette_scores <- calculate_silhouettes(     solutions_matrix,     similarity_matrices )  dunn_indices <- calculate_dunn_indices(     solutions_matrix,     similarity_matrices )  db_indices <- calculate_db_indices(     solutions_matrix,     similarity_matrices )"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"stability-measures","dir":"Articles","previous_headings":"4. Identifying and visualizing meta clusters","what":"3. Stability measures","title":"A Complete Example","text":"metaSNF offers tools evaluate two different measures stability: Pairwise adjusted Rand indices (across resamplings clustering, average, similar every pair solutions according adjusted Rand index?) Fraction clustered together (average fraction times patients clustered together full results clustered together resampled results?) calculate either , ’ll need first generate subsamples data_list. data_list_subsamples list now contains 30 smaller subsamples original data_list. stability calculations: warned, second function especially extremely slow. number patients number solutions ’re evaluating grows, functions can get pretty slow. Consider using eliminating solutions certainly interested characterizing.","code":"data_list_subsamples <- subsample_data_list(     data_list,     n_subsamples = 30, # calculate 30 subsamples     subsample_fraction = 0.8 # for each subsample, use random 80% of patients ) pairwise_aris <- subsample_pairwise_aris(     data_list_subsamples,     settings_matrix )  fraction_together <- fraction_clustered_together(     data_list_subsamples,     settings_matrix,     solutions_matrix )"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"evaluating-separation-across-target-variables-of-importance","dir":"Articles","previous_headings":"4. Identifying and visualizing meta clusters","what":"4. Evaluating separation across “target variables” of importance","title":"A Complete Example","text":"can specify metric objective function may tell useful clustering solution purposes advance, makes cluster selection process much less arbitrary. many ways go , package offers one way target_list. target_list contains dataframes can examine clustering results linear regression (continuous data), ordinal regression (ordinal data), Chi-squared test (categorical data). Just like generating initial data_list, need specify name column provided dataframes originally used uniquely identify different observations uid parameter. next extend solutions_matrix p-values regressing target_list features onto generated clusters. just want p-values: heatmap visualizing : p-values hold real meaning traditional hypothesis-testing context, reasonable proxies magnitude effect size / separation clusters across variables question. , just tool find clustering solutions well-separated according outcome measures ’ve specified. Finding cluster solution like similar supervised learning approach, optimization method just random sampling. risk overfitting data approach considerable, make sure rigorous external validation reporting findings. recommend using label propagation (provided SNFtool package groupPredict function) validation: take top clustering solutions found training data, assign predicted clusters held test subjects, characterize test subjects see well clustering solution seemed worked.","code":"extended_solutions_matrix <- extend_solutions(solutions_matrix, target_list) #> [1] \"Processing row 1 of 20\" #> [1] \"Processing row 2 of 20\" #> [1] \"Processing row 3 of 20\" #> [1] \"Processing row 4 of 20\" #> [1] \"Processing row 5 of 20\" #> [1] \"Processing row 6 of 20\" #> [1] \"Processing row 7 of 20\" #> [1] \"Processing row 8 of 20\" #> [1] \"Processing row 9 of 20\" #> [1] \"Processing row 10 of 20\" #> [1] \"Processing row 11 of 20\" #> [1] \"Processing row 12 of 20\" #> [1] \"Processing row 13 of 20\" #> [1] \"Processing row 14 of 20\" #> [1] \"Processing row 15 of 20\" #> [1] \"Processing row 16 of 20\" #> [1] \"Processing row 17 of 20\" #> [1] \"Processing row 18 of 20\" #> [1] \"Processing row 19 of 20\" #> [1] \"Processing row 20 of 20\" colnames(extended_solutions_matrix)[1:25] #>  [1] \"row_id\"                    \"alpha\"                     #>  [3] \"k\"                         \"t\"                         #>  [5] \"snf_scheme\"                \"clust_alg\"                 #>  [7] \"cont_dist\"                 \"disc_dist\"                 #>  [9] \"ord_dist\"                  \"cat_dist\"                  #> [11] \"mix_dist\"                  \"inc_cortical_thickness\"    #> [13] \"inc_cortical_surface_area\" \"inc_subcortical_volume\"    #> [15] \"inc_household_income\"      \"inc_pubertal_status\"       #> [17] \"nclust\"                    \"subject_NDAR_INV0567T2Y9\"  #> [19] \"subject_NDAR_INV0J4PYA5F\"  \"subject_NDAR_INV10OMKVLE\"  #> [21] \"subject_NDAR_INV15FPCW4O\"  \"subject_NDAR_INV19NB4RJK\"  #> [23] \"subject_NDAR_INV1HLGR738\"  \"subject_NDAR_INV1KR0EZFU\"  #> [25] \"subject_NDAR_INV1L3Y9EOP\" # Looking at the newly added columns head(no_subs(extended_solutions_matrix)) #>   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist #> 1      1   0.5 29 20          2         1         1         1        1        1 #> 2      2   0.4 26 20          1         1         1         1        1        1 #> 3      3   0.3 44 20          2         2         1         1        1        1 #> 4      4   0.3 43 20          1         1         1         1        1        1 #> 5      5   0.5 29 20          2         2         1         1        1        1 #> 6      6   0.4 26 20          2         1         1         1        1        1 #>   mix_dist inc_cortical_thickness inc_cortical_surface_area #> 1        1                      1                         0 #> 2        1                      1                         1 #> 3        1                      1                         0 #> 4        1                      1                         1 #> 5        1                      1                         1 #> 6        1                      1                         1 #>   inc_subcortical_volume inc_household_income inc_pubertal_status nclust #> 1                      1                    0                   1      5 #> 2                      1                    1                   1      3 #> 3                      0                    1                   1      9 #> 4                      0                    1                   1      2 #> 5                      1                    1                   1      8 #> 6                      1                    1                   1      2 #>   cbcl_anxiety_r_pval cbcl_depress_r_pval  min_pval mean_pval  max_pval #> 1           0.7344315           0.7263495 0.7263495 0.7303905 0.7344315 #> 2           0.6644469           0.3238038 0.3238038 0.4941253 0.6644469 #> 3           0.3961268           0.6817113 0.3961268 0.5389191 0.6817113 #> 4           0.4843825           0.7564136 0.4843825 0.6203981 0.7564136 #> 5           0.2256718           0.7895325 0.2256718 0.5076021 0.7895325 #> 6           0.2566391           0.1324778 0.1324778 0.1945585 0.2566391 target_pvals <- get_pvals(extended_solutions_matrix)  head(target_pvals) #>   row_id cbcl_anxiety_r_pval cbcl_depress_r_pval  min_pval mean_pval  max_pval #> 1      1           0.7344315           0.7263495 0.7263495 0.7303905 0.7344315 #> 2      2           0.6644469           0.3238038 0.3238038 0.4941253 0.6644469 #> 3      3           0.3961268           0.6817113 0.3961268 0.5389191 0.6817113 #> 4      4           0.4843825           0.7564136 0.4843825 0.6203981 0.7564136 #> 5      5           0.2256718           0.7895325 0.2256718 0.5076021 0.7895325 #> 6      6           0.2566391           0.1324778 0.1324778 0.1945585 0.2566391 pval_hm <- pval_heatmap(target_pvals, order = meta_cluster_order)  save_heatmap(     heatmap = pval_hm,     path = \"./pval_heatmap_ordered.png\",     width = 400,     height = 500,     res = 100 )"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"validating-results-with-label-propagation","dir":"Articles","previous_headings":"","what":"Validating results with label propagation","title":"A Complete Example","text":"’s quick step complete procedure, beginning, label propagation validate findings. metasnf package comes equipped function training/testing split :) , wanted, see clustering solutions propagate test set, mean reusing test set removing protection overfitting conferred procedure. ’s ! questions, comments, suggestions, bugs, etc. feel free post issue https://github.com/BRANCHlab/metasnf.","code":"# All the subjects present in all dataframes with no NAs all_subjects <- data_list[[1]]$\"data\"$\"subjectkey\"  # Remove the \"subject_\" prefix to allow merges with the original data all_subjects <- gsub(\"subject_\", \"\", all_subjects)  # Dataframe assigning 80% of subjects to train and 20% to test assigned_splits <- train_test_assign(train_frac = 0.8, subjects = all_subjects)  # Pulling the training and testing subjects specifically train_subs <- assigned_splits$\"train\" test_subs <- assigned_splits$\"test\"  # Partition a training set train_abcd_cort_t <- abcd_cort_t[abcd_cort_t$\"patient\" %in% train_subs, ] train_abcd_cort_sa <- abcd_cort_sa[abcd_cort_sa$\"patient\" %in% train_subs, ] train_abcd_subc_v <- abcd_subc_v[abcd_subc_v$\"patient\" %in% train_subs, ] train_abcd_h_income <- abcd_h_income[abcd_h_income$\"patient\" %in% train_subs, ] train_abcd_pubertal <- abcd_pubertal[abcd_pubertal$\"patient\" %in% train_subs, ] train_abcd_anxiety <- abcd_anxiety[abcd_anxiety$\"patient\" %in% train_subs, ] train_abcd_depress <- abcd_depress[abcd_depress$\"patient\" %in% train_subs, ]  # Partition a test set test_abcd_cort_t <- abcd_cort_t[abcd_cort_t$\"patient\" %in% test_subs, ] test_abcd_cort_sa <- abcd_cort_sa[abcd_cort_sa$\"patient\" %in% test_subs, ] test_abcd_subc_v <- abcd_subc_v[abcd_subc_v$\"patient\" %in% test_subs, ] test_abcd_h_income <- abcd_h_income[abcd_h_income$\"patient\" %in% test_subs, ] test_abcd_pubertal <- abcd_pubertal[abcd_pubertal$\"patient\" %in% test_subs, ] test_abcd_anxiety <- abcd_anxiety[abcd_anxiety$\"patient\" %in% test_subs, ] test_abcd_depress <- abcd_depress[abcd_depress$\"patient\" %in% test_subs, ]  # A data list with just training subjects train_data_list <- generate_data_list(     list(train_abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(train_abcd_cort_sa, \"cortical_sa\", \"neuroimaging\", \"continuous\"),     list(train_abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(train_abcd_h_income, \"household_income\", \"demographics\", \"continuous\"),     list(train_abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\" )  # A data list with training and testing subjects full_data_list <- generate_data_list(     list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(abcd_h_income, \"household_income\", \"demographics\", \"continuous\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\" )  # Construct the target lists train_target_list <- generate_data_list(     list(train_abcd_anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(train_abcd_depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"patient\" )  # Find a clustering solution in your training data settings_matrix <- generate_settings_matrix(     train_data_list,     nrow = 5,     seed = 42,     min_k = 10,     max_k = 30 ) #> [1] \"The global seed has been changed!\" train_solutions_matrix <- batch_snf(     train_data_list,     settings_matrix ) #> [1] \"Row: 1/5 | Time remaining: 0 seconds\" #> [1] \"Row: 2/5 | Time remaining: 0 seconds\" #> [1] \"Row: 3/5 | Time remaining: 0 seconds\" #> [1] \"Row: 4/5 | Time remaining: 0 seconds\" #> [1] \"Row: 5/5 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 1 seconds.\" extended_solutions_matrix <- extend_solutions(     train_solutions_matrix,     train_target_list ) #> [1] \"Processing row 1 of 5\" #> [1] \"Processing row 2 of 5\" #> [1] \"Processing row 3 of 5\" #> [1] \"Processing row 4 of 5\" #> [1] \"Processing row 5 of 5\" extended_solutions_matrix |> colnames() #>  [1] \"row_id\"                   \"alpha\"                    #>  [3] \"k\"                        \"t\"                        #>  [5] \"snf_scheme\"               \"clust_alg\"                #>  [7] \"cont_dist\"                \"disc_dist\"                #>  [9] \"ord_dist\"                 \"cat_dist\"                 #> [11] \"mix_dist\"                 \"inc_cortical_thickness\"   #> [13] \"inc_cortical_sa\"          \"inc_subcortical_volume\"   #> [15] \"inc_household_income\"     \"inc_pubertal_status\"      #> [17] \"nclust\"                   \"subject_NDAR_INV0567T2Y9\" #> [19] \"subject_NDAR_INV0J4PYA5F\" \"subject_NDAR_INV10OMKVLE\" #> [21] \"subject_NDAR_INV15FPCW4O\" \"subject_NDAR_INV19NB4RJK\" #> [23] \"subject_NDAR_INV1HLGR738\" \"subject_NDAR_INV1KR0EZFU\" #> [25] \"subject_NDAR_INV1L3Y9EOP\" \"subject_NDAR_INV1ZHRDJ6B\" #> [27] \"subject_NDAR_INV2PK6C85M\" \"subject_NDAR_INV2XO1PHCT\" #> [29] \"subject_NDAR_INV3CU5Y9BZ\" \"subject_NDAR_INV3MBSY16V\" #> [31] \"subject_NDAR_INV3N0QFDLO\" \"subject_NDAR_INV3Y027GVK\" #> [33] \"subject_NDAR_INV40Z7GVYJ\" \"subject_NDAR_INV49UPOXHJ\" #> [35] \"subject_NDAR_INV4N5XGZE8\" \"subject_NDAR_INV4OWRB536\" #> [37] \"subject_NDAR_INV4X80QUZY\" \"subject_NDAR_INV50JL2RXP\" #> [39] \"subject_NDAR_INV5BRNFYQC\" \"subject_NDAR_INV6RVH5KZS\" #> [41] \"subject_NDAR_INV6WBQCY2I\" \"subject_NDAR_INV752EFAQ0\" #> [43] \"subject_NDAR_INV7QO93CJH\" \"subject_NDAR_INV84G9ONXP\" #> [45] \"subject_NDAR_INV8EHP6W1U\" \"subject_NDAR_INV8MJFUKIW\" #> [47] \"subject_NDAR_INV8WGK6ECZ\" \"subject_NDAR_INV94AKNGMJ\" #> [49] \"subject_NDAR_INV9GAZYV8Q\" \"subject_NDAR_INV9IREH05N\" #> [51] \"subject_NDAR_INV9KC3GVMU\" \"subject_NDAR_INV9NFKZ82A\" #> [53] \"subject_NDAR_INV9S1BMDE5\" \"subject_NDAR_INVA68OU0YK\" #> [55] \"subject_NDAR_INVADCYZ38B\" \"subject_NDAR_INVAYM8WTIN\" #> [57] \"subject_NDAR_INVB8O4LAQV\" \"subject_NDAR_INVBAP80W1R\" #> [59] \"subject_NDAR_INVBTRW1NUK\" \"subject_NDAR_INVCIXE0496\" #> [61] \"subject_NDAR_INVCYBSZD0N\" \"subject_NDAR_INVD37Z9N61\" #> [63] \"subject_NDAR_INVD61ZUBC7\" \"subject_NDAR_INVEQ1OBNSM\" #> [65] \"subject_NDAR_INVEVBDLSTM\" \"subject_NDAR_INVEY0FMJDI\" #> [67] \"subject_NDAR_INVFLU0YINE\" \"subject_NDAR_INVFNZPWMSI\" #> [69] \"subject_NDAR_INVFY76P8AJ\" \"subject_NDAR_INVG3T0PXW6\" #> [71] \"subject_NDAR_INVG8BRLSO9\" \"subject_NDAR_INVH1KV76BQ\" #> [73] \"subject_NDAR_INVH3P4T8C2\" \"subject_NDAR_INVH4FZC2XB\" #> [75] \"subject_NDAR_INVH8QN7WLT\" \"subject_NDAR_INVHERPS382\" #> [77] \"subject_NDAR_INVHM3XS68O\" \"subject_NDAR_INVI1RKT9MX\" #> [79] \"subject_NDAR_INVIZFV08RU\" \"subject_NDAR_INVJ574KX6A\" #> [81] \"subject_NDAR_INVK3FL5CP2\" \"subject_NDAR_INVKB0CYO1H\" #> [83] \"subject_NDAR_INVKHWS26UN\" \"subject_NDAR_INVKTUMPLXY\" #> [85] \"subject_NDAR_INVL4NIUZYF\" \"subject_NDAR_INVLF3TNDUZ\" #> [87] \"subject_NDAR_INVLI58ERQC\" \"subject_NDAR_INVLIQRM8KC\" #> [89] \"subject_NDAR_INVLXDP1SWT\" \"subject_NDAR_INVMBOZVEA4\" #> [91] \"subject_NDAR_INVMIWOSHJN\" \"cbcl_anxiety_r_pval\"      #> [93] \"cbcl_depress_r_pval\"      \"min_pval\"                 #> [95] \"mean_pval\"                \"max_pval\" # The fifth row had the lowest minimum p-value across our outcomes lowest_min_pval <- min(extended_solutions_matrix$\"min_pval\") which(extended_solutions_matrix$\"min_pval\" == lowest_min_pval) #> [1] 1 # Keep track of your top solution top_row <- extended_solutions_matrix[4, ]  # Use the solutions matrix from the training subjects and the data list from # the training and testing subjects to propagate labels to the test subjects propagated_labels <- lp_solutions_matrix(top_row, full_data_list) #> [1] \"Processing row 1 of 1...\" head(propagated_labels) #>                 subjectkey group 4 #> 1 subject_NDAR_INV0567T2Y9 train 1 #> 2 subject_NDAR_INV0J4PYA5F train 1 #> 3 subject_NDAR_INV10OMKVLE train 2 #> 4 subject_NDAR_INV15FPCW4O train 1 #> 5 subject_NDAR_INV19NB4RJK train 2 #> 6 subject_NDAR_INV1HLGR738 train 1 tail(propagated_labels) #>                  subjectkey group 4 #> 82 subject_NDAR_INVG5CI7XK4  test 1 #> 83 subject_NDAR_INVGDBYXWV4  test 1 #> 84 subject_NDAR_INVHEUWA52I  test 2 #> 85 subject_NDAR_INVK9ULDQA2  test 1 #> 86 subject_NDAR_INVKYH529RD  test 1 #> 87 subject_NDAR_INVLDQH8ATK  test 2 propagated_labels_all <- lp_solutions_matrix(     extended_solutions_matrix,     full_data_list ) #> [1] \"Processing row 1 of 5...\" #> [1] \"Processing row 2 of 5...\" #> [1] \"Processing row 3 of 5...\" #> [1] \"Processing row 4 of 5...\" #> [1] \"Processing row 5 of 5...\" head(propagated_labels_all) #>                 subjectkey group 1 2 3 4  5 #> 1 subject_NDAR_INV0567T2Y9 train 1 1 5 1 10 #> 2 subject_NDAR_INV0J4PYA5F train 2 1 5 1  3 #> 3 subject_NDAR_INV10OMKVLE train 1 1 3 2  5 #> 4 subject_NDAR_INV15FPCW4O train 1 1 4 1  4 #> 5 subject_NDAR_INV19NB4RJK train 1 1 8 2  9 #> 6 subject_NDAR_INV1HLGR738 train 1 2 8 1  9 tail(propagated_labels_all) #>                  subjectkey group 1 2 3 4 5 #> 82 subject_NDAR_INVG5CI7XK4  test 1 1 2 1 2 #> 83 subject_NDAR_INVGDBYXWV4  test 1 1 4 1 4 #> 84 subject_NDAR_INVHEUWA52I  test 2 1 1 2 1 #> 85 subject_NDAR_INVK9ULDQA2  test 1 1 1 1 1 #> 86 subject_NDAR_INVKYH529RD  test 1 1 7 1 7 #> 87 subject_NDAR_INVLDQH8ATK  test 1 1 6 2 8"},{"path":"https://branchlab.github.io/metasnf/articles/a_complete_example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"A Complete Example","text":"Caruana, Rich, Mohamed Elhawary, Nam Nguyen, Casey Smith. 2006. “Meta Clustering.” Sixth International Conference Data Mining (ICDM’06), 107–18. https://doi.org/10.1109/ICDM.2006.103. Wang, Bo, Aziz M. Mezlini, Feyyaz Demir, Marc Fiume, Zhuowen Tu, Michael Brudno, Benjamin Haibe-Kains, Anna Goldenberg. 2014. “Similarity Network Fusion Aggregating Data Types Genomic Scale.” Nature Methods 11 (3): 333–37. https://doi.org/10.1038/nmeth.2810.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"load-the-package","dir":"Articles","previous_headings":"The original SNF example","what":"1. Load the package","title":"A Simple Example","text":"","code":"library(SNFtool)"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"set-snf-hyperparameters","dir":"Articles","previous_headings":"The original SNF example","what":"2. Set SNF hyperparameters","title":"A Simple Example","text":"Three hyperparameters introduced example: K, alpha (also referred sigma eta different documentations), T. can learn significance hyperparameters original SNF paper (see references).","code":"K <- 20 alpha <- 0.5 T <- 20"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"load-the-data","dir":"Articles","previous_headings":"The original SNF example","what":"3. Load the data","title":"A Simple Example","text":"SNFtool package provides two mock dataframes titled Data1 Data2 example. Data1 contains gene expression values two genes 200 patients. Data2 similarly contains methylation data two genes 200 patients. ’s mock data looks like: “ground truth” data generated patients 1 100 drawn one distribution patients 101 200 drawn another. don’t access kind knowledge real data, .","code":"data(Data1) data(Data2) library(ComplexHeatmap)  # gene expression data gene_expression_hm <- Heatmap(     as.matrix(Data1),     cluster_rows = FALSE,     cluster_columns = FALSE,     show_row_names = FALSE,     show_column_names = FALSE,     heatmap_legend_param = list(         title = \"Gene Expression\"     ) )  gene_expression_hm # methylation data methylation_hm <- Heatmap(     as.matrix(Data2),     cluster_rows = FALSE,     cluster_columns = FALSE,     show_row_names = FALSE,     show_column_names = FALSE,     heatmap_legend_param = list(         title = \"Methylation\"     ) )  methylation_hm true_label <- c(matrix(1, 100, 1), matrix(2, 100, 1))"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"generate-similarity-matrices-for-each-data-source","dir":"Articles","previous_headings":"The original SNF example","what":"4. Generate similarity matrices for each data source","title":"A Simple Example","text":"consider two gene expression variables Data1 contain information one broader gene expression source two methylation variables Data2 contain information broader methylation source. next step determine, sources , similar patients . done first determining dissimilar patients source, converting dissimilarity information similarity information. calculate dissimilarity, ’ll use Euclidean distance. , can use affinityMatrix function provided SNFtool convert distance matrices similarity matrices. similarity matrices can passed SNF function integrate single similarity matrix describes similar patients across gene expression methylation data.","code":"distance_matrix_1 <- as.matrix(dist(Data1, method = \"euclidean\")) distance_matrix_2 <- as.matrix(dist(Data2, method = \"euclidean\")) similarity_matrix_1 <- affinityMatrix(distance_matrix_1, K, alpha) similarity_matrix_2 <- affinityMatrix(distance_matrix_2, K, alpha)"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"integrate-similarity-matrices-with-snf","dir":"Articles","previous_headings":"The original SNF example","what":"5. Integrate similarity matrices with SNF","title":"A Simple Example","text":"","code":"fused_network <- SNF(     list(similarity_matrix_1, similarity_matrix_2),     K,     T )"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"find-clusters-in-the-integrated-matrix","dir":"Articles","previous_headings":"The original SNF example","what":"6. Find clusters in the integrated matrix","title":"A Simple Example","text":"think 2 clusters data, can use spectral clustering find 2 clusters fused network. Sure enough, able obtain correct cluster label patients.","code":"number_of_clusters <- 2 assigned_clusters <- spectralClustering(fused_network, number_of_clusters) all(true_label == assigned_clusters) #> [1] TRUE"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"the-same-example-using-metasnf","dir":"Articles","previous_headings":"","what":"The same example using metaSNF","title":"A Simple Example","text":"purpose metaSNF primarily aid users explore wide possible range solutions. Recreating example provided original SNF function extremely restricted usage package, reveal, broadly, metaSNF works.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"load-the-package-1","dir":"Articles","previous_headings":"The same example using metaSNF","what":"1. Load the package","title":"A Simple Example","text":"","code":"library(metasnf)"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"store-the-data-in-a-data_list","dir":"Articles","previous_headings":"The same example using metaSNF","what":"2. Store the data in a data_list","title":"A Simple Example","text":"data ’re working get stored single object called data_list. data_list made passing dataframe generate_data_list function, alongside information name dataframe, broader source (referred package “domain”) information dataframe comes , type variables stored inside dataframe (can continuous, discrete, ordinal, categorical, mixed). data_list generation process also requires specify column contains information ID patients. case, information isn’t , ’ll add . added IDs span 101 onwards (rather 1 onwards) purely convenience: automatic sorting patient names won’t result patient 199 placed patient 2. first entries lists contains following elements: actual dataframe name dataframe (string) name domain information dataframe representative (string) type variable stored dataframe (options continuous, discrete, ordinal, categorical, mixed) Finally, ’s argument uid (column name currently uniquely identifies subjects data). Behind scenes, function building nested list keeps track information, also: Converting UID data “subjectkey” Removing observations contain NAs Removing subjects present input dataframes Arranging subjects dataframe UID Prefixing UID values string “subject_” help cluster result characterization rows containing NAs removed. don’t want bunch data get removed NAs sprinkled around , consider using imputation. mice package R nice . Note need name every element explicitly. long provide objects within list correct order (data, name, domain, type), ’ll get correct result:","code":"# Add \"patient_id\" column to each dataframe Data1$\"patient_id\" <- 101:(nrow(Data1) + 100) Data2$\"patient_id\" <- 101:(nrow(Data2) + 100)  data_list <- generate_data_list(     list(         data = Data1,         name = \"genes_1_and_2_exp\",         domain = \"gene_expression\",         type = \"continuous\"     ),     list(         data = Data2,         name = \"genes_1_and_2_meth\",         domain = \"gene_methylation\",         type = \"continuous\"     ),     uid = \"patient_id\" ) # Compactly: data_list <- generate_data_list(     list(Data1, \"genes_1_and_2_exp\", \"gene_expression\", \"continuous\"),     list(Data2, \"genes_1_and_2_meth\", \"gene_methylation\", \"continuous\"),     uid = \"patient_id\" )"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"store-all-the-settings-of-the-desired-snf-runs-in-a-settings_matrix","dir":"Articles","previous_headings":"The same example using metaSNF","what":"3. Store all the settings of the desired SNF runs in a settings_matrix","title":"A Simple Example","text":"settings_matrix dataframe row contains information required convert raw data final cluster solution. varying rows matrix, can access broader space possible solutions hopefully get closer something useful possible context. case, ’re going create single cluster solution using process outlined original SNFtool example . explanation parameters settings_matrix can found settings_matrix vignette. columns settings_matrix mean following: row_id: way keep track different rows alpha, k, t: hyperparameters seen snf_scheme: “scheme” used transform inputs final fused network. ’ll discuss detail next vignette. clust_alg: clustering algorithm applied final fused network. default, one two possible base options randomly chosen. value 2 indicates spectral clustering used number clusters determined rotation cost heuristic. Columns ending “dist”: distance metric used. default, 1 refers Euclidean distance continuous, discrete, ordinal data, 1 refers Gower’s distance categorical mixed data. Columns starting “inc”: Whether corresponding dataframe included round SNF. detailed descriptions columns can also found settings_matrix vignette.","code":"settings_matrix <- generate_settings_matrix(     data_list,     nrow = 1,     alpha_values = 0.5,     k_values = 20,     t_values = 20,     dropout_dist = \"none\",     possible_snf_schemes = 1 )  settings_matrix #>   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist #> 1      1   0.5 20 20          1         2         1         1        1        1 #>   mix_dist inc_genes_1_and_2_exp inc_genes_1_and_2_meth #> 1        1                     1                      1"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"run-snf","dir":"Articles","previous_headings":"The same example using metaSNF","what":"4. Run SNF","title":"A Simple Example","text":"batch_snf function apply row settings_matrix (case, just one row) data_list. solutions_matrix essentially augmented settings_matrix, new columns added included patient. row, new columns show cluster patient ended . friendlier format clustering results can obtained: cluster results exactly original SNF example: Running batch_snf return_similarity_matrices parameter set TRUE let us also take look final fused networks SNF rather just results applying spectral clustering networks: fused network obtained approach also one obtained original example: now ’ve completed basic example using package. subsequent vignettes provide guidance can leverage settings_matrix access wide range clustering solutions data, can use tools package pick best solution purposes, validate generalizability. Go give less simple example try!","code":"solutions_matrix <- batch_snf(     data_list,     settings_matrix ) #> [1] \"Row: 1/1 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 0 seconds.\" solutions_matrix[, 1:20] # it goes on like this for some time... #>   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist #> 1      1   0.5 20 20          1         2         1         1        1        1 #>   mix_dist inc_genes_1_and_2_exp inc_genes_1_and_2_meth nclust subject_101 #> 1        1                     1                      1      2           1 #>   subject_102 subject_103 subject_104 subject_105 subject_106 #> 1           1           1           1           1           1 cluster_solution <- get_cluster_df(solutions_matrix)  head(cluster_solution) #>    subjectkey cluster #> 1 subject_101       1 #> 2 subject_102       1 #> 3 subject_103       1 #> 4 subject_104       1 #> 5 subject_105       1 #> 6 subject_106       1 identical(cluster_solution$\"cluster\", true_label) #> [1] TRUE batch_snf_results <- batch_snf(     data_list,     settings_matrix,     return_similarity_matrices = TRUE ) #> [1] \"Row: 1/1 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 0 seconds.\" names(batch_snf_results) #> [1] \"solutions_matrix\"    \"similarity_matrices\" # The solutions_matrix solutions_matrix <- batch_snf_results$\"solutions_matrix\"  # The first (and only, in this case) final fused network similarity_matrix <- batch_snf_results$\"similarity_matrices\"[[1]] max(similarity_matrix - fused_network) #> [1] 0"},{"path":"https://branchlab.github.io/metasnf/articles/a_simple_example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"A Simple Example","text":"Wang, Bo, Aziz M. Mezlini, Feyyaz Demir, Marc Fiume, Zhuowen Tu, Michael Brudno, Benjamin Haibe-Kains, Anna Goldenberg. 2014. “Similarity Network Fusion Aggregating Data Types Genomic Scale.” Nature Methods 11 (3): 333–37. https://doi.org/10.1038/nmeth.2810.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/clustering_algorithms.html","id":"clustering-algorithms","dir":"Articles","previous_headings":"","what":"Clustering Algorithms","title":"Clustering Algorithms","text":"SNF produces single similarity matrix meant describe similar initial patients (participants, instances) across provided input features. Dividing similarity matrix subtypes requires can done using clustering algorithms. Within metasnf package, clustering done default using spectral clustering algorithm (implemented original SNFtool package). code goes default clustering looks like.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/clustering_algorithms.html","id":"default-clustering","dir":"Articles","previous_headings":"Clustering Algorithms","what":"Default clustering","title":"Clustering Algorithms","text":"Manhattan plot shows p-values (y-axis) associations target variables (x-axis) cluster solution calculated (colour) row settings matrix. information clustering used tucked away settings matrix: “1” corresponds spectral clustering using eigen-gap heuristic determine number clusters, “2” corresponds spectral clustering using rotation cost heuristic determine number clusters. can find information running ?generate_settings_matrix.","code":"# Load the package library(metasnf)  # Start by making a data list containing all our dataframes to more easily # identify subjects without missing data full_data_list <- generate_data_list(     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(abcd_h_income, \"household_income\", \"demographics\", \"continuous\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(abcd_anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(abcd_depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"patient\" )  # Partition into a data and target list (optional) data_list <- full_data_list[1:3] target_list <- full_data_list[4:5]  # Specifying 5 different sets of settings for SNF settings_matrix <- generate_settings_matrix(     data_list,     nrow = 5,     max_k = 40,     seed = 42 ) #> [1] \"The global seed has been changed!\" # This matrix has clustering solutions for each of the 5 SNF runs! solutions_matrix <- batch_snf(data_list, settings_matrix) #> [1] \"Row: 1/5 | Time remaining: 1 seconds\" #> [1] \"Row: 2/5 | Time remaining: 0 seconds\" #> [1] \"Row: 3/5 | Time remaining: 0 seconds\" #> [1] \"Row: 4/5 | Time remaining: 0 seconds\" #> [1] \"Row: 5/5 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 1 seconds.\" extended_solutions <- extend_solutions(     solutions_matrix,     target_list,     cat_test = \"fisher_exact\" ) #> [1] \"Processing row 1 of 5\" #> [1] \"Processing row 2 of 5\" #> [1] \"Processing row 3 of 5\" #> [1] \"Processing row 4 of 5\" #> [1] \"Processing row 5 of 5\" clust_esm_manhattan <- esm_manhattan_plot(     extended_solutions,     threshold = 0.05,     bonferroni_line = TRUE )  ggplot2::ggsave(     \"clust_esm_manhattan.png\",     clust_esm_manhattan,     width = 5,     height = 5,     dpi = 100 ) settings_matrix$\"clust_alg\" #> [1] 2 1 2 1 1"},{"path":"https://branchlab.github.io/metasnf/articles/clustering_algorithms.html","id":"other-built-in-clustering-options","dir":"Articles","previous_headings":"Clustering Algorithms","what":"Other built-in clustering options","title":"Clustering Algorithms","text":"Currently, available clustering algorithms : spectral_eigen spectral_rot spectral_two spectral_three spectral_four spectral_five spectral_six spectral_seven spectral_eight first two defaults, remaining ones specifically use 2, 3, 4, … number clusters rather whatever calculated separate heuristic function. make use alternative algorithms, ’ll need provide batch_snf custom clust_algs_list. ’s looks like: default, settings matrix varies values 1 2. , default, expects use default clustering algorithms. custom list two algorithms long, ’s fine, isn’t, ’s imperative either manually adjust numbers settings_matrix$\"clust_algs\" (easily) supply custom list settings matrix generation: , make sure provide clust_algs_list call batch_snf:","code":"clust_algs_list <- generate_clust_algs_list()  # The default list: clust_algs_list #> $spectral_eigen #> function (similarity_matrix)  #> { #>     estimated_n <- SNFtool::estimateNumberOfClustersGivenGraph(W = similarity_matrix,  #>         NUMC = 2:10) #>     number_of_clusters <- estimated_n$`Eigen-gap best` #>     solution <- SNFtool::spectralClustering(similarity_matrix,  #>         number_of_clusters) #>     solution_data <- list(solution = solution, nclust = number_of_clusters) #>     if (number_of_clusters != length(unique(solution))) { #>         warning(\"Spectral clustering provided a solution of size \",  #>             length(unique(solution)), \" when the number requested based on the eigen-gap heuristic\",  #>             \" was \", number_of_clusters, \".\") #>     } #>     return(solution_data) #> } #> <bytecode: 0x55d92bf91300> #> <environment: namespace:metasnf> #>  #> $spectral_rot #> function (similarity_matrix)  #> { #>     estimated_n <- SNFtool::estimateNumberOfClustersGivenGraph(W = similarity_matrix,  #>         NUMC = 2:10) #>     number_of_clusters <- estimated_n$`Rotation cost best` #>     solution <- SNFtool::spectralClustering(similarity_matrix,  #>         number_of_clusters) #>     solution_data <- list(solution = solution, nclust = number_of_clusters) #>     if (number_of_clusters != length(unique(solution))) { #>         warning(\"Spectral clustering provided a solution of size \",  #>             length(unique(solution)), \" when the number requested based on the rotation cost heuristic\",  #>             \" was \", number_of_clusters, \".\") #>     } #>     return(solution_data) #> } #> <bytecode: 0x55d92bf93300> #> <environment: namespace:metasnf> # A prettier format: summarize_clust_algs_list(clust_algs_list) #>   alg_number      algorithm #> 1          1 spectral_eigen #> 2          2   spectral_rot # Adding algorithms provided by the package clust_algs_list <- generate_clust_algs_list(     \"two_cluster_spectral\" = spectral_two,     \"five_cluster_spectral\" = spectral_five )  # Note that this one has the default algorithms as well as the newly added ones summarize_clust_algs_list(clust_algs_list) #>   alg_number             algorithm #> 1          1        spectral_eigen #> 2          2          spectral_rot #> 3          3  two_cluster_spectral #> 4          4 five_cluster_spectral # This list has only the newly added ones, thanks to the disable_base parameter clust_algs_list <- generate_clust_algs_list(     \"two_cluster_spectral\" = spectral_two,     \"five_cluster_spectral\" = spectral_five,     disable_base = TRUE )  summarize_clust_algs_list(clust_algs_list) #>   alg_number             algorithm #> 1          1  two_cluster_spectral #> 2          2 five_cluster_spectral # This list has only the newly added ones, thanks to the disable_base parameter clust_algs_list <- generate_clust_algs_list(     \"two_cluster_spectral\" = spectral_two,     \"three_cluster_spectral\" = spectral_three,     \"five_cluster_spectral\" = spectral_five )  # Specifying 5 different sets of settings for SNF settings_matrix <- generate_settings_matrix(     data_list,     nrow = 10,     max_k = 40,     seed = 42,     clustering_algorithms = clust_algs_list ) #> [1] \"The global seed has been changed!\" settings_matrix$\"clust_alg\" #>  [1] 3 1 1 5 2 2 4 1 3 3 solutions_matrix <- batch_snf(     data_list,     settings_matrix,     clust_algs_list = clust_algs_list )"},{"path":"https://branchlab.github.io/metasnf/articles/clustering_algorithms.html","id":"structure-of-a-clustering-algorithm-function","dir":"Articles","previous_headings":"Clustering Algorithms","what":"Structure of a clustering algorithm function","title":"Clustering Algorithms","text":"clustering algorithm can used long can write function following format: Takes single N*N similarity_matrix input first item (named “solution”) single N-dimensional vector numbers corresponding observations similarity matrix second item (named “nclust”) single integer indicating number clusters algorithm supposed generated second point seems redundant calculated simply running length(unique(solution)), ’s useful keep track separately troubleshooting purposes. Note function take number clusters argument - want explore clustering algorithm varying number clusters, ’ll need provide separate function number clusters ’re interested . source code two default functions shown :","code":"# Default clustering algorithm #1 spectral_eigen <- function(similarity_matrix) {     estimated_n <- SNFtool::estimateNumberOfClustersGivenGraph(         similarity_matrix     )     number_of_clusters <- estimated_n$`Eigen-gap best`     solution <- SNFtool::spectralClustering(         similarity_matrix,         number_of_clusters     )     return(list(\"solution\" = solution, \"nclust\" = number_of_clusters)) }  # Default clustering algorithm #2 spectral_rot <- function(similarity_matrix) {     estimated_n <- SNFtool::estimateNumberOfClustersGivenGraph(similarity_matrix)     number_of_clusters <- estimated_n$`Rotation cost best`     solution <- SNFtool::spectralClustering(similarity_matrix, number_of_clusters)     solution_data <- list(\"solution\" = solution, \"nclust\" = number_of_clusters)     return(solution_data) }"},{"path":"https://branchlab.github.io/metasnf/articles/clustering_algorithms.html","id":"non-automated-clustering","dir":"Articles","previous_headings":"Clustering Algorithms","what":"Non-automated clustering","title":"Clustering Algorithms","text":"can also extract similarity matrices computed row settings matrix perform clustering “manually”. particularly useful clustering procedures transition similarity matrix final solution requires human intervention (e.g., judgement clustering hyperparameters).","code":"batch_snf_results <- batch_snf(     data_list,     settings_matrix,     clust_algs_list = clust_algs_list,     return_similarity_matrices = TRUE ) #> [1] \"Row: 1/10 | Time remaining: 0 seconds\" #> [1] \"Row: 2/10 | Time remaining: 1 seconds\" #> [1] \"Row: 3/10 | Time remaining: 1 seconds\" #> [1] \"Row: 4/10 | Time remaining: 1 seconds\" #> [1] \"Row: 5/10 | Time remaining: 1 seconds\" #> [1] \"Row: 6/10 | Time remaining: 0 seconds\" #> [1] \"Row: 7/10 | Time remaining: 0 seconds\" #> [1] \"Row: 8/10 | Time remaining: 0 seconds\" #> [1] \"Row: 9/10 | Time remaining: 0 seconds\" #> [1] \"Row: 10/10 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 1 seconds.\" names(batch_snf_results) #> [1] \"solutions_matrix\"    \"similarity_matrices\" solutions_matrix <- batch_snf_results$\"solutions_matrix\"  # Similarity matrices are in the list below: similarity_matrices <- batch_snf_results$\"similarity_matrices\"  length(similarity_matrices) #> [1] 10 dim(similarity_matrices[[1]]) #> [1] 87 87 # Your manual clustering goes here..."},{"path":"https://branchlab.github.io/metasnf/articles/clustering_algorithms.html","id":"example-of-non-automated-clustering-dbscan","dir":"Articles","previous_headings":"Clustering Algorithms","what":"Example of non-automated clustering: DBSCAN","title":"Clustering Algorithms","text":"Let’s say wanted cluster similarity matrices DBSCAN rather spectral clustering. Start taking look documentation running DBSCAN function dbscan R package https://cran.r-project.org/web/packages/dbscan/dbscan.pdf: DBSCAN challenging custom clustering can get, suggested process specifying number clusters recommended involve human intervention function operates dissimilarity (distance) matrices rather similarity matrices. slightly adjusted form dbscan example. can work . poking around, often see people mentioning DBSCAN just isn’t meant automated. need look data good idea values use hyperparameters eps minPts. need get involved manually, ’s perfect time manage many similarity matrices ’ve created batch_snf meta clustering. Generate wide range similarity matrices apply meta clustering find representative similarity matrices. One way based spectral-clustering derived solutions end clustering together (see example). take corresponding affinity matrices go dbscan clustering process manually. Based ?dbscan, looks like function can accept precomputed distance matrices (instead precomputed_nn_objects) long actually dist objects (can done using .dist() function). many formulas convert similarity matrices distance matrices pros cons. , ’ll use common approach distance = max(similarity) - similarity. Whichever matrix values maximum similarity now distance 0, whichever matrix values lowest amount similarity distance values closest former maximum similarity value.   ’s one bold lie code chunk , easy find magic hyperparameter combination minPts = 10 eps = 0.487 parameter value 0.4872. wasn’t based visual inspection kNNdistplot, rather lot trial error. Something along lines : specific instance, hyperparameters incredibly sensitive - slight change get different results. likely due shape actual data clustered. mileage may vary!","code":"library(dbscan) ## Example 1: use dbscan on the iris data set data(iris) iris <- as.matrix(iris[, 1:4]) iris_dist <- dist(iris)  ## Find suitable DBSCAN parameters: ## 1. We use minPts = dim + 1 = 5 for iris. A larger value can also be used. ## 2. We inspect the k-NN distance plot for k = minPts - 1 = 4 kNNdistplot(iris, minPts = 5)  ## Noise seems to start around a 4-NN distance of .7 abline(h=.7, col = \"red\", lty = 2)  results <- dbscan(iris_dist, eps = 0.7, minPts = 5)  # The 1 is added to ensure that those with no cluster (cluster 0) are still # plotted. pairs(iris, col = results$cluster + 1) library(dbscan) #>  #> Attaching package: 'dbscan' #> The following object is masked from 'package:stats': #>  #>     as.dendrogram library(ggplot2)  data_list <- generate_data_list(     list(         data = expression_df,         name = \"genes_1_and_2_exp\",         domain = \"gene_expression\",         type = \"continuous\"     ),     list(         data = methylation_df,         name = \"genes_1_and_2_meth\",         domain = \"gene_methylation\",         type = \"continuous\"     ),     uid = \"patient_id\" )  settings_matrix <- generate_settings_matrix(     data_list,     nrow = 5,     seed = 42 ) #> [1] \"The global seed has been changed!\" batch_snf_results <- batch_snf(     data_list,     settings_matrix,     return_similarity_matrices = TRUE ) #> [1] \"Row: 1/5 | Time remaining: 2 seconds\" #> [1] \"Row: 2/5 | Time remaining: 1 seconds\" #> [1] \"Row: 3/5 | Time remaining: 1 seconds\" #> [1] \"Row: 4/5 | Time remaining: 0 seconds\" #> [1] \"Row: 5/5 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 2 seconds.\" similarity_matrices <- batch_snf_results$\"similarity_matrices\"  solutions_matrix <- batch_snf_results$\"solutions_matrix\"  representative_sm <- similarity_matrices[[1]]  representative_sms <- similarity_matrices[c(1, 2)]  distance_matrix1 <- as.dist(     max(representative_sm) - representative_sm )  kNNdistplot(     distance_matrix1,     minPts = 10 )  ## Maybe there? abline(h=0.4872, col = \"red\", lty = 2) dbscan_results <- dbscan(distance_matrix1, eps = 0.4872, minPts = 10)$\"cluster\"  spectral_results <- get_clusters(solutions_matrix[1, ])  dbscan_vs_spectral <- data.frame(     dbscan = dbscan_results,     spectral = spectral_results )  ggplot(dbscan_vs_spectral, aes(x = dbscan, y = spectral)) +     geom_jitter(height = 0.1, width = 0.1, alpha = 0.5) +     theme_bw() for (i in seq(0.485, 0.488, by = 0.0001)) {     results <- dbscan(distance_matrix1, eps = i, minPts = 10)     if (length(unique(results$\"cluster\")) == 3) {         print(i)     } }"},{"path":"https://branchlab.github.io/metasnf/articles/confounders.html","id":"accounting-for-confounding-variables","dir":"Articles","previous_headings":"","what":"Accounting for confounding variables","title":"Unwanted Signal","text":"Simply include confounding variable cluster analysis bear mind separation across clusters see variable evidence causal link. Consider following scenario. Children raised wealthy homes can afford go better schools, likely raised less stressful environments, can afford tutoring outside school. Consequently, higher standardized test scores. also substantially likely live near lake. cluster children according standardized test scores whether live near lake, may find one cluster kids live near lake high test scores separate cluster kids don’t live near lake low test scores. course, causal relationship indicating living near lake improves test scores, test scores causally influence proximity lakes. confounding variable household income. including household income model, ’ll get clusters, clusters also separate across “confounding” variable.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/confounders.html","id":"unwanted-signal","dir":"Articles","previous_headings":"","what":"Unwanted signal","title":"Unwanted Signal","text":"Consider following scenario. wish find clusters basketball players. simplicity, let’s say three basketball positions: point guards, lot assists blocks centers, assists lots blocks shooting guards, moderate amount assists blocks (lot personal fouls) handed dataset containing assists blocks per season large number basketball players. However, half basketball players regular players community center half pro. data look like?  Let’s say weren’t interested fact pro players aren’t community center players. just wanted know different styles play (ground truth position) exist. kind clustering results get data?  case, default spectral clustering done decent job separating groups, much granularity. separate clusters just pro players just community center players, want. clustering algorithms can fare even worse context. R version 4.3.0 higher, can use snippet factoextra::fviz_nbclust(metasnf_data[, c(\"assists\", \"blocks\")], kmeans, method = \"wss\") see optimal number clusters 2.  prevent clustering caring signal introduced pro/community center level differences, ’ll (linearly) regress effect pro player.  ’s looking much like want see. Following correction, ’ll much easier identifying clustering structure exists independently variance don’t care pro-status.","code":"library(metasnf) library(SNFtool) library(ggplot2)  # Generating function for the blocks-per-season of a player generate_blocks <- function(level, position) {     # The average blocks per season of all basketball players     blocks <- rnorm(n = 1, mean = 500, sd = 50)     # Effect of playing in the pro     if (level == \"pro\") {         blocks <- blocks + rnorm(n = 1, mean = 2000, sd = 100)     } else {         # Match the noisiness of the pro players         blocks <- blocks + rnorm(n = 1, mean = 0, sd = 100)     }     # Effect of the player's position     if (position == \"pg\") {         blocks <- blocks + 0 # Just to be explicit about it     } else if (position == \"c\") {         blocks <- blocks + 500     } else if (position == \"sg\") {         blocks <- blocks + 250     }     return(blocks) }  # Generating function for the assists-per-season of a player generate_assists <- function(level, position) {     # The average assists per season of all basketball players     assists <- rnorm(n = 1, mean = 1000, sd = 10)     # Effect of playing in the pro     if (level == \"pro\") {         assists <- assists + rnorm(n = 1, mean = 2500, sd = 10)     } else {         # Match the noisiness of the pro players         assists <- assists + rnorm(n = 1, mean = 0, sd = 10)     }     # Effect of the player's position     if (position == \"pg\") {         assists <- assists + 400 # Just to be explicit about it     } else if (position == \"c\") {         assists <- assists + 0     } else if (position == \"sg\") {         assists <- assists + 200     }     return(assists) } # # Helper function to fill in blocks and assists for a player given their # position and level. generate_player_data <- function(df) {     df$\"blocks\" <- df |> apply(         MARGIN = 1,         FUN = function(x) {             generate_blocks(x[[1]], x[[2]])         }     )     df$\"assists\" <- df |> apply(         MARGIN = 1,         FUN = function(x) {             generate_assists(x[[1]], x[[2]])         }     )     return(df) }  # Generate the data rows <- 300 player_data <- data.frame(     level = sample(c(\"regular\", \"pro\"), size = rows, replace = TRUE),     position = sample(c(\"pg\", \"c\", \"sg\"), size = rows, replace = TRUE) ) |> generate_player_data()  player_data$\"id\" <- as.character(seq_len(nrow(player_data)))  # Plot by position player_data |>     ggplot(aes(x = blocks, y = assists, shape = level, colour = position)) +     geom_point(size = 5, alpha = 0.3) +     theme_bw() set.seed(42)  metasnf_data <- player_data |> dplyr::select(\"id\", \"assists\", \"blocks\")  data_list <- generate_data_list(     list(         data = metasnf_data,         name = \"player_data\",         domain = \"player_data\",         type = \"continuous\"     ),     uid = \"id\" )  settings_matrix <- generate_settings_matrix(     data_list = data_list,     nrow = 1,     possible_snf_schemes = 1,     k_values = 20,     alpha_values = 0.8 )  solutions_matrix <- batch_snf(data_list, settings_matrix) #> [1] \"Row: 1/1 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 0 seconds.\" cluster_solutions_df <- get_cluster_solutions(solutions_matrix) |>     dplyr::rename(         \"id\" = \"subjectkey\",         \"cluster\" = `1`     )  head(cluster_solutions_df) #>            id cluster #> 1   subject_1       3 #> 2  subject_10       6 #> 3 subject_100       6 #> 4 subject_101       2 #> 5 subject_102       2 #> 6 subject_103       8 cluster_solutions_df$\"cluster\" <- factor(cluster_solutions_df$\"cluster\")  # matching the subject names metasnf_data$\"id\" <- paste0(\"subject_\", metasnf_data$\"id\")  # merging back the original data metasnf_data <- dplyr::inner_join(metasnf_data, cluster_solutions_df, by = \"id\")  metasnf_data |>     ggplot(aes(x = blocks, y = assists, colour = cluster)) +     geom_point(size = 5, alpha = 0.3) +     theme_bw() km <- kmeans(metasnf_data[, c(\"blocks\", \"assists\")], centers = 2, nstart = 25)  km$\"cluster\" #>   [1] 1 1 2 1 1 2 1 1 1 2 2 1 1 1 1 2 1 1 2 2 1 1 2 1 1 1 2 1 2 2 1 1 2 2 2 1 1 #>  [38] 2 1 1 2 1 2 1 2 1 2 2 1 2 1 2 2 2 1 1 2 2 1 2 1 1 1 2 1 2 1 2 2 1 2 2 2 1 #>  [75] 2 1 2 1 2 1 2 2 2 1 1 2 2 1 1 2 2 2 1 2 1 1 2 2 1 2 2 2 1 2 2 2 2 2 1 1 1 #> [112] 2 1 1 1 1 2 1 1 1 2 2 1 1 1 1 2 1 1 2 2 2 1 1 1 1 1 2 1 1 1 1 1 1 2 1 2 1 #> [149] 2 2 1 2 2 1 2 1 2 1 2 2 1 2 1 1 2 1 1 1 1 2 1 2 1 1 2 2 2 1 2 2 1 2 2 2 1 #> [186] 2 1 2 1 2 1 2 2 2 1 1 1 2 1 2 2 2 1 2 2 1 1 1 1 1 2 2 2 2 1 1 2 1 2 1 1 1 #> [223] 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 2 2 1 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 1 1 2 2 #> [260] 1 1 1 1 2 1 2 1 1 2 2 1 1 2 1 1 1 2 1 1 2 2 1 2 2 1 2 1 2 2 2 2 2 1 1 2 2 #> [297] 2 2 1 1 metasnf_data$\"kmeans\" <- factor(km$\"cluster\")  metasnf_data |>     ggplot(aes(x = blocks, y = assists, colour = kmeans)) +     geom_point(size = 5, alpha = 0.3) +     theme_bw() player_data$\"adjusted_blocks\" <- resid(lm(blocks ~ level, player_data)) player_data$\"adjusted_assists\" <- resid(lm(assists ~ level, player_data))  # Plot by position player_data |>     ggplot(         aes(             x = adjusted_blocks,             y = adjusted_assists,             shape = level,             colour = position         )     ) +     geom_point(size = 5, alpha = 0.3) +     theme_bw()"},{"path":"https://branchlab.github.io/metasnf/articles/confounders.html","id":"procedure-using-the-metasnf-package","dir":"Articles","previous_headings":"","what":"Procedure using the metasnf package","title":"Unwanted Signal","text":"Note can adjust signal categorical variables, adjustment linear, applied numeric (continuous, discrete, ordinal) data, adjustment can lead major information loss (see section )!","code":"head(player_data) #>     level position    blocks   assists id adjusted_blocks adjusted_assists #> 1 regular        c  856.4165 1015.4749  1        74.06966       -162.28888 #> 2 regular       sg  734.9430 1205.1276  2       -47.40385         27.36383 #> 3     pro       pg 2443.7954 3913.3202  3      -286.18349        198.25452 #> 4 regular        c 1141.4151  992.0313  4       359.06833       -185.73242 #> 5 regular        c  854.0715  986.2844  5        71.72467       -191.47938 #> 6     pro        c 2863.3687 3506.7345  6       133.38977       -208.33114 dl <- generate_data_list(     list(         data = player_data[, c(\"id\", \"blocks\", \"assists\")],         name = \"player_data\",         domain = \"player_data\",         type = \"continuous\"     ),     uid = \"id\" )  # Correction list for just the level unwanted_signal_list1 <- generate_data_list(     list(         data = player_data[, c(\"id\", \"level\")],         name = \"player_level\",         domain = \"player_data\",         type = \"categorical\"     ),     uid = \"id\" )  # Correction list for both player level and position unwanted_signal_list2 <- generate_data_list(     list(         data = player_data[, c(\"id\", \"level\", \"position\")],         name = \"player_level\",         domain = \"player_data\",         type = \"categorical\"     ),     uid = \"id\" )  adjusted_dl <- linear_adjust(dl, unwanted_signal_list1)  # Combine the data from the two data_lists the second list is being merged # only because it also has the position data, for plotting purposes merged_df <- collapse_dl(c(adjusted_dl, unwanted_signal_list2))  merged_df |>     ggplot(aes(x = blocks, y = assists, shape = level, colour = position)) +     geom_point(size = 5, alpha = 0.3) +     theme_bw() # Correcting too many things! adjusted_dl2 <- linear_adjust(dl, unwanted_signal_list2)  merged_df2 <- collapse_dl(c(adjusted_dl2, unwanted_signal_list2))  merged_df2 |>     ggplot(aes(x = blocks, y = assists, shape = level, colour = position)) +     geom_point(size = 5, alpha = 0.3) +     theme_bw()"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/articles/confounders.html","id":"excessive-loss-of-signal","dir":"Articles","previous_headings":"Limitations and important considerations","what":"1. Excessive loss of signal","title":"Unwanted Signal","text":"remove signal associated variable, impact every variable degree proportional correlation variable unwanted one. Practically, variable strongly correlated unwanted signal variable may better removed. Consider two variables: temperature ice cream sales. just happens ice cream sales purely proportional temperature, plus random noise. information one collect improve ability predict ice cream sales. wanted learn structure ice cream sales excluding signal introduced temperature, adjustment turn ice cream sales data genuine pure noise. point clusters generated totally meaningless non-reproducible.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/confounders.html","id":"lack-of-accounting-for-non-linearities","dir":"Articles","previous_headings":"Limitations and important considerations","what":"2. Lack of accounting for non-linearities","title":"Unwanted Signal","text":"adjustment procedure purely linear.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/confounders.html","id":"inability-to-adjust-ordinal-discrete-or-categorical-data","dir":"Articles","previous_headings":"Limitations and important considerations","what":"3. Inability to adjust ordinal, discrete, or categorical data","title":"Unwanted Signal","text":"Linearly adjusting categorical/factor variables possible. Attempting adjust data discrete ordinal structure likely completely remove association regressor variables variables regressed.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/correlation_plots.html","id":"data-set-up","dir":"Articles","previous_headings":"","what":"Data set-up","title":"Correlation Plots","text":"","code":"library(metasnf)  # We'll just use the first few columns for this demo abcd_cort_sa_minimal <- abcd_cort_sa[, 1:5]  # And one more mock categorical variable for demonstration purposes abcd_city <- abcd_colour abcd_city$\"city\" <- sample(     c(\"toronto\", \"montreal\", \"vancouver\"),     size = nrow(abcd_city),     replace = TRUE ) abcd_city <- abcd_city |> dplyr::select(-\"colour\")  # Make sure to throw in all the data you're interested in visualizing for this # data_list, including out-of-model measures and confounding variables. data_list <- generate_data_list(     list(abcd_cort_sa_minimal, \"cortical_sa\", \"neuroimaging\", \"continuous\"),     list(abcd_h_income, \"household_income\", \"demographics\", \"ordinal\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(abcd_colour, \"favourite_colour\", \"demographics\", \"categorical\"),     list(abcd_city, \"city\", \"demographics\", \"categorical\"),     list(abcd_anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(abcd_depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"patient\" )  summarize_dl(data_list) ##               name        type       domain length width ## 1      cortical_sa  continuous neuroimaging     93     5 ## 2 household_income     ordinal demographics     93     2 ## 3  pubertal_status  continuous demographics     93     2 ## 4 favourite_colour categorical demographics     93     2 ## 5             city categorical demographics     93     2 ## 6          anxiety     ordinal    behaviour     93     2 ## 7        depressed     ordinal    behaviour     93     2 # This matrix contains all the pairwise association p-values assoc_pval_matrix <- calc_assoc_pval_matrix(data_list)  assoc_pval_matrix[1:3, 1:3] ##            mrisdp_303 mrisdp_304 mrisdp_305 ## mrisdp_303  0.0000000  0.6374024  0.4513919 ## mrisdp_304  0.6374024  0.0000000  0.2790341 ## mrisdp_305  0.4513919  0.2790341  0.0000000"},{"path":"https://branchlab.github.io/metasnf/articles/correlation_plots.html","id":"heatmaps","dir":"Articles","previous_headings":"","what":"Heatmaps","title":"Correlation Plots","text":"’s basic heatmap looks like: data generated randomly, “colour” variable really just categorical mapping “cbcl_depress_r”. can draw attention confounding variables /model measures specifying names shown . ComplexHeatmap package offers functionality splitting heatmaps slices. One way slices clustering heatmap k-means: Another way divide heatmap variable domain. can done providing data_list variables assoc_pval_matrix setting split_by_domain TRUE.","code":"ap_heatmap <- assoc_pval_heatmap(     assoc_pval_matrix )  save_heatmap(     ap_heatmap,     \"assoc_pval_heatmap.png\",     width = 650,     height = 500,     res = 100 ) ap_heatmap2 <- assoc_pval_heatmap(     assoc_pval_matrix,     confounders = list(         \"Colour\" = \"colour\",         \"Pubertal Status\" = \"pubertal_status\"     ),     out_of_models = list(         \"City\" = \"city\"     ) )  save_heatmap(     ap_heatmap2,     \"assoc_pval_heatmap2.png\",     width = 680,     height = 500,     res = 100 ) ap_heatmap3 <- assoc_pval_heatmap(     assoc_pval_matrix,     confounders = list(         \"Colour\" = \"colour\",         \"Pubertal Status\" = \"pubertal_status\"     ),     out_of_models = list(         \"City\" = \"city\"     ),     row_km = 3,     column_km = 3 )  save_heatmap(     ap_heatmap3,     \"assoc_pval_heatmap3.png\",     width = 680,     height = 500,     res = 100 ) ap_heatmap4 <- assoc_pval_heatmap(     assoc_pval_matrix,     confounders = list(         \"Colour\" = \"colour\",         \"Pubertal Status\" = \"pubertal_status\"     ),     out_of_models = list(         \"City\" = \"city\"     ),     data_list = data_list,     split_by_domain = TRUE )  save_heatmap(     ap_heatmap4,     \"assoc_pval_heatmap4.png\",     width = 700,     height = 500,     res = 100 )"},{"path":"https://branchlab.github.io/metasnf/articles/data_list.html","id":"the-data_list","dir":"Articles","previous_headings":"","what":"The data_list","title":"The Data List","text":"vignette outlines importance, structure, creation data_list object. can find much info running ?generate_data_list loading metasnf package. data_list main object used metasnf package store data. named nested list containing input dataframes (data), name input dataframe (user’s reference), ‘domain’ dataframe (broader source information input dataframe capturing, determined user’s domain knowledge), type variable stored dataframe (continuous, discrete, ordinal, categorical, mixed). examples data_list generation usage : Depending data preprocessing, may convenient assemble components data_list automated way provide result generate_data_list. example, code generated list like one : generate_data_list receives single list, ’ll treat list containing components required construct properly formatted data_list:","code":"library(metasnf)  # Preparing some mock data heart_rate_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var1 = c(0.04, 0.1, 0.3),     var2 = c(30, 2, 0.3) )  personality_test_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var3 = c(900, 1990, 373),     var4 = c(509, 2209, 83) )  survey_response_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var5 = c(1, 3, 3),     var6 = c(2, 3, 3) )  city_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var7 = c(\"toronto\", \"montreal\", \"vancouver\") )  # Generating a data_list explicitly (Name each nested list element): data_list <- generate_data_list(     list(         data = heart_rate_df,         name = \"heart_rate\",         domain = \"clinical\",         type = \"continuous\"     ),     list(         data = personality_test_df,         name = \"personality_test\",         domain = \"surveys\",         type = \"continuous\"     ),     list(         data = survey_response_df,         name = \"survey_response\",         domain = \"surveys\",         type = \"ordinal\"     ),     list(         data = city_df,         name = \"city\",         domain = \"location\",         type = \"categorical\"     ),     uid = \"patient_id\" )  # Achieving the same result compactly: data_list <- generate_data_list(     list(heart_rate_df, \"heart_rate\", \"clinical\", \"continuous\"),     list(personality_test_df, \"personality_test\", \"surveys\", \"continuous\"),     list(survey_response_df, \"survey_response\", \"surveys\", \"ordinal\"),     list(city_df, \"city\", \"location\", \"categorical\"),     uid = \"patient_id\" )  # Printing data_list summaries summarize_dl(data_list) ##               name        type   domain length width ## 1       heart_rate  continuous clinical      3     3 ## 2 personality_test  continuous  surveys      3     3 ## 3  survey_response     ordinal  surveys      3     3 ## 4             city categorical location      3     2 list_of_lists <- list(     list(heart_rate_df, \"data1\", \"domain1\", \"continuous\"),     list(personality_test_df, \"data2\", \"domain2\", \"continuous\") ) dl <- generate_data_list(     list_of_lists,     uid = \"patient_id\" )  summarize_dl(dl) ##    name       type  domain length width ## 1 data1 continuous domain1      3     3 ## 2 data2 continuous domain2      3     3"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"the-distance_metrics_list","dir":"Articles","previous_headings":"","what":"The distance_metrics_list","title":"Distance Metrics","text":"metaSNF enables users customize distance metrics used SNF pipeline. information distance metrics stored distance_metrics_list object. default, batch_snf create distance_metrics_list calling generate_distance_metrics_list function additional arguments. list list functions (euclidean_distance() gower_distance()), printing directly can messy. summarize_dml() function prints object nicer format. lists must always contain least 1 distance metric 5 recognized types variables: continuous, discrete, ordinal, categorical, mixed (combination previous four). default, continuous, discrete, ordinal data converted distance matrices using simple Euclidean distance. Categorical mixed data handled using Gower’s formula implemented cluster package (see ?cluster::daisy).","code":"library(metasnf)  distance_metrics_list <- generate_distance_metrics_list() summarize_dml(distance_metrics_list) #>  #> Continuous distances: #> 1. euclidean_distance #>  #> Discrete distances: #> 1. euclidean_distance #>  #> Ordinal distances: #> 1. euclidean_distance #>  #> Categorical distances: #> 1. gower_distance #>  #> Mixed distances: #> 1. gower_distance"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"how-the-distance_metrics_list-is-used","dir":"Articles","previous_headings":"","what":"How the distance_metrics_list is used","title":"Distance Metrics","text":"show distance_metrics_list used, ’ll start extending distance_metrics_list beyond just default options. metaSNF provides Euclidean distance function applies standard normalization first, sn_euclidean_distance() (wrapper around SNFtool::standardNormalization + stats::dist). ’s can create custom distance_metrics_list includes metric continuous discrete variables. Now, settings_matrix generation, can provide distance_metrics_list ensure new distance metrics used SNF runs. making settings_matrix, ’ll quickly need setup data (done Simple Example). settings_matrix can generated: continuous discrete distance metrics values randomly fluctuate 1 2, 1 means first metric (euclidean_distance()) used 2 means second metric (sn_euclidean_distance) used. ’s important note settings_matrix store distance metrics, just pointers position metric distance_metrics_list used SNF run. , ’ll need supply distance_metrics_list calling batch_snf().","code":"my_distance_metrics <- generate_distance_metrics_list(     continuous_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ),     discrete_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ) )  summarize_dml(my_distance_metrics) #>  #> Continuous distances: #> 1. euclidean_distance  #> 2. standard_norm_euclidean #>  #> Discrete distances: #> 1. euclidean_distance  #> 2. standard_norm_euclidean #>  #> Ordinal distances: #> 1. euclidean_distance #>  #> Categorical distances: #> 1. gower_distance #>  #> Mixed distances: #> 1. gower_distance library(SNFtool)  data(Data1) data(Data2)  Data1$\"patient_id\" <- 101:(nrow(Data1) + 100) # nolint Data2$\"patient_id\" <- 101:(nrow(Data2) + 100) # nolint  data_list <- generate_data_list(     list(Data1, \"genes_1_and_2_exp\", \"gene_expression\", \"continuous\"),     list(Data2, \"genes_1_and_2_meth\", \"gene_methylation\", \"continuous\"),     uid = \"patient_id\" ) settings_matrix <- generate_settings_matrix(     data_list,     nrow = 10,     distance_metrics_list = my_distance_metrics )  # showing just the columns that are related to distances settings_matrix |> dplyr::select(dplyr::ends_with(\"dist\")) #>    cont_dist disc_dist ord_dist cat_dist mix_dist #> 1          2         2        1        1        1 #> 2          1         1        1        1        1 #> 3          2         2        1        1        1 #> 4          2         1        1        1        1 #> 5          1         2        1        1        1 #> 6          1         1        1        1        1 #> 7          2         1        1        1        1 #> 8          2         2        1        1        1 #> 9          1         1        1        1        1 #> 10         1         2        1        1        1 solutions_matrix <- batch_snf(     data_list,     settings_matrix,     distance_metrics_list = my_distance_metrics )"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"removing-the-default-distance_metrics","dir":"Articles","previous_headings":"","what":"Removing the default distance_metrics","title":"Distance Metrics","text":"two ways avoid using default distance metrics don’t want ever use . first way use keep_defaults parameter generate_distance_metrics_list(): option, necessary provide least one distance metric every variable type. distance_metrics_list variable types completely empty (even data variable type first place). second way explicitly specify indices want sample settings_matrix generation: second option can quite useful paired add_settings_matrix_rows(), enabling build distinct blocks rows settings matrix different combinations distance metrics. can save trouble needing manage several distinct distance metrics lists manage solution space separate runs batch_snf. rows 1 10, continuous data always handled first continuous distance metric discrete data handled second third discrete distance metrics. rows 11 20, continuous data always handled third continuous distance metric discrete data handled first distance metric.","code":"no_default_metrics <- generate_distance_metrics_list(     continuous_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ),     discrete_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ),     ordinal_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ),     categorical_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ),     mixed_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance     ),     keep_defaults = FALSE )  summarize_dml(no_default_metrics) #>  #> Continuous distances: #> 1. standard_norm_euclidean #>  #> Discrete distances: #> 1. standard_norm_euclidean #>  #> Ordinal distances: #> 1. standard_norm_euclidean #>  #> Categorical distances: #> 1. standard_norm_euclidean #>  #> Mixed distances: #> 1. standard_norm_euclidean my_distance_metrics <- generate_distance_metrics_list(     continuous_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance,         \"some_other_metric\" = sn_euclidean_distance     ),     discrete_distances = list(         \"standard_norm_euclidean\" = sn_euclidean_distance,         \"some_other_metric\" = sn_euclidean_distance     ) )  summarize_dml(my_distance_metrics) #>  #> Continuous distances: #> 1. euclidean_distance  #> 2. standard_norm_euclidean  #> 3. some_other_metric #>  #> Discrete distances: #> 1. euclidean_distance  #> 2. standard_norm_euclidean  #> 3. some_other_metric #>  #> Ordinal distances: #> 1. euclidean_distance #>  #> Categorical distances: #> 1. gower_distance #>  #> Mixed distances: #> 1. gower_distance settings_matrix <- generate_settings_matrix(     data_list,     nrow = 10,     distance_metrics_list = my_distance_metrics,     continuous_distances = 1,     discrete_distances = c(2, 3) )  settings_matrix |> dplyr::select(dplyr::ends_with(\"dist\")) #>    cont_dist disc_dist ord_dist cat_dist mix_dist #> 1          1         2        1        1        1 #> 2          1         2        1        1        1 #> 3          1         3        1        1        1 #> 4          1         3        1        1        1 #> 5          1         3        1        1        1 #> 6          1         2        1        1        1 #> 7          1         3        1        1        1 #> 8          1         3        1        1        1 #> 9          1         2        1        1        1 #> 10         1         2        1        1        1 settings_matrix <- generate_settings_matrix(     data_list,     nrow = 10,     distance_metrics_list = my_distance_metrics,     continuous_distances = 1,     discrete_distances = c(2, 3) )  settings_matrix <- add_settings_matrix_rows(     settings_matrix,     nrow = 10,     distance_metrics_list = my_distance_metrics,     continuous_distances = 3,     discrete_distances = 1 )  settings_matrix |> dplyr::select(dplyr::ends_with(\"dist\")) #>    cont_dist disc_dist ord_dist cat_dist mix_dist #> 1          1         3        1        1        1 #> 2          1         2        1        1        1 #> 3          1         3        1        1        1 #> 4          1         3        1        1        1 #> 5          1         2        1        1        1 #> 6          1         2        1        1        1 #> 7          1         2        1        1        1 #> 8          1         2        1        1        1 #> 9          1         2        1        1        1 #> 10         1         2        1        1        1 #> 11         3         1        1        1        1 #> 12         3         1        1        1        1 #> 13         3         1        1        1        1 #> 14         3         1        1        1        1 #> 15         3         1        1        1        1 #> 16         3         1        1        1        1 #> 17         3         1        1        1        1 #> 18         3         1        1        1        1 #> 19         3         1        1        1        1 #> 20         3         1        1        1        1"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"supplying-weights-to-distance-metrics","dir":"Articles","previous_headings":"","what":"Supplying weights to distance metrics","title":"Distance Metrics","text":"distance metric functions can accept weights. Usually, weights applied direct scaling specified variables. cases (e.g. categorical distance metric functions), way weights applied may somewhat less intuitive. bottom vignette outlines available distance metric functions grouped whether accept weights. can examine documentation weighted functions learn weights provide used. important note providing weights run SNF specific form data may expect time ready converted distance metric function. “individual” “two-step” SNF schemes involve distance metrics applied input dataframes data_list . “domain” scheme, however, concatenates data within domain converting larger dataframe distance matrix. Anytime one dataframe domain label use domain SNF scheme, columns associated domain single dataframe distance metric function applied. first step providing custom weights generate weights_matrix: default, function return dataframe containing columns data_list single row 1s, weights used single run SNF. actually use matrix SNF, ’ll need make sure number rows weights matrix number rows settings matrix. weights_matrix 1s (default weights_matrix used don’t supply one ) ’won’t actually anything data. can either replace 1s weights ’ve calculated outside package, use random weights following uniform exponential distribution. default metrics (simple Euclidean continuous, discrete, ordinal data Gower’s distance categorical mixed data) capable applying weights data distance matrix generation.","code":"weights_matrix <- generate_weights_matrix(     data_list )  weights_matrix #>      V1 V2 V3 V4 #> [1,]  1  1  1  1 settings_matrix <- generate_settings_matrix(     data_list,     nrow = 10,     distance_metrics_list = my_distance_metrics,     continuous_distances = 1,     discrete_distances = c(2, 3) )  weights_matrix <- generate_weights_matrix(     data_list,     nrow = nrow(settings_matrix) )  weights_matrix[1:5, ] #>      V1 V2 V3 V4 #> [1,]  1  1  1  1 #> [2,]  1  1  1  1 #> [3,]  1  1  1  1 #> [4,]  1  1  1  1 #> [5,]  1  1  1  1 solutions_matrix_1 <- batch_snf(     data_list,     settings_matrix,     distance_metrics_list = my_distance_metrics,     weights_matrix = weights_matrix ) #> [1] \"Row: 1/10 | Time remaining: 4 seconds\" #> [1] \"Row: 2/10 | Time remaining: 3 seconds\" #> [1] \"Row: 3/10 | Time remaining: 3 seconds\" #> [1] \"Row: 4/10 | Time remaining: 2 seconds\" #> [1] \"Row: 5/10 | Time remaining: 2 seconds\" #> [1] \"Row: 6/10 | Time remaining: 2 seconds\" #> [1] \"Row: 7/10 | Time remaining: 1 seconds\" #> [1] \"Row: 8/10 | Time remaining: 1 seconds\" #> [1] \"Row: 9/10 | Time remaining: 0 seconds\" #> [1] \"Row: 10/10 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 4 seconds.\" solutions_matrix_2 <- batch_snf(     data_list,     settings_matrix,     distance_metrics_list = my_distance_metrics ) #> [1] \"Row: 1/10 | Time remaining: 3 seconds\" #> [1] \"Row: 2/10 | Time remaining: 3 seconds\" #> [1] \"Row: 3/10 | Time remaining: 3 seconds\" #> [1] \"Row: 4/10 | Time remaining: 3 seconds\" #> [1] \"Row: 5/10 | Time remaining: 2 seconds\" #> [1] \"Row: 6/10 | Time remaining: 2 seconds\" #> [1] \"Row: 7/10 | Time remaining: 1 seconds\" #> [1] \"Row: 8/10 | Time remaining: 1 seconds\" #> [1] \"Row: 9/10 | Time remaining: 0 seconds\" #> [1] \"Row: 10/10 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 4 seconds.\" identical(     solutions_matrix_1,     solutions_matrix_2 ) # Try this on your machine - It'll evaluate to TRUE #> [1] TRUE weights_matrix <- generate_weights_matrix(     data_list,     nrow = nrow(settings_matrix),     fill = \"uniform\" # or fill = \"exponential\" )"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"custom-distance-metrics","dir":"Articles","previous_headings":"","what":"Custom distance metrics","title":"Distance Metrics","text":"remainder vignette deals supplying custom distance metrics (including custom feature weighting). Making use functionality require good understanding working functions R. can also supply custom distance metrics. Looking code one package-provided distance functions shows essential aspects well-formated distance function. function accept two arguments: df weights_row, give one output, distance_matrix. function doesn’t actually need make use weights don’t want . time data reaches distance metric function, (referred df) always: UID column least one variable column missing values data.frame (tibble) variable column names won’t altered values loaded data_list. example, consider abcd_anxiety raw data supplied metaSNF: ’s make look like distance metric functions expect see: want distance metric calculates Euclidean distance, also scales resulting matrix biggest allowed distance 1, look like : ’ll need mindful edge cases function run . example, function fail pairwise distances patients 0 (division 0 occur). specific situation ever happens, ’s probably something quite wrong data. ’re happy distance function working ’d like : can load custom distance_metrics_list:","code":"euclidean_distance #> function (df, weights_row)  #> { #>     weights <- format_weights_row(weights_row) #>     weighted_df <- as.matrix(df) %*% weights #>     distance_matrix <- as.matrix(stats::dist(weighted_df, method = \"euclidean\")) #>     return(distance_matrix) #> } #> <bytecode: 0x5617fc33c948> #> <environment: namespace:metasnf> head(abcd_anxiety) #> # A tibble: 6 × 2 #>   patient          cbcl_anxiety_r #>   <chr>                     <dbl> #> 1 NDAR_INV0567T2Y9              3 #> 2 NDAR_INV0GLZNC2W              1 #> 3 NDAR_INV0IZ157F8             NA #> 4 NDAR_INV0J4PYA5F              0 #> 5 NDAR_INV0OYE291Q              2 #> 6 NDAR_INV0SM1JLXQ              2 processed_abcd_anxiety <- abcd_anxiety |>     na.omit() |> # no NAs     dplyr::rename(\"subjectkey\" = \"patient\") |>     data.frame(row.names = \"subjectkey\")  head(processed_abcd_anxiety) #>                  cbcl_anxiety_r #> NDAR_INV0567T2Y9              3 #> NDAR_INV0GLZNC2W              1 #> NDAR_INV0J4PYA5F              0 #> NDAR_INV0OYE291Q              2 #> NDAR_INV0SM1JLXQ              2 #> NDAR_INV0Z87UJDR              0 my_scaled_euclidean <- function(df, weights_row) {     # this function won't apply the weights it is given     distance_matrix <- df |>         stats::dist(method = \"euclidean\") |>         as.matrix() # make sure it's formatted as a matrix     distance_matrix <- distance_matrix / max(distance_matrix)     return(distance_matrix) } my_scaled_euclidean(processed_abcd_anxiety)[1:5, 1:5] #>                  NDAR_INV0567T2Y9 NDAR_INV0GLZNC2W NDAR_INV0J4PYA5F #> NDAR_INV0567T2Y9              0.0              0.2              0.3 #> NDAR_INV0GLZNC2W              0.2              0.0              0.1 #> NDAR_INV0J4PYA5F              0.3              0.1              0.0 #> NDAR_INV0OYE291Q              0.1              0.1              0.2 #> NDAR_INV0SM1JLXQ              0.1              0.1              0.2 #>                  NDAR_INV0OYE291Q NDAR_INV0SM1JLXQ #> NDAR_INV0567T2Y9              0.1              0.1 #> NDAR_INV0GLZNC2W              0.1              0.1 #> NDAR_INV0J4PYA5F              0.2              0.2 #> NDAR_INV0OYE291Q              0.0              0.0 #> NDAR_INV0SM1JLXQ              0.0              0.0 my_distance_metrics <- generate_distance_metrics_list(     continuous_distances = list(         \"my_scaled_euclidean\" = my_scaled_euclidean     ) )"},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"requesting-metrics","dir":"Articles","previous_headings":"","what":"Requesting metrics","title":"Distance Metrics","text":"’s metric ’d like see added prewritten option included package, feel free post issue make pull request package’s GitHub.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"list-of-prewritten-distance-metrics-functions","dir":"Articles","previous_headings":"","what":"List of prewritten distance metrics functions","title":"Distance Metrics","text":"metrics can used . capable accepting applying custom weights provided weights_matrix. applies continuous, discrete, ordinal data Standard normalize data, use Euclidean distance applies continuous, discrete, ordinal data applies data Apply weights dataframe, calculate Euclidean distance, square results Apply square root weights dataframe, calculate Euclidean distance, square results Distance patients (1 * variable weight) summed variables","code":""},{"path":"https://branchlab.github.io/metasnf/articles/distance_metrics.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Distance Metrics","text":"Wang, Bo, Aziz M. Mezlini, Feyyaz Demir, Marc Fiume, Zhuowen Tu, Michael Brudno, Benjamin Haibe-Kains, Anna Goldenberg. 2014. “Similarity Network Fusion Aggregating Data Types Genomic Scale.” Nature Methods 11 (3): 333–37. https://doi.org/10.1038/nmeth.2810.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/feature_weights.html","id":"generating-and-using-the-weights-matrix","dir":"Articles","previous_headings":"","what":"Generating and Using the Weights Matrix","title":"Feature Weighting","text":"distance metrics used metasnf capable applying custom weights included features. code outlines generate use weights_matrix (dataframe containing feature weights) object. default, weights 1. batch_snf uses weights_matrix supplied. custom feature weights ’d like used can manually populate dataframe. ’s one column per variable (need worry column orders) number rows match number rows settings_matrix. just looking broaden space cluster solutions generate, can use built-randomization options weights: ’re happy weights_matrix, can pass batch_snf:","code":"library(metasnf)  # Make sure to throw in all the data you're interested in visualizing for this # data_list, including out-of-model measures and confounding variables. data_list <- generate_data_list(     list(abcd_h_income, \"household_income\", \"demographics\", \"ordinal\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(abcd_colour, \"favourite_colour\", \"demographics\", \"categorical\"),     list(abcd_anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(abcd_depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"patient\" )  summarize_dl(data_list) #>               name        type       domain length width #> 1 household_income     ordinal demographics    136     2 #> 2  pubertal_status  continuous demographics    136     2 #> 3 favourite_colour categorical demographics    136     2 #> 4          anxiety     ordinal    behaviour    136     2 #> 5        depressed     ordinal    behaviour    136     2 settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     min_k = 20,     max_k = 50,     seed = 42 ) #> [1] \"The global seed has been changed!\" weights_matrix <- generate_weights_matrix(     data_list,     nrow = 20 )  head(weights_matrix) #>      household_income pubertal_status colour cbcl_anxiety_r cbcl_depress_r #> [1,]                1               1      1              1              1 #> [2,]                1               1      1              1              1 #> [3,]                1               1      1              1              1 #> [4,]                1               1      1              1              1 #> [5,]                1               1      1              1              1 #> [6,]                1               1      1              1              1 # Random uniformly distributed values generate_weights_matrix(     data_list,     nrow = 5,     fill = \"uniform\" ) #>      household_income pubertal_status    colour cbcl_anxiety_r cbcl_depress_r #> [1,]       0.08161542       0.3198375 0.8328815      0.9943410      0.3955367 #> [2,]       0.40378037       0.4627980 0.3132912      0.7119147      0.9593465 #> [3,]       0.83551451       0.9353873 0.2794196      0.4951427      0.1132382 #> [4,]       0.59499701       0.5917005 0.7100717      0.8079317      0.2355968 #> [5,]       0.35140389       0.5460431 0.3481677      0.5611197      0.5104740 # Random exponentially distributed values generate_weights_matrix(     data_list,     nrow = 5,     fill = \"exponential\" ) #>      household_income pubertal_status    colour cbcl_anxiety_r cbcl_depress_r #> [1,]        0.5123907       0.1624127 1.6042481      3.7447548     1.53441037 #> [2,]        3.9471338       0.4178442 0.2354796      0.3647522     0.22186034 #> [3,]        0.4215409       0.2394908 0.1519102      0.8262260     0.03348363 #> [4,]        1.4107604       2.3230736 2.0428148      0.2279961     0.48877057 #> [5,]        0.1756311       0.5256458 1.3623835      0.1072554     0.24304379 batch_snf(     data_list = data_list,     settings_matrix = settings_matrix,     weights_matrix = weights_matrix )"},{"path":"https://branchlab.github.io/metasnf/articles/feature_weights.html","id":"the-nitty-gritty-of-how-weights-are-used","dir":"Articles","previous_headings":"","what":"The Nitty Gritty of How Weights are Used","title":"Feature Weighting","text":"specific implementation weights distance matrix calculations dependent distance metric used, can learn distance metrics vignette. aspect understand want know precisely weights used related SNF schemes. Depending scheme specified settings_matrix row, variable columns involved distance matrix calculation can differ substantially. example, domain scheme, variables domain concatenated prior distance matrix calculation. domains multiple types variables (e.g., continuous categorical), mean mixed distance metric (Gower’s method default) used, weights applied per-domain basis. ’s concrete example data set-SNF scheme can influence variable weighting process: consider generating data_list every single input dataframe contains 1 input variable. data_list processed exclusively using “individual” SNF scheme, feature weights won’t matter. individual SNF scheme calculates individual distance metrics every input dataframe separately fusing together SNF. Anytime distance matrix calculated, ’ll single variable , purpose feature weighting (changing relative contributions input variables distance matrix calculations) lost.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/getting_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"package? metaSNF package facilitates usage meta clustering paradigm described Caruana et al., 2006 similarity network fusion (SNF) data integration procedure developed Wang et al., 2014. package offers comprehensive suite tools assist users transforming raw patient data patient subtypes, decision making subtyping process, visualization along way strong emphasis context-specific utility principled validation results.  use meta clustering? Clustering algorithms seek solutions members cluster similar members distinct clusters dissimilar . sufficiently noisy datasets many qualitatively distinct solutions similar scores clustering quality exist, necessarily case top solution selected clustering algorithm also useful one user’s context. address issue, original meta clustering procedure Caruana et al., 2006 involved generating large number reasonable clustering solutions, clustering solutions qualitatively similar ones, user examine “meta clusters” find something seems like ’ll useful. use SNF? clinical data setting, often access patient data across wide range domains, imaging, genetics, biomarkers, demographics. trying extract subtypes information, direct concatenation data followed cluster analysis can result substantial amount lost (valuable) signal contained individual domain. Empirically, SNF demonstrated effectively integrate highly diverse patient data purposes clinical subtyping.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/getting_started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started","text":"package currently hosted GitHub (CRAN). easiest way install metasnf devtools package.","code":"install.packages(\"devtools\") # if you don't have it already  # By default, this will install the latest version of the package devtools::install_github(\"BRANCHlab/metasnf\")  # To ensure you are always installing a specific version of the package, #  you can manually specify a tagged release or a commit: devtools::install_github(\"BRANCHlab/metasnf@v0.2.0\")"},{"path":"https://branchlab.github.io/metasnf/articles/manhattan_plots.html","id":"data-set-up","dir":"Articles","previous_headings":"","what":"Data set-up","title":"Manhattan Plots","text":"example taken “complete example” vignette.","code":"library(metasnf)  # Start by making a data list containing all our dataframes to more easily # identify subjects without missing data full_data_list <- generate_data_list(     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(abcd_h_income, \"household_income\", \"demographics\", \"continuous\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(abcd_anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(abcd_depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"patient\" )  # Partition into a data and target list (optional) data_list <- full_data_list[1:3] target_list <- full_data_list[4:5]  # Build space of settings to cluster over settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     min_k = 20,     max_k = 50,     seed = 42 )  # Clustering solutions_matrix <- batch_snf(data_list, settings_matrix)  # Calculate p-values between cluster solutions and features extended_solutions_matrix <- extend_solutions(     solutions_matrix,     data_list = data_list,     target_list = target_list,     min_pval = 1e-10 # p-values below 1e-10 will be thresholded to 1e-10 )"},{"path":"https://branchlab.github.io/metasnf/articles/manhattan_plots.html","id":"associations-with-multiple-cluster-solutions-esm_manhattan_plot","dir":"Articles","previous_headings":"","what":"Associations with Multiple Cluster Solutions (esm_manhattan_plot)","title":"Manhattan Plots","text":"bit unwieldy plot try looking many solutions time, can handy intend just examining cluster solutions.","code":"esm_manhattan <- esm_manhattan_plot(     extended_solutions_matrix[1:5, ],     neg_log_pval_thresh = 5,     threshold = 0.05,     point_size = 3,     jitter_width = 0.1,     jitter_height = 0.1,     plot_title = \"Variable-Solution Associations\",     text_size = 14,     bonferroni_line = TRUE )  ggplot2::ggsave(     \"esm_manhattan.png\",     esm_manhattan,     height = 5,     width = 8,     dpi = 100 )"},{"path":"https://branchlab.github.io/metasnf/articles/manhattan_plots.html","id":"associations-with-meta-clusters-mc_manhattan_plot","dir":"Articles","previous_headings":"","what":"Associations with Meta Clusters (mc_manhattan_plot)","title":"Manhattan Plots","text":"mc_manhattan_plot function can used meta clustering efficiently examine entire space generated cluster solutions.","code":"# Calculate pairwise similarities between cluster solutions solutions_matrix_aris <- calc_aris(solutions_matrix)  # Extract hierarchical clustering order of the cluster solutions meta_cluster_order <- get_matrix_order(solutions_matrix_aris)  # Create a base heatmap for visual meta clustering ari_hm <- adjusted_rand_index_heatmap(     solutions_matrix_aris,     order = meta_cluster_order )  # Identify meta cluster boundaries # This can also be by trial & error if you do not wish to use the shiny app. shiny_annotator(ari_hm)  # Result of meta cluster examination split_vec <- c(2, 5, 12, 17)  # Create a base heatmap for visual meta clustering ari_hm <- adjusted_rand_index_heatmap(     solutions_matrix_aris,     order = meta_cluster_order,     split_vector = split_vec )  # Extracting representative solutions from each defined meta cluster rep_solutions <- get_representative_solutions(     solutions_matrix_aris,     split_vector = split_vec,     order = meta_cluster_order,     extended_solutions_matrix )  mc_manhattan <- mc_manhattan_plot(     rep_solutions,     data_list = data_list,     target_list = target_list,     point_size = 3,     text_size = 12,     plot_title = \"Variable-Meta Cluster Associations\",     threshold = 0.05,     neg_log_pval_thresh = 5 )  ggplot2::ggsave(     \"mc_manhattan_clean.png\",     mc_manhattan,     height = 10,     width = 10,     dpi = 100 )"},{"path":"https://branchlab.github.io/metasnf/articles/manhattan_plots.html","id":"associations-with-a-key-variable","dir":"Articles","previous_headings":"","what":"Associations with a Key Variable","title":"Manhattan Plots","text":"can also visualize associations specific variable interest rather cluster solutions. thing needed plot data_list - clustering necessary.","code":"var_manhattan <- var_manhattan_plot(     data_list,     key_var = \"household_income\",     plot_title = \"Correlation of Features with Household Income\",     text_size = 16,     neg_log_pval_thresh = 3,     threshold = 0.05 ) ggplot2::ggsave(     \"var_manhattan.png\",     var_manhattan,     height = 7,     width = 12,     dpi = 100 )"},{"path":"https://branchlab.github.io/metasnf/articles/parallel_processing.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Parallel Processing","text":"","code":"# Load the package library(metasnf)  # Setting up the data data_list <- generate_data_list(     list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(abcd_income, \"household_income\", \"demographics\", \"continuous\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\" )  # Specifying 5 different sets of settings for SNF settings_matrix <- generate_settings_matrix(     data_list,     nrow = 10,     max_k = 40,     seed = 42 )  solutions_matrix <- batch_snf(     data_list,     settings_matrix,     processes = \"max\" # Can also be a specific integer )"},{"path":"https://branchlab.github.io/metasnf/articles/parallel_processing.html","id":"including-a-progress-bar","dir":"Articles","previous_headings":"","what":"Including a progress bar","title":"Parallel Processing","text":"Use progressr package visualize progress parallel batch_snf.","code":"progressr::with_progress({     solutions_matrix <- batch_snf(         data_list,         settings_matrix,         processes = \"max\"     ) })"},{"path":"https://branchlab.github.io/metasnf/articles/parallel_processing.html","id":"number-of-processes","dir":"Articles","previous_headings":"","what":"Number of processes","title":"Parallel Processing","text":"Setting processes “max” make use many cores R can find. want dial things back little, can specify precisely number processes want: find many processes access (least, many metasnf think access ), use availableCores() function future package:","code":"solutions_matrix <- batch_snf(     data_list,     settings_matrix,     processes = 4 ) library(future)  availableCores()"},{"path":"https://branchlab.github.io/metasnf/articles/parallel_processing.html","id":"benchmarks","dir":"Articles","previous_headings":"","what":"Benchmarks","title":"Parallel Processing","text":"Results show benchmarking done following two systems: Intel Xeon E312xx (SandyBridge, IBRS update) 24 cores 129 GB RAM Intel(R) Core(TM) i5-4460 CPU @ 3.20GHz 4 cores 16.7 GB RAM","code":""},{"path":"https://branchlab.github.io/metasnf/articles/parallel_processing.html","id":"code","dir":"Articles","previous_headings":"Benchmarks","what":"Code","title":"Parallel Processing","text":"","code":"library(metasnf)  # Setting up the data data_list <- generate_data_list(     list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(abcd_income, \"household_income\", \"demographics\", \"continuous\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\" )  time_data <- data.frame(     snf_rows = as.numeric(),     processes = as.numeric(),     user_time = as.numeric(),     system_time = as.numeric(),     elapsed_time = as.numeric() )  # Code for HPC for (nproc in c(1, 24)) {     for (rows in c(1, 12, 24, 48, 96, 240)) {         settings_matrix <- generate_settings_matrix(             data_list,             nrow = rows,             max_k = 40,             seed = 42         )         start <- proc.time()         solutions_matrix <- batch_snf(             data_list,             settings_matrix,             processes = nproc         )         end <- proc.time()         time <- end - start         time_data <- rbind(             time_data,             data.frame(                 snf_rows = rows,                 processes = nproc,                 user_time = time[\"user.self\"] + time[\"user.child\"],                 sys_time = time[\"sys.self\"] + time[\"sys.child\"],                 elapsed_time = time[\"elapsed\"]             )         )     } }  # Code for local for (nproc in c(1, 4)) {     for (rows in c(1, 12, 24, 48, 96, 240)) {         settings_matrix <- generate_settings_matrix(             data_list,             nrow = rows,             max_k = 40,             seed = 42         )         start <- proc.time()         solutions_matrix <- batch_snf(             data_list,             settings_matrix,             processes = nproc         )         end <- proc.time()         time <- end - start         time_data <- rbind(             time_data,             data.frame(                 snf_rows = rows,                 processes = nproc,                 user_time = time[\"user.self\"] + time[\"user.child\"],                 sys_time = time[\"sys.self\"] + time[\"sys.child\"],                 elapsed_time = time[\"elapsed\"]             )         )     } }"},{"path":"https://branchlab.github.io/metasnf/articles/parallel_processing.html","id":"results","dir":"Articles","previous_headings":"Benchmarks","what":"Results","title":"Parallel Processing","text":"local machine access 4 cores scales quite well parallel toy data.  24 cores requested - quite massive difference time taken!  figure zooms performances locations. notable observations: Single-threaded HPC (red circles) slower single-threaded local machine (red triangles) 100 rows SNF, max-process local machine (green triangles) faster max process HPC (blue circles) point , neither super computer cluster parallel processing necessarily improve run times circumstances. ’re plowing big datasets running lots SNF, parallelization probably helpful.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"the-basic-settings_matrix","dir":"Articles","previous_headings":"","what":"The basic settings_matrix","title":"The Settings Matrix","text":"minimal settings_matrix can obtained providing data_list object. resulting columns : row_id: label keep track row alpha: alpha (also referred sigma eta) hyperparameter SNF k: K (nearest neighbours) hyperparameter similarity matrix calculations SNF t: T (number iterations) hyperparameter used SNF snf_scheme: SNF “scheme” used convert initial provided dataframes final fused network (appendix “Less Simple Example” vignette) clust_alg: clustering algorithm applied final fused network. default, varies pre-provided options (1) spectral clustering number clusters determined eigen-gap heuristic (2) thing using rotation cost heuristic. can learn using parameter clustering algorithnms vignette. Columns ending dist: distance metric used various types variables (distance metrics vignette) Columns starting inc: Whether corresponding dataframe included (1) excluded (0) row varying values columns, can define distinct SNF pipelines give rise broader space possibly patient subtype solutions. following sections outline use generate_settings_matrix build wide range settings hopefully help find subtyping solution useful purposes.","code":"library(metasnf)  # It's best to list out the individual elements with names, i.e. data = ..., #  name = ..., domain = ..., type = ..., but we'll skip that here for brevity. data_list <- generate_data_list(     list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(abcd_h_income, \"household_income\", \"demographics\", \"continuous\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\" )  settings_matrix <- generate_settings_matrix(     data_list )  head(settings_matrix) ##  [1] row_id                    alpha                     ##  [3] k                         t                         ##  [5] snf_scheme                clust_alg                 ##  [7] cont_dist                 disc_dist                 ##  [9] ord_dist                  cat_dist                  ## [11] mix_dist                  inc_cortical_thickness    ## [13] inc_cortical_surface_area inc_subcortical_volume    ## [15] inc_household_income      inc_pubertal_status       ## <0 rows> (or 0-length row.names)"},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"adding-random-rows","dir":"Articles","previous_headings":"","what":"Adding random rows","title":"The Settings Matrix","text":"specifying parameters beyond number rows created, function randomly (sensibly) vary values matrix. alpha k hyperparameters varied 0.3 0.8 10 100 respectively based suggestion authors SNF. t hyperparameter, controls many iterations updates occur fused network SNF, stays fixed 20, default. value (20) empirically demonstrated sufficient achieving convergence matrix, varying doesn’t seem much relevance kinds cluster solutions produced. snf_scheme column vary 1 3, outlines 3 differente schemes available. clust_alg column vary randomly (1) spectral clustering using eigen-gap heuristic (2) spectral clustering using rotation cost heuristic default. distance columns always 1 default, just use default distance metrics simple Euclidean anything numeric Gower’s distance anything mixed categorical. Controlling scheme, clustering algorithms, distance metrics discussed details separate vignettes linked . Controlling remaining options shown .","code":"# Through minimums and maximums settings_matrix <- generate_settings_matrix(     data_list,     nrow = 100, )  head(settings_matrix) ##   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist ## 1      1   0.6 39 20          1         2         1         1        1        1 ## 2      2   0.8 75 20          2         2         1         1        1        1 ## 3      3   0.4 51 20          2         2         1         1        1        1 ## 4      4   0.6 77 20          1         2         1         1        1        1 ## 5      5   0.6 25 20          3         2         1         1        1        1 ## 6      6   0.6 27 20          2         2         1         1        1        1 ##   mix_dist inc_cortical_thickness inc_cortical_surface_area ## 1        1                      1                         1 ## 2        1                      1                         1 ## 3        1                      1                         0 ## 4        1                      1                         1 ## 5        1                      0                         1 ## 6        1                      1                         1 ##   inc_subcortical_volume inc_household_income inc_pubertal_status ## 1                      1                    1                   1 ## 2                      1                    1                   1 ## 3                      1                    1                   1 ## 4                      1                    0                   1 ## 5                      1                    1                   1 ## 6                      1                    1                   1"},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"alpha-k-and-t","dir":"Articles","previous_headings":"","what":"Alpha, k, and t","title":"The Settings Matrix","text":"can control parameters either providing vector values ’d like randomly sample specifying minimum maximum range.","code":"# Through minimums and maximums settings_matrix <- generate_settings_matrix(     data_list,     nrow = 100,     min_k = 10,     max_k = 60,     min_alpha = 0.3,     max_alpha = 0.8,     min_t = 15,     max_t = 30 ) ## Warning in add_settings_matrix_rows(settings_matrix = settings_matrix_base, : ## The original SNF paper recommends a t between 10 to 20. Empirically, setting t ## above 20 is always sufficient for SNF to converge. This warning is raised ## anytime a user tries to set a t value smaller than 10 or larger than 20. # Through specific value sampling settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     k_values = c(10, 25, 50),     alpha_values = c(0.4, 0.8),     t_values = c(20, 30) ) ## Warning in add_settings_matrix_rows(settings_matrix = settings_matrix_base, : ## The original SNF paper recommends a t between 10 to 20. Empirically, setting t ## above 20 is always sufficient for SNF to converge. This warning is raised ## anytime a user tries to set a t value smaller than 10 or larger than 20."},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"inclusion-columns","dir":"Articles","previous_headings":"","what":"Inclusion columns","title":"The Settings Matrix","text":"Bounds number input dataframes removed well way number removed chosen can controlled. default, generate_settings_matrix pick random value 0 1 less total number available dataframes based exponential probability distribution. exponential distribution makes likely small number dataframes dropped much less likely large number dataframes dropped. can control distribution changing dropout_dist value “uniform” (result much higher number dataframes dropped average) “none” (result dataframes dropped). bounds number dataframes can dropped can controlled using min_removed_inputs max_removed_inputs:","code":"# Exponential dropping settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     dropout_dist = \"exponential\" # the default behaviour )  head(settings_matrix) ##   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist ## 1      1   0.4 63 20          2         2         1         1        1        1 ## 2      2   0.3 70 20          1         1         1         1        1        1 ## 3      3   0.5 96 20          2         1         1         1        1        1 ## 4      4   0.6 21 20          2         2         1         1        1        1 ## 5      5   0.7 61 20          2         1         1         1        1        1 ## 6      6   0.7 95 20          1         1         1         1        1        1 ##   mix_dist inc_cortical_thickness inc_cortical_surface_area ## 1        1                      1                         1 ## 2        1                      1                         1 ## 3        1                      1                         1 ## 4        1                      1                         1 ## 5        1                      1                         1 ## 6        1                      1                         1 ##   inc_subcortical_volume inc_household_income inc_pubertal_status ## 1                      1                    1                   1 ## 2                      1                    1                   1 ## 3                      1                    1                   1 ## 4                      1                    0                   1 ## 5                      1                    0                   1 ## 6                      1                    1                   1 # Uniform dropping settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     dropout_dist = \"uniform\" )  head(settings_matrix) ##   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist ## 1      1   0.3 69 20          2         1         1         1        1        1 ## 2      2   0.5 87 20          2         2         1         1        1        1 ## 3      3   0.5 10 20          2         1         1         1        1        1 ## 4      4   0.8 80 20          2         1         1         1        1        1 ## 5      5   0.5 40 20          2         1         1         1        1        1 ## 6      6   0.7 70 20          1         1         1         1        1        1 ##   mix_dist inc_cortical_thickness inc_cortical_surface_area ## 1        1                      1                         1 ## 2        1                      0                         1 ## 3        1                      0                         0 ## 4        1                      1                         1 ## 5        1                      1                         1 ## 6        1                      1                         1 ##   inc_subcortical_volume inc_household_income inc_pubertal_status ## 1                      1                    0                   1 ## 2                      0                    1                   0 ## 3                      1                    0                   0 ## 4                      1                    1                   1 ## 5                      1                    1                   0 ## 6                      0                    1                   1 # No dropping settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     dropout_dist = \"none\" )  head(settings_matrix) ##   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist ## 1      1   0.3 83 20          3         2         1         1        1        1 ## 2      2   0.7 45 20          1         2         1         1        1        1 ## 3      3   0.5 30 20          1         1         1         1        1        1 ## 4      4   0.8 19 20          3         1         1         1        1        1 ## 5      5   0.6 64 20          2         2         1         1        1        1 ## 6      6   0.8 76 20          3         2         1         1        1        1 ##   mix_dist inc_cortical_thickness inc_cortical_surface_area ## 1        1                      1                         1 ## 2        1                      1                         1 ## 3        1                      1                         1 ## 4        1                      1                         1 ## 5        1                      1                         1 ## 6        1                      1                         1 ##   inc_subcortical_volume inc_household_income inc_pubertal_status ## 1                      1                    1                   1 ## 2                      1                    1                   1 ## 3                      1                    1                   1 ## 4                      1                    1                   1 ## 5                      1                    1                   1 ## 6                      1                    1                   1 settings_matrix <- generate_settings_matrix(     data_list,     nrow = 20,     min_removed_inputs = 3 )  # No row will exclude fewer than 3 dataframes during SNF head(settings_matrix) ##   row_id alpha  k  t snf_scheme clust_alg cont_dist disc_dist ord_dist cat_dist ## 1      1   0.5 94 20          2         2         1         1        1        1 ## 2      2   0.6 22 20          1         2         1         1        1        1 ## 3      3   0.7 38 20          3         2         1         1        1        1 ## 4      4   0.7 69 20          1         2         1         1        1        1 ## 5      5   0.4 73 20          1         1         1         1        1        1 ## 6      6   0.6 39 20          1         2         1         1        1        1 ##   mix_dist inc_cortical_thickness inc_cortical_surface_area ## 1        1                      0                         0 ## 2        1                      1                         0 ## 3        1                      0                         0 ## 4        1                      0                         1 ## 5        1                      0                         1 ## 6        1                      0                         1 ##   inc_subcortical_volume inc_household_income inc_pubertal_status ## 1                      0                    1                   1 ## 2                      0                    0                   1 ## 3                      1                    1                   0 ## 4                      1                    0                   0 ## 5                      0                    0                   1 ## 6                      0                    0                   1"},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"grid-searching","dir":"Articles","previous_headings":"","what":"Grid searching","title":"The Settings Matrix","text":"interested grid searching perhaps just specific set alpha k values, may want consider varying parameters keeping everything else fixed:","code":"settings_matrix <- generate_settings_matrix(     data_list,     nrow = 10,     alpha_values = c(0.3, 0.5, 0.8),     k_values = c(20, 40, 60),     dropout_dist = \"none\" )"},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"assembling-a-settings_matrix-in-pieces","dir":"Articles","previous_headings":"","what":"Assembling a settings_matrix in pieces","title":"The Settings Matrix","text":"Rather varying everything equally , may interested looking “chunks” solution spaces based distinct settings matrices. example, may want look 100 solutions generated k = 50 look another 100 solutions generated k = 80. can absolutely build two separate settings matrices, can also build single matrix parts using add_settings_matrix_rows function:","code":"settings_matrix <- generate_settings_matrix(     data_list,     nrow = 50,     k_values = 50 )  settings_matrix <- add_settings_matrix_rows(     settings_matrix,     nrow = 50,     k_values = 80 )  dim(settings_matrix) ## [1] 100  16 settings_matrix$\"k\" ##   [1] 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 ##  [26] 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 ##  [51] 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 ##  [76] 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80"},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"manual-adjustments","dir":"Articles","previous_headings":"","what":"Manual adjustments","title":"The Settings Matrix","text":"Don’t forget settings matrix just dataframe. can always go modify things wish, risk generating duplicate invalid rows package functions prevented.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/settings_matrix.html","id":"matrix-building-failed","dir":"Articles","previous_headings":"","what":"“Matrix building failed”","title":"The Settings Matrix","text":"generate_settings_matrix never build duplicate rows. consequence request large number rows small range possible values vary , impossible matrix built. example, ’s way generate 10 unique rows thing allowed vary clustering algorithm (1 2) used - 2 rows ever created. encounter error “Matrix building failed”, try generate fewer rows little less strict values allowed.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"data-set-up","dir":"Articles","previous_headings":"","what":"Data set-up","title":"Similarity Matrices","text":"","code":"library(metasnf)  # Generate data_list data_list <- generate_data_list(     list(         data = expression_df,         name = \"expression_data\",         domain = \"gene_expression\",         type = \"continuous\"     ),     list(         data = methylation_df,         name = \"methylation_data\",         domain = \"gene_methylation\",         type = \"continuous\"     ),     list(         data = gender_df,         name = \"gender\",         domain = \"demographics\",         type = \"categorical\"     ),     list(         data = diagnosis_df,         name = \"diagnosis\",         domain = \"clinical\",         type = \"categorical\"     ),     list(         data = age_df,         name = \"age\",         domain = \"demographics\",         type = \"discrete\"     ),     uid = \"patient_id\" )  # Generate settings_matrix settings_matrix <- generate_settings_matrix(     data_list,     nrow = 1,     max_k = 40,     seed = 42 ) ## [1] \"The global seed has been changed!\" # Run SNF and clustering batch_snf_results <- batch_snf(     data_list,     settings_matrix,     return_similarity_matrices = TRUE ) ## [1] \"Row: 1/1 | Time remaining: 0 seconds\" ## [1] \"Total time taken: 1 seconds.\" solutions_matrix <- batch_snf_results$\"solutions_matrix\" similarity_matrices <- batch_snf_results$\"similarity_matrices\"  # The first (and only) similarity matrix: similarity_matrix <- similarity_matrices[[1]]  # The first (and only) cluster solution: cluster_solution <- get_cluster_solutions(solutions_matrix)$\"1\""},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"visualize-similarity-matrices-sorted-by-cluster-label","dir":"Articles","previous_headings":"","what":"Visualize similarity matrices sorted by cluster label","title":"Similarity Matrices","text":"similarity_matrix_heatmap wrapper ComplexHeatmap::Heatmap, convenient default transformations parameters viewing similarity matrix. default transformations include plotting log(Similarity) rather default similarity matrix well rescaling diagonal matrix average value -diagonals. Additionally, similarity matrix gets reordered according provided cluster solution.","code":"similarity_matrix_hm <- similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     cluster_solution = cluster_solution,     heatmap_height = grid::unit(10, \"cm\"),     heatmap_width = grid::unit(10, \"cm\") )  # Export heatmaps using the `save_heatmap` function save_heatmap(     heatmap = similarity_matrix_hm,     path = \"./similarity_matrix_heatmap.png\",     width = 410,     height = 330,     res = 80 )"},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"annotations","dir":"Articles","previous_headings":"","what":"Annotations","title":"Similarity Matrices","text":"One piece functionality provided ComplexHeatmap::Heatmap ability supply visual annotations along rows columns heatmap. can always build annotations using standard approaches outline ComplexHeatmap Complete Reference. addition , package offers convenient functionality specify regular heatmap annotations barplot annotations directly provided dataframe data_list (). example , make use data supplied data_list. colours red3, pink1, etc. built-R colours can browse calling colours(). reference, code shows achieve annotations using standard ComplexHeatmap syntax. Take look ComplexHeatmap Complete Reference learn possible package.","code":"annotated_sm_hm <- similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     cluster_solution = cluster_solution,     scale_diag = \"mean\",     log_graph = TRUE,     data_list = data_list,     left_hm = list(         \"Diagnosis\" = \"diagnosis\"     ),     top_hm = list(         \"Gender\" = \"gender\"     ),     top_bar = list(         \"Age\" = \"age\"     ),     annotation_colours = list(         Diagnosis = c(             \"definite asthma\" = \"red3\",             \"possible asthma\" = \"pink1\",             \"no asthma\" = \"bisque1\"         ),         Gender = c(             \"female\" = \"purple\",             \"male\" = \"lightgreen\"         )     ),     heatmap_height = grid::unit(10, \"cm\"),     heatmap_width = grid::unit(10, \"cm\") )  save_heatmap(     heatmap = annotated_sm_hm,     path = \"./annotated_sm_heatmap.png\",     width = 500,     height = 440,     res = 80 ) merged_df <- collapse_dl(data_list) order <- sort(cluster_solution, index.return = TRUE)$\"ix\" merged_df <- merged_df[order, ]  top_annotations <- ComplexHeatmap::HeatmapAnnotation(     Age = ComplexHeatmap::anno_barplot(merged_df$\"age\"),     Gender = merged_df$\"gender\",     col = list(         Gender = c(             \"female\" = \"purple\",             \"male\" = \"lightgreen\"         )     ),     show_legend = TRUE )  left_annotations <- ComplexHeatmap::rowAnnotation(     Diagnosis = merged_df$\"diagnosis\",     col = list(         Diagnosis = c(             \"definite asthma\" = \"red3\",             \"possible asthma\" = \"pink1\",             \"no asthma\" = \"bisque1\"         )     ),     show_legend = TRUE )  similarity_matrix_heatmap(     similarity_matrix = similarity_matrix,     cluster_solution = cluster_solution,     scale_diag = \"mean\",     log_graph = TRUE,     data = df,     top_annotation = top_annotations,     left_annotation = left_annotations )"},{"path":"https://branchlab.github.io/metasnf/articles/similarity_matrix_heatmap.html","id":"more-on-sorting","dir":"Articles","previous_headings":"","what":"More on sorting","title":"Similarity Matrices","text":"aware ordering data similarity matrix influenced supply values cluster_solution order parameters. don’t think data lining properly, consider manually making sure similarity_matrix rows columns sorted preference (e.g., based cluster) order data matches. easier dataframe data_list, data_list forces patients sorted unique IDs upon generation.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/snf_schemes.html","id":"individual","dir":"Articles","previous_headings":"","what":"(1) “Individual”","title":"SNF Schemes","text":"snf_scheme = 1: individual input dataframe provided data list combined final network SNF directly. identical treating data list like WALL parameter original SNF function. limitation (strength) approach integration biased towards information sources (domains) representation within list. example, happened 5 demographic dataframes 10 neuroimaging dataframes, get integration biased towards neuroimaging data.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/snf_schemes.html","id":"two-step","dir":"Articles","previous_headings":"","what":"(2) “Two-step”","title":"SNF Schemes","text":"snf_scheme = 2: Input dataframes combined within user-specified data domains one round SNF combined across domains second round SNF. scheme intended reduce weighting issues individual approach. final integration done combining single demographic similarity matrix single neuroimaging similarity matrix, resulting balanced integration domain level. “three-step” greater SNF scheme accounting dataframe subdomains subsubdomains time, ultimately approach serve well increase space clustering solutions access .","code":""},{"path":"https://branchlab.github.io/metasnf/articles/snf_schemes.html","id":"domain","dir":"Articles","previous_headings":"","what":"(3) “Domain”","title":"SNF Schemes","text":"snf_scheme = 3: Input dataframes combined within domains concatenation combined single fused network SNF. way also quite similar spirit original SNF examples, initial distance matrix done entire domain time. approach can lead greatest information loss distance matrix calculation step, still offers additional way generate distinct cluster solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/articles/snf_schemes.html","id":"custom-snf-schemes","dir":"Articles","previous_headings":"","what":"Custom SNF schemes","title":"SNF Schemes","text":"simple interface add custom SNF schemes time. different scheme like use, feel free submit suggestion package’s issues page try poking around snf scheme source code !","code":""},{"path":"https://branchlab.github.io/metasnf/articles/stability_measures.html","id":"data-set-up","dir":"Articles","previous_headings":"","what":"Data set-up","title":"Stability Measures and Consensus Clustering","text":"added part data set-, ’ll also calculate subsamples data_list. data_list_subsamples contains list 3 variations full data_list. variation random 80% original patients.","code":"library(metasnf)  # Generate data_list data_list <- generate_data_list(     list(         data = gender_df,         name = \"gender\",         domain = \"demographics\",         type = \"categorical\"     ),     list(         data = diagnosis_df,         name = \"diagnosis\",         domain = \"clinical\",         type = \"categorical\"     ),     list(         data = age_df,         name = \"age\",         domain = \"demographics\",         type = \"discrete\"     ),     uid = \"patient_id\" )  # Generate settings_matrix settings_matrix <- generate_settings_matrix(     data_list,     nrow = 3,     max_k = 40,     seed = 42 ) data_list_subsamples <- subsample_data_list(     data_list,     n_subsamples = 3, # calculate 30 subsamples     subsample_fraction = 0.8 # for each subsample, use random 80% of patients )"},{"path":"https://branchlab.github.io/metasnf/articles/stability_measures.html","id":"pairwise-adjusted-rand-indices-across-subsamples","dir":"Articles","previous_headings":"","what":"Pairwise Adjusted Rand Indices Across Subsamples","title":"Stability Measures and Consensus Clustering","text":"pairwise_aris dataframe contains mean standard deviation pairwise adjusted Rand indices patients row settings matrix.","code":"pairwise_aris <- subsample_pairwise_aris(     data_list_subsamples,     settings_matrix )"},{"path":"https://branchlab.github.io/metasnf/articles/stability_measures.html","id":"persistence-of-co-clustering-across-subsamples","dir":"Articles","previous_headings":"","what":"Persistence of Co-Clustering Across Subsamples","title":"Stability Measures and Consensus Clustering","text":"fraction_clustered_together function calculates every pair patients clustered together full sample, often continued cluster together data subsamples.","code":"# Run SNF and clustering solutions_matrix <- batch_snf(     data_list,     settings_matrix )  fraction_together <- fraction_clustered_together(     data_list_subsamples,     settings_matrix,     solutions_matrix )"},{"path":"https://branchlab.github.io/metasnf/articles/stability_measures.html","id":"co-clustering-heatmaps","dir":"Articles","previous_headings":"","what":"Co-clustering Heatmaps","title":"Stability Measures and Consensus Clustering","text":"can visualize co-clustering across resamples single row settings matrix using generate_cocluster_data cocluster_heatmap functions. cocluster_heatmap work every pair patients part subsampled data least 1 time. ’ll see descriptive warning didn’t end happening data_list_subsamples. can easily resolved increasing number subsamples examine subsample fraction. cocluster_data list two matrices: same_solution: patient x patient matrix cell number subsamples contained patients same_cluster: patient x patient matrix cell number subsamples patients clustered together matrix automatically calculated plotted cocluster_heatmap function. can pull patient order heatmap follows: order can now applied data data_list get patient order shown heatmap: default, generate_cocluster_data operates single row settings matrix essentially just summarizes data across resamplings. can also pool together results several rows using pooled_cocluster_heatmap function follows.","code":"data_list_subsamples <- subsample_data_list(     data_list,     n_subsamples = 30, # calculate 30 subsamples     subsample_fraction = 0.8 # for each subsample, use random 80% of patients )  cocluster_data <- generate_cocluster_data(     data_list = data_list,     data_list_subsamples = data_list_subsamples,     settings_matrix_row = settings_matrix[1, ] ) same_cluster <- cocluster_data$\"same_cluster\" same_solution <- cocluster_data$\"same_solution\"  cocluster_matrix <- same_cluster / same_solution hm <- cocluster_heatmap(cocluster_data)  hm hm <- ComplexHeatmap::draw(hm) order <- ComplexHeatmap::row_order(hm) # The order of patients as they appear in the heatmap data_list[[1]]$\"data\"[order, \"subjectkey\"] cocluster_data_2 <- generate_cocluster_data(     full_data_list = data_list,     data_list_subsamples,     settings_matrix[2, ] )  cocluster_data_3 <- generate_cocluster_data(     full_data_list = data_list,     data_list_subsamples,     settings_matrix[3, ] )  pooled_cocluster_heatmap(     cocluster_list = list(         cocluster_data,         cocluster_data_2,         cocluster_data_3     ) )"},{"path":"https://branchlab.github.io/metasnf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Prashanth Velayudhan. Author, maintainer. Nicholas Chan. Author. Xiaoqiao Xu. Author. Prajkta Kallurkar. Author. Madeline Couse. Author. Julia Smith. Author. Maria T Secara. Author. Nick Denson. Author. Stephanie H Ameis. Author. Ana Patricia Balbon. Author. Adam Taback. Author. Brian Cox. Author. Shihao Ma. Author. Anna Goldenberg. Author. Bo Wang. Author. Linda T Hiraki. Author. Anne L Wheeler. Author, thesis advisor. Jasbir Dhaliwal. Author. Colin Hawco. Author. Lauren Erdman. Author.","code":""},{"path":"https://branchlab.github.io/metasnf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Velayudhan P, Chan N, Xu X, Kallurkar P, Couse M, Smith J, Secara M, Denson N, Ameis S, Balbon , Taback , Cox B, Ma S, Goldenberg , Wang B, Hiraki L, Wheeler , Dhaliwal J, Hawco C, Erdman L (2024). metasnf: Meta Clustering Similarity Network Fusion. R package version 0.6.1, https://branchlab.github.io/metasnf/.","code":"@Manual{,   title = {metasnf: Meta Clustering with Similarity Network Fusion},   author = {Prashanth Velayudhan and Nicholas Chan and Xiaoqiao Xu and Prajkta Kallurkar and Madeline Couse and Julia Smith and Maria T Secara and Nick Denson and Stephanie H Ameis and Ana Patricia Balbon and Adam Taback and Brian Cox and Shihao Ma and Anna Goldenberg and Bo Wang and Linda T Hiraki and Anne L Wheeler and Jasbir Dhaliwal and Colin Hawco and Lauren Erdman},   year = {2024},   note = {R package version 0.6.1},   url = {https://branchlab.github.io/metasnf/}, }"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/index.html","id":"brief-overview","dir":"","previous_headings":"","what":"Brief Overview","title":"Meta Clustering with Similarity Network Fusion","text":"metasnf package facilitates usage meta clustering paradigm described (Caruana et al. 2006) similarity network fusion (SNF) data integration procedure developed (Wang et al. 2014). package offers comprehensive suite tools assist users transforming raw patient data patient subtypes, decision making subtyping process, visualization along way strong emphasis context-specific utility principled validation results.","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Meta Clustering with Similarity Network Fusion","text":"need R version 4.1.0 higher install package. recommend installing latest development version package (best stuff!):","code":"# Always get the latest version devtools::install_github(\"BRANCHlab/metasnf\")  # Install a specific tagged version devtools::install_github(\"BRANCHlab/metasnf@v0.5.0\")"},{"path":"https://branchlab.github.io/metasnf/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Meta Clustering with Similarity Network Fusion","text":"extremely minimal usage package looks something like : Check tutorial vignettes learn package can used: Simple usage package Complex usage package tutorials can found “articles” section documentation home page: https://branchlab.github.io/metasnf/index.html","code":"# Load the package library(metasnf)  # Setting up the data data_list <- generate_data_list(     list(abcd_cort_t, \"cortical_thickness\", \"neuroimaging\", \"continuous\"),     list(abcd_cort_sa, \"cortical_surface_area\", \"neuroimaging\", \"continuous\"),     list(abcd_subc_v, \"subcortical_volume\", \"neuroimaging\", \"continuous\"),     list(abcd_income, \"household_income\", \"demographics\", \"continuous\"),     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     uid = \"patient\" )  # Specifying 5 different sets of settings for SNF settings_matrix <- generate_settings_matrix(     data_list,     nrow = 5,     max_k = 40,     seed = 42 ) #> [1] \"The global seed has been changed!\"  # This matrix has clustering solutions for each of the 5 SNF runs! solutions_matrix <- batch_snf(data_list, settings_matrix) #> [1] \"Row: 1/5 | Time remaining: 1 seconds\" #> [1] \"Row: 2/5 | Time remaining: 1 seconds\" #> [1] \"Row: 3/5 | Time remaining: 0 seconds\" #> [1] \"Row: 4/5 | Time remaining: 0 seconds\" #> [1] \"Row: 5/5 | Time remaining: 0 seconds\" #> [1] \"Total time taken: 1 seconds.\""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Meta Clustering with Similarity Network Fusion","text":"use meta clustering? Clustering algorithms seek solutions members cluster similar members distinct clusters dissimilar . sufficiently noisy datasets many qualitatively distinct solutions similar scores clustering quality exist, necessarily case top solution selected clustering algorithm also useful one user’s context. address issue, original meta clustering procedure Caruana et al., 2006 involved generating large number reasonable clustering solutions, clustering solutions qualitatively similar ones, user examine “meta clusters” find something seems like ’ll useful. use SNF? clinical data setting, often access patient data across wide range domains, imaging, genetics, biomarkers, demographics. trying extract subtypes information, direct concatenation data followed cluster analysis can result substantial amount lost (valuable) signal contained individual domain. Empirically, SNF demonstrated effectively integrate highly diverse patient data purposes clinical subtyping.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/index.html","id":"example-workflows","dir":"","previous_headings":"Documentation","what":"Example workflows","title":"Meta Clustering with Similarity Network Fusion","text":"Simple Complex","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"essentials","dir":"","previous_headings":"Documentation","what":"Essentials","title":"Meta Clustering with Similarity Network Fusion","text":"Settings matrix Data list SNF schemes","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"further-customization-of-generated-solutions","dir":"","previous_headings":"Documentation","what":"Further customization of generated solutions","title":"Meta Clustering with Similarity Network Fusion","text":"Distance metrics Clustering algorithms Feature weighting","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"additional-functionality","dir":"","previous_headings":"Documentation","what":"Additional functionality","title":"Meta Clustering with Similarity Network Fusion","text":"Stability measures consensus clustering Removing unwanted signal Parallel processing Label propagation","code":""},{"path":"https://branchlab.github.io/metasnf/index.html","id":"plotting","dir":"","previous_headings":"Documentation","what":"Plotting","title":"Meta Clustering with Similarity Network Fusion","text":"Correlation plots Similarity matrix heatmaps Manhattan plots Alluvial plots","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD anxiety data — abcd_anxiety","title":"Mock ABCD anxiety data — abcd_anxiety","text":"randomly shuffled anonymized copy anxiety data NIMH Data archive. original file used pdem02.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cbcl_anxiety.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD anxiety data — abcd_anxiety","text":"","code":"abcd_anxiety"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":"abcd-anxiety","dir":"Reference","previous_headings":"","what":"abcd_anxiety","title":"Mock ABCD anxiety data — abcd_anxiety","text":"data frame 275 rows 2 columns: patient unique identifier ABCD dataset cbcl_anxiety_r Ordinal value impairment CBCL anxiety, either 0 (impairment), 1 (borderline clinical), 2 (clinically impaired)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_anxiety.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD anxiety data — abcd_anxiety","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD ","title":"Mock ABCD ","text":"randomly shuffled anonymized copy depression data NIMH Data archive. original file used pdem02.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cbcl_depress. data transformed categorical colour values demonstrate Chi-squared test capabilities extend_solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD ","text":"","code":"abcd_colour"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":"abcd-colour","dir":"Reference","previous_headings":"","what":"abcd_colour","title":"Mock ABCD ","text":"data frame 275 rows 2 columns: patient unique identifier ABCD dataset colour Categorical transformation cbcl_depress.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_colour.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD ","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD cortical surface area data — abcd_cort_sa","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"randomly shuffled anonymized copy cortical surface area data NIMH Data archive. original file used mrisdp10201.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cort_t.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"","code":"abcd_cort_sa"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":"abcd-cort-sa","dir":"Reference","previous_headings":"","what":"abcd_cort_sa","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"data frame 188 rows 152 columns: patient unique identifier ABCD dataset ... Cortical surface areas various ROIs (mm^2, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_sa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD cortical surface area data — abcd_cort_sa","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD cortical thickness data — abcd_cort_t","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"randomly shuffled anonymized copy cortical thickness data NIMH Data archive. original file used mrisdp10201.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cort_t.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"","code":"abcd_cort_t"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":"abcd-cort-t","dir":"Reference","previous_headings":"","what":"abcd_cort_t","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"data frame 188 rows 152 columns: patient unique identifier ABCD dataset ... Cortical thicknesses various ROIs (mm^3, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_cort_t.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD cortical thickness data — abcd_cort_t","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD depression data — abcd_depress","title":"Mock ABCD depression data — abcd_depress","text":"randomly shuffled anonymized copy depression data NIMH Data archive. original file used pdem02.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_cbcl_depress.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD depression data — abcd_depress","text":"","code":"abcd_depress"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":"abcd-depress","dir":"Reference","previous_headings":"","what":"abcd_depress","title":"Mock ABCD depression data — abcd_depress","text":"data frame 275 rows 2 columns: patient unique identifier ABCD dataset cbcl_depress_r Ordinal value impairment CBCL anxiety, either 0 (impairment), 1 (borderline clinical), 2 (clinically impaired)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_depress.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD depression data — abcd_depress","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_h_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD income data — abcd_h_income","title":"Mock ABCD income data — abcd_h_income","text":"Like abcd_income, NAs patient column","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_h_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD income data — abcd_h_income","text":"","code":"abcd_h_income"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_h_income.html","id":"abcd-income","dir":"Reference","previous_headings":"","what":"abcd_income","title":"Mock ABCD income data — abcd_h_income","text":"data frame 300 rows 2 columns: patient unique identifier ABCD dataset household_income Household income 3 category levels (low = 1, medium = 2, high = 3)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_h_income.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD income data — abcd_h_income","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD income data — abcd_income","title":"Mock ABCD income data — abcd_income","text":"randomly shuffled anonymized copy income data NIMH Data archive. original file used pdem02.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_income.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD income data — abcd_income","text":"","code":"abcd_income"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":"abcd-income","dir":"Reference","previous_headings":"","what":"abcd_income","title":"Mock ABCD income data — abcd_income","text":"data frame 300 rows 2 columns: patient unique identifier ABCD dataset household_income Household income 3 category levels (low = 1, medium = 2, high = 3)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_income.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD income data — abcd_income","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD pubertal status data — abcd_pubertal","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"randomly shuffled anonymized copy pubertal status data NIMH Data archive. original files used abcd_ssphp01.txt abcd_ssphy01.txt. file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_pubertal_status.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"","code":"abcd_pubertal"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":"abcd-pubertal","dir":"Reference","previous_headings":"","what":"abcd_pubertal","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"data frame 275 rows 2 columns: patient unique identifier ABCD dataset pubertal_status Average reported pubertal status child parent (1-5 categorical scale)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_pubertal.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD pubertal status data — abcd_pubertal","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ABCD subcortical volumes data — abcd_subc_v","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"randomly shuffled anonymized copy subcortical volume data NIMH Data archive. original file used smrip10201.txt file pre-processed abcdutils package (https://github.com/BRANCHlab/abcdutils) function get_subc_v.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"","code":"abcd_subc_v"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":"abcd-subc-v","dir":"Reference","previous_headings":"","what":"abcd_subc_v","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"data frame 174 rows 31 columns: patient unique identifier ABCD dataset ... Subcortical volumes various ROIs (mm^3, think)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/abcd_subc_v.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock ABCD subcortical volumes data — abcd_subc_v","text":"Though data longer \"real\" ABCD data, reference using ABCD data source : Data used preparation article obtained Adolescent Brain Cognitive DevelopmentSM (ABCD) Study (https://abcdstudy.org), held NIMH Data Archive (NDA). multisite, longitudinal study designed recruit 10,000 children age 9-10 follow 10 years early adulthood. ABCD Study® supported National Institutes Health additional federal partners award numbers U01DA041048, U01DA050989, U01DA051016, U01DA041022, U01DA051018, U01DA051037, U01DA050987, U01DA041174, U01DA041106, U01DA041117, U01DA041028, U01DA041134, U01DA050988, U01DA051039, U01DA041156, U01DA041025, U01DA041120, U01DA051038, U01DA041148, U01DA041093, U01DA041089, U24DA041123, U24DA041147. full list supporters available https://abcdstudy.org/federal-partners.html. listing participating sites complete listing study investigators can found https://abcdstudy.org/consortium_members/. ABCD consortium investigators designed implemented study /provided data necessarily participate analysis writing report. manuscript reflects views authors may reflect opinions views NIH ABCD consortium investigators.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns to a dataframe — add_columns","title":"Add columns to a dataframe — add_columns","text":"Add new columns dataframe providing character vector column names (param newcols) value occupy row new columns (param fill, NA default).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns to a dataframe — add_columns","text":"","code":"add_columns(df, newcols, fill = NA)"},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns to a dataframe — add_columns","text":"df dataframe extend newcols vector containing new column names fill values elements newly added columns. NA default.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns to a dataframe — add_columns","text":"extended_df dataframe containing added columns","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_settings_matrix_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Add settings matrix rows — add_settings_matrix_rows","title":"Add settings matrix rows — add_settings_matrix_rows","text":"Add settings matrix rows","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_settings_matrix_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add settings matrix rows — add_settings_matrix_rows","text":"","code":"add_settings_matrix_rows(   settings_matrix,   seed = NULL,   nrows = 0,   min_removed_inputs = 0,   max_removed_inputs = sum(startsWith(colnames(settings_matrix), \"inc_\")) - 1,   dropout_dist = \"exponential\",   min_alpha = NULL,   max_alpha = NULL,   min_k = NULL,   max_k = NULL,   min_t = NULL,   max_t = NULL,   alpha_values = NULL,   k_values = NULL,   t_values = NULL,   possible_snf_schemes = c(1, 2, 3),   clustering_algorithms = NULL,   continuous_distances = NULL,   discrete_distances = NULL,   ordinal_distances = NULL,   categorical_distances = NULL,   mixed_distances = NULL,   distance_metrics_list = NULL,   snf_input_weights = NULL,   snf_domain_weights = NULL,   retry_limit = 10 )"},{"path":"https://branchlab.github.io/metasnf/reference/add_settings_matrix_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add settings matrix rows — add_settings_matrix_rows","text":"settings_matrix existing settings matrix seed set seed random matrix generation. Setting value change seed global environment. nrows Number rows generate settings matrix. min_removed_inputs smallest number input dataframes may randomly removed. default, 0. max_removed_inputs largest number input dataframes may randomly removed. default, 1 less provided input dataframes data_list. dropout_dist Parameter controlling random removal input dataframes occur. Can \"none\" (input dataframes randomly removed), \"uniform\" (uniformly sample min_removed_inputs max_removed_inputs determine number input dataframes remove), \"exponential\" (pick number input dataframes remove sampling min_removed_inputs max_removed_inputs exponential distribution; default). min_alpha minimum value alpha hyperparameter can . Random assigned value alpha row obtained uniformly sampling numbers min_alpha max_alpha intervals 0.1. used conjunction alpha_values parameter. max_alpha maximum value alpha hyperparameter can . See min_alpha parameter. used conjunction alpha_values parameter. min_k minimum value k hyperparameter can . Random assigned value k row obtained uniformly sampling numbers min_k max_k intervals 1. used conjunction k_values parameter. max_k maximum value k hyperparameter can . See min_k parameter. used conjunction k_values parameter. min_t minimum value t hyperparameter can . Random assigned value t row obtained uniformly sampling numbers min_t max_t intervals 1. used conjunction t_values parameter. max_t maximum value t hyperparameter can . See min_t parameter. used conjunction t_values parameter. alpha_values number numeric vector set possible values alpha can take . Value obtained uniformly sampling vector. used conjunction min_alpha max_alpha parameters. k_values number numeric vector set possible values k can take . Value obtained uniformly sampling vector. used conjunction min_k max_k parameters. t_values number numeric vector set possible values t can take . Value obtained uniformly sampling vector. used conjunction min_t max_t parameters. possible_snf_schemes vector containing possible snf_schemes uniformly randomly select . default, vector contains 3 possible schemes: c(1, 2, 3). 1 corresponds \"individual\" scheme, 2 corresponds \"domain\" scheme, 3 corresponds \"twostep\" scheme. clustering_algorithms list clustering algorithms uniformly randomly pick clustering. specified, randomly select spectral clustering using eigen-gap heuristic spectral clustering using rotation cost heuristic. See ?generate_clust_algs_list details running custom clustering algorithms. continuous_distances vector continuous distance metrics use custom distance_metrics_list provided. discrete_distances vector categorical distance metrics use custom distance_metrics_list provided. ordinal_distances vector categorical distance metrics use custom distance_metrics_list provided. categorical_distances vector categorical distance metrics use custom distance_metrics_list provided. mixed_distances vector mixed distance metrics use custom distance_metrics_list provided. distance_metrics_list List containing distance metrics vary . See ?generate_distance_metrics_list. snf_input_weights Nested list containing weights SNF used merge individual input measures (see ?generate_snf_weights) snf_domain_weights Nested list containing weights SNF used merge domains (see ?generate_snf_weights) retry_limit maximum number attempts generate novel row. function return matrices identical rows. range requested possible settings tightens number requested rows increases, risk randomly generating row already exists increases. new random row matched existing row retry_limit number times, function terminate.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/add_settings_matrix_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add settings matrix rows — add_settings_matrix_rows","text":"settings_matrix settings matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/adjusted_rand_index_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of pairwise adjusted rand indices between solutions — adjusted_rand_index_heatmap","title":"Heatmap of pairwise adjusted rand indices between solutions — adjusted_rand_index_heatmap","text":"Heatmap pairwise adjusted rand indices solutions","code":""},{"path":"https://branchlab.github.io/metasnf/reference/adjusted_rand_index_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of pairwise adjusted rand indices between solutions — adjusted_rand_index_heatmap","text":"","code":"adjusted_rand_index_heatmap(   aris,   order = NULL,   cluster_rows = FALSE,   cluster_columns = FALSE,   log_graph = FALSE,   scale_diag = \"none\",   min_colour = \"#282828\",   max_colour = \"firebrick2\",   col = circlize::colorRamp2(c(min(aris), max(aris)), c(min_colour, max_colour)),   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/adjusted_rand_index_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of pairwise adjusted rand indices between solutions — adjusted_rand_index_heatmap","text":"aris Matrix adjusted rand indices calc_aris() order Numeric vector containing row order heatmap. cluster_rows Whether rows clustered. cluster_columns Whether columns clustered. log_graph TRUE, log transforms graph. scale_diag Method rescaling matrix diagonals. Can \"none\" (change diagonals), \"mean\" (replace diagonals average value -diagonals), \"zero\" (replace diagonals 0). min_colour Colour used lowest value heatmap. max_colour Colour used highest value heatmap. col Colour ramp use heatmap. ... Additional parameters passed similarity_matrix_heatmap(), function function wraps.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/age_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock age data — age_df","title":"Mock age data — age_df","text":"Mock age data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/age_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock age data — age_df","text":"","code":"age_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/age_df.html","id":"age-df","dir":"Reference","previous_headings":"","what":"age_df","title":"Mock age data — age_df","text":"data frame 200 rows 2 columns: patient_id Random three-digit number uniquely identifying patient age Mock age variable","code":""},{"path":"https://branchlab.github.io/metasnf/reference/age_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock age data — age_df","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/alluvial_cluster_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Alluvial plot of patients across cluster counts and important variables — alluvial_cluster_plot","title":"Alluvial plot of patients across cluster counts and important variables — alluvial_cluster_plot","text":"Alluvial plot patients across cluster counts important variables","code":""},{"path":"https://branchlab.github.io/metasnf/reference/alluvial_cluster_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alluvial plot of patients across cluster counts and important variables — alluvial_cluster_plot","text":"","code":"alluvial_cluster_plot(   cluster_sequence,   similarity_matrix,   data_list = NULL,   data = NULL,   key_outcome,   key_label = key_outcome,   extra_outcomes = NULL,   title = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/alluvial_cluster_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alluvial plot of patients across cluster counts and important variables — alluvial_cluster_plot","text":"cluster_sequence list clustering algorithms (typically, algorithm varied different numbers clusters). similarity_matrix similarity matrix. data_list nested list input data generate_data_list(). data dataframe contains variables include plot. key_outcome name variable determines patient stream coloured alluvial plot. key_label Name key outcome used plot legend. extra_outcomes Names additional variables add plot. title Title plot.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a data_list object, sort data elements by subjectkey — arrange_dl","title":"Given a data_list object, sort data elements by subjectkey — arrange_dl","text":"Given data_list object, sort data elements subjectkey","code":""},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a data_list object, sort data elements by subjectkey — arrange_dl","text":"","code":"arrange_dl(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a data_list object, sort data elements by subjectkey — arrange_dl","text":"data_list nested list input data generate_data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/arrange_dl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a data_list object, sort data elements by subjectkey — arrange_dl","text":"arranged_data_list arranged data_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assemble_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a dataframe and/or a data_list into a single dataframe — assemble_data","title":"Collapse a dataframe and/or a data_list into a single dataframe — assemble_data","text":"Collapse dataframe /data_list single dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assemble_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a dataframe and/or a data_list into a single dataframe — assemble_data","text":"","code":"assemble_data(data, data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/assemble_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a dataframe and/or a data_list into a single dataframe — assemble_data","text":"data dataframe. data_list nested list input data generate_data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assoc_pval_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of pairwise associations between variables — assoc_pval_heatmap","title":"Heatmap of pairwise associations between variables — assoc_pval_heatmap","text":"Heatmap pairwise associations variables","code":""},{"path":"https://branchlab.github.io/metasnf/reference/assoc_pval_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of pairwise associations between variables — assoc_pval_heatmap","text":"","code":"assoc_pval_heatmap(   correlation_matrix,   scale_diag = \"max\",   cluster_rows = TRUE,   cluster_columns = TRUE,   show_row_names = TRUE,   show_column_names = TRUE,   show_heatmap_legend = FALSE,   confounders = NULL,   out_of_models = NULL,   annotation_colours = NULL,   labels_colour = NULL,   split_by_domain = FALSE,   data_list = NULL,   significance_stars = TRUE,   slice_font_size = 8,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/assoc_pval_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of pairwise associations between variables — assoc_pval_heatmap","text":"correlation_matrix Matrix containing pairwise association p-values. recommended way obtain matrix calc_assoc_pval function. scale_diag Parameter controls diagonals correlation_matrix adjusted heatmap. best viewing, set \"max\", match diagonals whichever pairwise association highest p-value. cluster_rows Parameter ComplexHeatmap::Heatmap. ignored split_by_domain also provided. cluster_columns Parameter ComplexHeatmap::Heatmap. ignored split_by_domain also provided. show_row_names Parameter ComplexHeatmap::Heatmap. show_column_names Parameter ComplexHeatmap::Heatmap. show_heatmap_legend Parameter ComplexHeatmap::Heatmap. confounders named list elements columns correlation_matrix names corresponding display names. out_of_models Like confounders, named list model measures (also present columns correlation_matrix). annotation_colours Named list heatmap annotations colours. labels_colour Vector colours use columns rows heatmap. split_by_domain results dl_var_summar - dataframe domain every variable plotted data. columns correlation_matrix. used \"slice\" heatmap visually separated sections. data_list nested list input data generate_data_list(). significance_stars TRUE (default), plots significance stars heatmap cells slice_font_size Font size domain separating labels. ... Additional parameters passed ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/association_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"(DEPRECATED) Association p-value heatmap — association_heatmap","title":"(DEPRECATED) Association p-value heatmap — association_heatmap","text":"(DEPRECATED) Association p-value heatmap","code":""},{"path":"https://branchlab.github.io/metasnf/reference/association_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(DEPRECATED) Association p-value heatmap — association_heatmap","text":"","code":"association_heatmap(...)"},{"path":"https://branchlab.github.io/metasnf/reference/association_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(DEPRECATED) Association p-value heatmap — association_heatmap","text":"... Function arguments","code":""},{"path":"https://branchlab.github.io/metasnf/reference/auto_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically plot features across clusters — auto_plot","title":"Automatically plot features across clusters — auto_plot","text":"Given single row solutions matrix data provided data_list /target_list arguments, function return series bar /jitter plots based feature types.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/auto_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically plot features across clusters — auto_plot","text":"","code":"auto_plot(   solutions_matrix_row = NULL,   data_list = NULL,   target_list = NULL,   return_plots = TRUE,   save = NULL,   jitter_width = 6,   jitter_height = 6,   bar_width = 6,   bar_height = 6 )"},{"path":"https://branchlab.github.io/metasnf/reference/auto_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically plot features across clusters — auto_plot","text":"solutions_matrix_row single row solutions matrix. data_list data_list containing data plot. target_list target_list containing data plot. return_plots TRUE, function return list plots. FALSE, function instead return full data frame used plotting. save string provided, plots saved string used prefix plot names. jitter_width Width jitter plots save specified. jitter_height Height jitter plots save specified. bar_width Width bar plots save specified. bar_height Height bar plots save specified.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/bar_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar plot separating a feature by cluster — bar_plot","title":"Bar plot separating a feature by cluster — bar_plot","text":"Bar plot separating feature cluster","code":""},{"path":"https://branchlab.github.io/metasnf/reference/bar_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar plot separating a feature by cluster — bar_plot","text":"","code":"bar_plot(df, feature)"},{"path":"https://branchlab.github.io/metasnf/reference/bar_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar plot separating a feature by cluster — bar_plot","text":"df data.frame containing cluster column feature plot. feature feature plot.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_nmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate feature NMIs for a data_list and a derived solutions_matrix — batch_nmi","title":"Calculate feature NMIs for a data_list and a derived solutions_matrix — batch_nmi","text":"Calculate feature NMIs data_list derived solutions_matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_nmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate feature NMIs for a data_list and a derived solutions_matrix — batch_nmi","text":"","code":"batch_nmi(   data_list,   solutions_matrix,   clust_algs_list = NULL,   distance_metrics_list = NULL,   automatic_standard_normalize = FALSE,   transpose = TRUE,   ignore_inclusions = TRUE )"},{"path":"https://branchlab.github.io/metasnf/reference/batch_nmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate feature NMIs for a data_list and a derived solutions_matrix — batch_nmi","text":"data_list nested list input data generate_data_list(). Use value used original call batch_snf(). solutions_matrix Result batch_snf storing cluster solutions settings used generate . Use value used original call batch_snf(). clust_algs_list List custom clustering algorithms apply final fused network. See ?generate_clust_algs_list. Use value used original call batch_snf(). distance_metrics_list optional nested list containing distance metric function used various variable types (continuous, discrete, ordinal, categorical, mixed). Use value used original call batch_snf(). automatic_standard_normalize TRUE, automatically apply standard normalization prior calculation distance matrices. Use value used original call batch_snf(). transpose TRUE, transpose output dataframe. ignore_inclusions TRUE, ignore inclusion columns solutions matrix calculate NMIs features. FALSE, give NAs features dropped given settings_matrix row.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_row_closure.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate closure function to run batch_snf in an apply-friendly format — batch_row_closure","title":"Generate closure function to run batch_snf in an apply-friendly format — batch_row_closure","text":"Generate closure function run batch_snf apply-friendly format","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_row_closure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate closure function to run batch_snf in an apply-friendly format — batch_row_closure","text":"","code":"batch_row_closure(   data_list,   distance_metrics_list,   clust_algs_list,   settings_matrix,   weights_matrix,   similarity_matrix_dir,   return_similarity_matrices,   prog )"},{"path":"https://branchlab.github.io/metasnf/reference/batch_row_closure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate closure function to run batch_snf in an apply-friendly format — batch_row_closure","text":"data_list nested list input data generate_data_list(). distance_metrics_list optional nested list containing distance metric function used various variable types (continuous, discrete, ordinal, categorical, mixed). See ?generate_distance_metrics_list details build . clust_algs_list List custom clustering algorithms apply final fused network. See ?generate_clust_algs_list. settings_matrix matrix indicating parameters iterate SNF . weights_matrix matrix containing variable weights use distance matrix calculation. See ?generate_weights_matrix details build . similarity_matrix_dir specified, directory used save generated similarity matrices. return_similarity_matrices TRUE, function return list first element solutions matrix second element list similarity matrices row solutions_matrix. Default FALSE. prog Progressr function update parallel processing progress","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":null,"dir":"Reference","previous_headings":"","what":"Run variations of SNF. — batch_snf","title":"Run variations of SNF. — batch_snf","text":"core function metasnf package. Using information stored settings_matrix (see ?generate_settings_matrix) data_list (see ?generate_data_list), run repeated complete SNF pipelines generate broad space post-SNF cluster solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run variations of SNF. — batch_snf","text":"","code":"batch_snf(   data_list,   settings_matrix,   processes = 1,   return_similarity_matrices = FALSE,   similarity_matrix_dir = NULL,   clust_algs_list = NULL,   suppress_clustering = FALSE,   distance_metrics_list = NULL,   weights_matrix = NULL,   automatic_standard_normalize = FALSE,   quiet = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run variations of SNF. — batch_snf","text":"data_list nested list input data generate_data_list(). settings_matrix data.frame row completely defines SNF pipeline transforming individual input dataframes final cluster solution. See ?generate_settings_matrix https://branchlab.github.io/metasnf/articles/settings_matrix.html details. processes Specify number processes used complete SNF iterations 1 (default) Sequential processing: function iterate settings_matrix one row time loop. option make use multiple CPU cores, show progress bar. 2 higher: Parallel processing use future.apply::future_apply distribute SNF iterations across specified number CPU cores. higher number available cores, warning printed maximum number cores used. max: available cores used. return_similarity_matrices TRUE, function return list first element solutions matrix second element list similarity matrices row solutions_matrix. Default FALSE. similarity_matrix_dir specified, directory used save generated similarity matrices. clust_algs_list List custom clustering algorithms apply final fused network. See ?generate_clust_algs_list. suppress_clustering FALSE (default), apply default custom clustering algorithms provide cluster solutions every iteration SNF. TRUE, parameter similarity_matrix_dir must specified. distance_metrics_list optional nested list containing distance metric function used various variable types (continuous, discrete, ordinal, categorical, mixed). See ?generate_distance_metrics_list details build . weights_matrix matrix containing variable weights use distance matrix calculation. See ?generate_weights_matrix details build . automatic_standard_normalize TRUE, automatically apply standard normalization prior calculation distance matrices. parameter used conjunction custom distance metrics list. wish supply custom distance metrics also always standard normalization, simply ensure numeric (continuous, discrete, ordinal) distance metrics populated distance metric functions apply standard normalization. See https://branchlab.github.io/metasnf/articles/distance_metrics.html learn . quiet TRUE, function print time remaining estimates.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run variations of SNF. — batch_snf","text":"populated_settings_matrix settings matrix filled columns related subtype membership","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_time_remaining.html","id":null,"dir":"Reference","previous_headings":"","what":"Time remaining until batch_snf completion — batch_snf_time_remaining","title":"Time remaining until batch_snf completion — batch_snf_time_remaining","text":"Time remaining batch_snf completion","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_time_remaining.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time remaining until batch_snf completion — batch_snf_time_remaining","text":"","code":"batch_snf_time_remaining(   seconds_per_row,   rows_remaining,   row,   remaining_seconds_vector )"},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_time_remaining.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time remaining until batch_snf completion — batch_snf_time_remaining","text":"seconds_per_row Integer seconds time taken recent SNF 'run rows_remaining Number rows left complete settings matrix row Current row settings matrix remaining_seconds_vector Vector storing 10 recent row completion times","code":""},{"path":"https://branchlab.github.io/metasnf/reference/batch_snf_time_remaining.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time remaining until batch_snf completion — batch_snf_time_remaining","text":"remaining_seconds_vector Updated remaining_seconds_vector","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_aris.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta-cluster calculations — calc_aris","title":"Meta-cluster calculations — calc_aris","text":"Generate matrix pairwise cluster-solution similarities Adjusted Rand index calculations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_aris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta-cluster calculations — calc_aris","text":"","code":"calc_aris(solutions_matrix, processes = 1)"},{"path":"https://branchlab.github.io/metasnf/reference/calc_aris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meta-cluster calculations — calc_aris","text":"solutions_matrix solutions_matrix containing cluster solutions calculate pairwise ARIs . processes Specify number processes used complete calculations 1 (default) Sequential processing 2 higher: Parallel processing use future.apply::future_apply distribute calculations across specified number CPU cores. higher number available cores, warning printed maximum number cores used. max: available cores used. Note progress indicator available multi-core processing.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_aris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Meta-cluster calculations — calc_aris","text":"om_aris ARIs clustering solutions solutions matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-values based on variable vectors and their types — calc_assoc_pval","title":"Calculate p-values based on variable vectors and their types — calc_assoc_pval","text":"Calculate p-values based variable vectors types","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-values based on variable vectors and their types — calc_assoc_pval","text":"","code":"calc_assoc_pval(var1, var2, type1, type2, cat_test = \"chi_squared\")"},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-values based on variable vectors and their types — calc_assoc_pval","text":"var1 single vector containing variable. var2 single vector containing variable. type1 type var1 (continuous, discrete, ordinal, categorical). type2 type var2 (continuous, discrete, ordinal, categorical). cat_test String indicating statistical test used associate cluster categorical variable. Options \"chi_squared\" Chi-squared test \"fisher_exact\" Fisher's exact test.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-values based on variable vectors and their types — calc_assoc_pval","text":"pval p-value statistical test based provided types. Currently, either F-test p-value linear model least one variable non-categorical, chi-squared test p-value variables categorical.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-values for all pairwise associations of variables in a data_list — calc_assoc_pval_matrix","title":"Calculate p-values for all pairwise associations of variables in a data_list — calc_assoc_pval_matrix","text":"Calculate p-values pairwise associations variables data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-values for all pairwise associations of variables in a data_list — calc_assoc_pval_matrix","text":"","code":"calc_assoc_pval_matrix(data_list, verbose = FALSE, cat_test = \"chi_squared\")"},{"path":"https://branchlab.github.io/metasnf/reference/calc_assoc_pval_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-values for all pairwise associations of variables in a data_list — calc_assoc_pval_matrix","text":"data_list nested list input data generate_data_list(). verbose TRUE, prints new line everytime p-value calculated. cat_test String indicating statistical test used associate cluster categorical variable. Options \"chi_squared\" Chi-squared test \"fisher_exact\" Fisher's exact test.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_associations.html","id":null,"dir":"Reference","previous_headings":"","what":"(DEPRECATED) Association p-value calculations — calculate_associations","title":"(DEPRECATED) Association p-value calculations — calculate_associations","text":"(DEPRECATED) Association p-value calculations","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_associations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(DEPRECATED) Association p-value calculations — calculate_associations","text":"","code":"calculate_associations(...)"},{"path":"https://branchlab.github.io/metasnf/reference/calculate_associations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(DEPRECATED) Association p-value calculations — calculate_associations","text":"... Function arguments","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_db_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Davies-Bouldin indices — calculate_db_indices","title":"Calculate Davies-Bouldin indices — calculate_db_indices","text":"Given solutions_matrix list similarity_matrices (single similarity_matrix solutions_matrix 1 row), return vector Davies-Bouldin indices","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_db_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Davies-Bouldin indices — calculate_db_indices","text":"","code":"calculate_db_indices(solutions_matrix, similarity_matrices)"},{"path":"https://branchlab.github.io/metasnf/reference/calculate_db_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Davies-Bouldin indices — calculate_db_indices","text":"solutions_matrix solutions_matrix (see ?batch_snf) similarity_matrices list similarity matrices (see ?batch_snf)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_db_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Davies-Bouldin indices — calculate_db_indices","text":"davies_bouldin_indices vector Davies-Bouldin indices cluster solution.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_dunn_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Dunn indices — calculate_dunn_indices","title":"Calculate Dunn indices — calculate_dunn_indices","text":"Given solutions_matrix list similarity_matrices (single similarity_matrix solutions_matrix 1 row), return vector Dunn indices","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_dunn_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Dunn indices — calculate_dunn_indices","text":"","code":"calculate_dunn_indices(solutions_matrix, similarity_matrices)"},{"path":"https://branchlab.github.io/metasnf/reference/calculate_dunn_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Dunn indices — calculate_dunn_indices","text":"solutions_matrix solutions_matrix (see ?batch_snf) similarity_matrices list similarity matrices (see ?batch_snf)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_dunn_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Dunn indices — calculate_dunn_indices","text":"dunn_indices vector Dunn indices cluster solution","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_silhouettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate silhouette scores — calculate_silhouettes","title":"Calculate silhouette scores — calculate_silhouettes","text":"Given solutions_matrix list similarity_matrices (single similarity_matrix solutions_matrix 1 row), return list 'silhouette' objects cluster package","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_silhouettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate silhouette scores — calculate_silhouettes","text":"","code":"calculate_silhouettes(solutions_matrix, similarity_matrices)"},{"path":"https://branchlab.github.io/metasnf/reference/calculate_silhouettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate silhouette scores — calculate_silhouettes","text":"solutions_matrix solutions_matrix (see ?batch_snf) similarity_matrices list similarity matrices (see ?batch_snf)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/calculate_silhouettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate silhouette scores — calculate_silhouettes","text":"silhouette_scores list \"silhouette\" objects cluster package.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cancer_diagnosis_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock diagnosis data — cancer_diagnosis_df","title":"Mock diagnosis data — cancer_diagnosis_df","text":"data diagnosis_df, renamed variables columns.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cancer_diagnosis_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock diagnosis data — cancer_diagnosis_df","text":"","code":"cancer_diagnosis_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/cancer_diagnosis_df.html","id":"cancer-diagnosis-df","dir":"Reference","previous_headings":"","what":"cancer_diagnosis_df","title":"Mock diagnosis data — cancer_diagnosis_df","text":"data frame 200 rows 2 columns: patient_id Random three-digit number uniquely identifying patient diagnosis Mock cancer diagnosis variable (1, 2, 3)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cancer_diagnosis_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock diagnosis data — cancer_diagnosis_df","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cell_significance_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Place significance stars on ComplexHeatmap cells. — cell_significance_fn","title":"Place significance stars on ComplexHeatmap cells. — cell_significance_fn","text":"internal function meant used assoc_pval_heatmap function.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cell_significance_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Place significance stars on ComplexHeatmap cells. — cell_significance_fn","text":"","code":"cell_significance_fn(data)"},{"path":"https://branchlab.github.io/metasnf/reference/cell_significance_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Place significance stars on ComplexHeatmap cells. — cell_significance_fn","text":"data matrix containing cells base significance stars .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cell_significance_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Place significance stars on ComplexHeatmap cells. — cell_significance_fn","text":"cell_fn Another function well-formatted usage cell_fun argument ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert character-type columns of a dataframe to factor-type — char_to_fac","title":"Convert character-type columns of a dataframe to factor-type — char_to_fac","text":"Convert character-type columns dataframe factor-type","code":""},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert character-type columns of a dataframe to factor-type — char_to_fac","text":"","code":"char_to_fac(df)"},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert character-type columns of a dataframe to factor-type — char_to_fac","text":"df dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/char_to_fac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert character-type columns of a dataframe to factor-type — char_to_fac","text":"df_converted dataframe factor-type columns instead char-type columns","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_similarity_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Check validity of similarity matrices — check_similarity_matrices","title":"Check validity of similarity matrices — check_similarity_matrices","text":"Check see similarity matrices list following properties: maximum value entire matrix 0.5 Every value diagonal 0.5","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_similarity_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check validity of similarity matrices — check_similarity_matrices","text":"","code":"check_similarity_matrices(similarity_matrices)"},{"path":"https://branchlab.github.io/metasnf/reference/check_similarity_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check validity of similarity matrices — check_similarity_matrices","text":"similarity_matrices list similarity matrices","code":""},{"path":"https://branchlab.github.io/metasnf/reference/check_similarity_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check validity of similarity matrices — check_similarity_matrices","text":"valid_matrices Boolean indicating properties met similarity matrices","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_squared_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Chi-squared test p-value (generic) — chi_squared_pval","title":"Chi-squared test p-value (generic) — chi_squared_pval","text":"Return p-value chi-squared test two variables","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_squared_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chi-squared test p-value (generic) — chi_squared_pval","text":"","code":"chi_squared_pval(cat_var1, cat_var2)"},{"path":"https://branchlab.github.io/metasnf/reference/chi_squared_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chi-squared test p-value (generic) — chi_squared_pval","text":"cat_var1 categorical variable. cat_var2 categorical variable.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/chi_squared_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chi-squared test p-value (generic) — chi_squared_pval","text":"pval p-value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of patient co-clustering across resampled data — cocluster_heatmap","title":"Heatmap of patient co-clustering across resampled data — cocluster_heatmap","text":"Uses output generate_cocluster_data (see ?generate_cocluster_data) returns well-formatted ComplexHeatmap visualizing clustering structure across resamplings data.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of patient co-clustering across resampled data — cocluster_heatmap","text":"","code":"cocluster_heatmap(cocluster_data)"},{"path":"https://branchlab.github.io/metasnf/reference/cocluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of patient co-clustering across resampled data — cocluster_heatmap","text":"cocluster_data named list containing two matrices: \"same_solution\": patient x patient matrix cell number subsamples contained patients \"same_cluster\": patient x patient matrix cell number subsamples patients clustered together","code":""},{"path":"https://branchlab.github.io/metasnf/reference/collapse_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a data_list into a single dataframe — collapse_dl","title":"Collapse a data_list into a single dataframe — collapse_dl","text":"Collapse data_list single dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/collapse_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a data_list into a single dataframe — collapse_dl","text":"","code":"collapse_dl(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/collapse_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a data_list into a single dataframe — collapse_dl","text":"data_list nested list input data generate_data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/colour_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a colour ramp for a given vector — colour_scale","title":"Return a colour ramp for a given vector — colour_scale","text":"Given numeric vector min max colour values, return colour ramp assigns colour element vector. function wrapper circlize::colorRamp2.'","code":""},{"path":"https://branchlab.github.io/metasnf/reference/colour_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a colour ramp for a given vector — colour_scale","text":"","code":"colour_scale(data, min_colour, max_colour)"},{"path":"https://branchlab.github.io/metasnf/reference/colour_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a colour ramp for a given vector — colour_scale","text":"data Vector numeric values. min_colour Minimum colour value. max_colour Maximum colour value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","title":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","text":"Column name \"subjectkey\" reserved unique identifier subjects. function ensures dataframes UID set \"subjectkey\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","text":"","code":"convert_uids(data_list, uid = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","text":"data_list nested list input data generate_data_list(). uid (string) name uid column currently used data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/convert_uids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert unique identifiers of data_list to 'subjectkey' — convert_uids","text":"dl_renamed_id data list 'subjectkey' UID","code":""},{"path":"https://branchlab.github.io/metasnf/reference/diagnosis_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock diagnosis data — diagnosis_df","title":"Mock diagnosis data — diagnosis_df","text":"data cancer_diagnosis_df, renamed variables columns.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/diagnosis_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock diagnosis data — diagnosis_df","text":"","code":"diagnosis_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/diagnosis_df.html","id":"diagnosis-df","dir":"Reference","previous_headings":"","what":"diagnosis_df","title":"Mock diagnosis data — diagnosis_df","text":"data frame 200 rows 2 columns: patient_id Random three-digit number uniquely identifying patient diagnosis Mock diagnosis variable","code":""},{"path":"https://branchlab.github.io/metasnf/reference/diagnosis_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock diagnosis data — diagnosis_df","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dl_uid_first_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Make the subjectkey UID columns of a data_list first — dl_uid_first_col","title":"Make the subjectkey UID columns of a data_list first — dl_uid_first_col","text":"Make subjectkey UID columns data_list first","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dl_uid_first_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make the subjectkey UID columns of a data_list first — dl_uid_first_col","text":"","code":"dl_uid_first_col(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/dl_uid_first_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make the subjectkey UID columns of a data_list first — dl_uid_first_col","text":"data_list nested list input data generate_data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dl_variable_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable-level summary of a data_list — dl_variable_summary","title":"Variable-level summary of a data_list — dl_variable_summary","text":"Variable-level summary data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dl_variable_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable-level summary of a data_list — dl_variable_summary","text":"","code":"dl_variable_summary(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/dl_variable_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable-level summary of a data_list — dl_variable_summary","text":"data_list nested list input data generate_data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/dl_variable_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable-level summary of a data_list — dl_variable_summary","text":"variable_level_summary dataframe containing name, type, domain every variable data_list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domain_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"SNF scheme: Domain merge — domain_merge","title":"SNF scheme: Domain merge — domain_merge","text":"Given data_list, returns new data_list original data objects particlar domain concatenated.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domain_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SNF scheme: Domain merge — domain_merge","text":"","code":"domain_merge(   data_list,   cont_dist_fn,   disc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row,   k,   alpha,   t )"},{"path":"https://branchlab.github.io/metasnf/reference/domain_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SNF scheme: Domain merge — domain_merge","text":"data_list nested list input data generate_data_list(). cont_dist_fn distance metric function continuous data disc_dist_fn distance metric function discrete data ord_dist_fn distance metric function ordinal data cat_dist_fn distance metric function categorical data mix_dist_fn distance metric function mixed data weights_row dataframe row containing variable weights k k hyperparameter alpha alpha/eta/sigma hyperparameter t SNF number iterations hyperparameter","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domain_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SNF scheme: Domain merge — domain_merge","text":"fused_network final fused network clustering","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":null,"dir":"Reference","previous_headings":"","what":"Domains — domains","title":"Domains — domains","text":"Domains","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domains — domains","text":"","code":"domains(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domains — domains","text":"data_list nested list input data generate_data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/domains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Domains — domains","text":"domain_list list domains","code":""},{"path":"https://branchlab.github.io/metasnf/reference/drop_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute inclusion — drop_inputs","title":"Execute inclusion — drop_inputs","text":"Given data list settings matrix row, returns data list selected inputs","code":""},{"path":"https://branchlab.github.io/metasnf/reference/drop_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute inclusion — drop_inputs","text":"","code":"drop_inputs(settings_matrix, data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/drop_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute inclusion — drop_inputs","text":"settings_matrix matrix indicating parameters iterate SNF data_list nested list input data generate_data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/drop_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute inclusion — drop_inputs","text":"selected_data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/esm_manhattan_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Manhattan plot of variable-cluster associaiton p-values — esm_manhattan_plot","title":"Manhattan plot of variable-cluster associaiton p-values — esm_manhattan_plot","text":"Manhattan plot variable-cluster associaiton p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/esm_manhattan_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manhattan plot of variable-cluster associaiton p-values — esm_manhattan_plot","text":"","code":"esm_manhattan_plot(   esm,   neg_log_pval_thresh = 5,   threshold = NULL,   point_size = 5,   jitter_width = 0.1,   jitter_height = 0.1,   text_size = 15,   plot_title = NULL,   hide_x_labels = FALSE,   bonferroni_line = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/esm_manhattan_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manhattan plot of variable-cluster associaiton p-values — esm_manhattan_plot","text":"esm Extended solutions matrix storing associations variables cluster assignments. See ?extend_solutions. neg_log_pval_thresh Threshold negative log p-values. threshold P-value threshold plot dashed line . point_size Size points plot. jitter_width Width jitter. jitter_height Height jitter. text_size Size text plot. plot_title Title plot. hide_x_labels TRUE, hides x-axis labels. bonferroni_line TRUE, plots dashed black line Bonferroni-corrected equivalent p-value threshold.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/euclidean_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance metric: Euclidean distance — euclidean_distance","title":"Distance metric: Euclidean distance — euclidean_distance","text":"Distance metric: Euclidean distance","code":""},{"path":"https://branchlab.github.io/metasnf/reference/euclidean_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance metric: Euclidean distance — euclidean_distance","text":"","code":"euclidean_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/euclidean_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance metric: Euclidean distance — euclidean_distance","text":"df Dataframe containing least 1 data column weights_row Single-row dataframe column names contain column names df row contains corresponding weights_row.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/euclidean_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance metric: Euclidean distance — euclidean_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/expression_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Modification of SNFtool mock dataframe ","title":"Modification of SNFtool mock dataframe ","text":"Modification SNFtool mock dataframe \"Data1\"","code":""},{"path":"https://branchlab.github.io/metasnf/reference/expression_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modification of SNFtool mock dataframe ","text":"","code":"expression_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/expression_df.html","id":"expression-df","dir":"Reference","previous_headings":"","what":"expression_df","title":"Modification of SNFtool mock dataframe ","text":"data frame 200 rows 3 columns: gene_1_expression Mock gene expression variable gene_2_expression Mock gene expression variable patient_id Random three-digit number uniquely identifying patient","code":""},{"path":"https://branchlab.github.io/metasnf/reference/expression_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Modification of SNFtool mock dataframe ","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend an solutions matrix to include outcome evaluations — extend_solutions","title":"Extend an solutions matrix to include outcome evaluations — extend_solutions","text":"Extend solutions matrix include outcome evaluations","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend an solutions matrix to include outcome evaluations — extend_solutions","text":"","code":"extend_solutions(   solutions_matrix,   target_list = NULL,   data_list = NULL,   cat_test = \"chi_squared\",   calculate_summaries = TRUE,   min_pval = 1e-10,   processes = 1 )"},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend an solutions matrix to include outcome evaluations — extend_solutions","text":"solutions_matrix Result batch_snf storing cluster solutions settings used generate . target_list data_list variables calculate p-values . Variables target list included p-value summary measure calculations. data_list data_list variables calcualte p-values , incorporated p-value summary measure columns (.e., min/mean/max p-value columns). cat_test String indicating statistical test used associate cluster categorical variable. Options \"chi_squared\" Chi-squared test \"fisher_exact\" Fisher's exact test. calculate_summaries TRUE, function calculate minimum mean p-values row solutions matrix. min_pval assigned value, p-value less replaced value. processes number processes use parallelization. Progress reported sequential processing (processes = 1).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/extend_solutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend an solutions matrix to include outcome evaluations — extend_solutions","text":"extended_solutions_matrix extended solutions matrix contains p-value columns outcome provided target_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fisher_exact_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher exact test p-value — fisher_exact_pval","title":"Fisher exact test p-value — fisher_exact_pval","text":"Return p-value Fisher exact test two variables","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fisher_exact_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher exact test p-value — fisher_exact_pval","text":"","code":"fisher_exact_pval(cat_var1, cat_var2)"},{"path":"https://branchlab.github.io/metasnf/reference/fisher_exact_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher exact test p-value — fisher_exact_pval","text":"cat_var1 categorical variable. cat_var2 categorical variable.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fisher_exact_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher exact test p-value — fisher_exact_pval","text":"pval p-value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/format_weights_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Properly format a vector of weights for matrix multiplication — format_weights_row","title":"Properly format a vector of weights for matrix multiplication — format_weights_row","text":"Wrapper around diag() function. function created diag() applied scalar spit scalar back , instead returns identity matrix dimension (scalar * scalar).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/format_weights_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Properly format a vector of weights for matrix multiplication — format_weights_row","text":"","code":"format_weights_row(weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/format_weights_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Properly format a vector of weights for matrix multiplication — format_weights_row","text":"weights_row Vector (possibly size 1) weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fraction_clustered_together.html","id":null,"dir":"Reference","previous_headings":"","what":"Average fraction of clustering together — fraction_clustered_together","title":"Average fraction of clustering together — fraction_clustered_together","text":"Calculate average fraction times patients clusted together full solution continued cluster together subsampled solutions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fraction_clustered_together.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average fraction of clustering together — fraction_clustered_together","text":"","code":"fraction_clustered_together(   data_list_subsamples,   settings_matrix,   solutions_matrix )"},{"path":"https://branchlab.github.io/metasnf/reference/fraction_clustered_together.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average fraction of clustering together — fraction_clustered_together","text":"data_list_subsamples list subsets larger data_list. See ?subsample_data_list obtain object. settings_matrix settings_matrix. solutions_matrix solutions_matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/fraction_clustered_together.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average fraction of clustering together — fraction_clustered_together","text":"fraction_together_df Dataframe containing average fraction continued clustering together supplied solutions","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gender_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock gender data — gender_df","title":"Mock gender data — gender_df","text":"Mock gender data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gender_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock gender data — gender_df","text":"","code":"gender_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/gender_df.html","id":"gender-df","dir":"Reference","previous_headings":"","what":"gender_df","title":"Mock gender data — gender_df","text":"data frame 200 rows 2 columns: patient_id Random three-digit number uniquely identifying patient gender_df Mock gene methylation variable","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gender_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock gender data — gender_df","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_annotations_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate annotations list — generate_annotations_list","title":"Generate annotations list — generate_annotations_list","text":"Intermediate function takes formatted lists variables annotations viewed returns annotation objects usable ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_annotations_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate annotations list — generate_annotations_list","text":"","code":"generate_annotations_list(   df,   left_bar = NULL,   right_bar = NULL,   top_bar = NULL,   bottom_bar = NULL,   left_hm = NULL,   right_hm = NULL,   top_hm = NULL,   bottom_hm = NULL,   show_legend = TRUE,   annotation_colours = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_annotations_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate annotations list — generate_annotations_list","text":"df Dataframe containing data specified remaining arguments. left_bar Named list strings, strings variables df used barplot annotation left plot names names used caption plots legends. right_bar See left_bar. top_bar See left_bar. bottom_bar See left_bar. left_hm Like left_bar, heatmap annotation instead barplot annotation. right_hm See left_hm. top_hm See left_hm. bottom_hm See left_hm. show_legend Add legends annotations. annotation_colours Named list heatmap annotations colours.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_annotations_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate annotations list — generate_annotations_list","text":"annotations_list named list annotations.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of custom clustering algorithms — generate_clust_algs_list","title":"Generate a list of custom clustering algorithms — generate_clust_algs_list","text":"function can used specify custom clustering algorithms apply final similarity matrices produced run batch_snf function.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of custom clustering algorithms — generate_clust_algs_list","text":"","code":"generate_clust_algs_list(..., disable_base = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a list of custom clustering algorithms — generate_clust_algs_list","text":"... arbitrary number named clustering functions (see examples ) disable_base TRUE, prepend base clustering algorithms (spectral_eigen spectral_rot, apply spectral clustering use eigen-gap rotation cost heuristics respectively determining number clusters graph.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list of custom clustering algorithms — generate_clust_algs_list","text":"clust_algs_list well-formatted list clustering algorithms can passed batch_snf generate_settings_list functions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_clust_algs_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a list of custom clustering algorithms — generate_clust_algs_list","text":"","code":"# Using just the base clustering algorithms -------------------------------- # This will just contain spectral_eigen and spectral_rot clust_algs_list <- generate_clust_algs_list()  # Adding algorithms provided by the package -------------------------------- # This will contain the base clustering algorithms (spectral_eigen, #  spectral_rot) as well as two pre-defined spectral clustering functions #  that force the number of clusters to be two or five clust_algs_list <- generate_clust_algs_list(     \"two_cluster_spectral\" = spectral_two,     \"five_cluster_spectral\" = spectral_five )  # Adding your own algorithms ----------------------------------------------- # This will contain the base and user-provided clustering algorithms my_clustering_algorithm <- function(similarity_matrix) {     # your code that converts similarity matrix to clusters here...     # solution_data <- list(     #     \"solution\" = solution,     #     \"nclust\" = number_of_clusters     # )     # return(solution_data) }  # Suppress the base algorithms---------------------------------------------- # This will contain only user-provided clustering algorithms  clust_algs_list <- generate_clust_algs_list(     \"two_cluster_spectral\" = spectral_two,     \"five_cluster_spectral\" = spectral_five,     disable_base = TRUE )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_cocluster_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate patient co-clustering across subsamples — generate_cocluster_data","title":"Calculate patient co-clustering across subsamples — generate_cocluster_data","text":"Given full data_list, subsamples data_list, row settings matrix outlines data clustered, calculates across subsamples number times pair patients subsample well number times cluster. two pieces information stored matrices can supplied cocluster_heatmap pooled_cocluster_heatmap functions.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_cocluster_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate patient co-clustering across subsamples — generate_cocluster_data","text":"","code":"generate_cocluster_data(data_list, data_list_subsamples, settings_matrix_row)"},{"path":"https://branchlab.github.io/metasnf/reference/generate_cocluster_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate patient co-clustering across subsamples — generate_cocluster_data","text":"data_list nested list input data generate_data_list(). data_list_subsamples list subsampled forms data_list (see ?subsample_data_list). settings_matrix_row single row settings matrix calculate co-clustering data .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_cocluster_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate patient co-clustering across subsamples — generate_cocluster_data","text":"cocluster_data named list containing two matrices: \"same_solution\": patient x patient matrix cell number subsamples contained patients \"same_cluster\": patient x patient matrix cell number subsamples patients clustered together","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a data_list — generate_data_list","title":"Generate a data_list — generate_data_list","text":"function generates major data object processed iterating SNF pipeline defined settings_matrix. data_list named nested list containing input dataframes (data), name input dataframe (user's reference), 'domain' dataframe (broader source information input dataframe capturing, determined user's domain knowledge), type variable stored dataframe (continuous, discrete, ordinal, categorical, mixed).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a data_list — generate_data_list","text":"","code":"generate_data_list(   ...,   uid = NULL,   test_subjects = NULL,   train_subjects = NULL,   sort_subjects = TRUE,   return_missing = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a data_list — generate_data_list","text":"... number list formatted (df, \"df_name\", \"df_domain\", \"df_type\") number lists lists formatted (df, \"df_name\", \"df_domain\", \"df_type\") uid (string) name uid column currently used data test_subjects character vector test subjects (useful building full data list label propagation) train_subjects character vector train subjects (useful building full data list label propagation) sort_subjects TRUE, subjects data_list sorted return_missing TRUE, function returns list first element data_list second element vector unique IDs patients removed complete data filtration step.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_data_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a data_list — generate_data_list","text":"","code":"heart_rate_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var1 = c(0.04, 0.1, 0.3),     var2 = c(30, 2, 0.3) )  personality_test_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var3 = c(900, 1990, 373),     var4 = c(509, 2209, 83) )  survey_response_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var5 = c(1, 3, 3),     var6 = c(2, 3, 3) )  city_df <- data.frame(     patient_id = c(\"1\", \"2\", \"3\"),     var7 = c(\"toronto\", \"montreal\", \"vancouver\") )  # Explicitly (Name each nested list element): data_list <- generate_data_list(     list(         data = heart_rate_df,         name = \"heart_rate\",         domain = \"clinical\",         type = \"continuous\"     ),     list(         data = personality_test_df,         name = \"personality_test\",         domain = \"surveys\",         type = \"continuous\"     ),     list(         data = survey_response_df,         name = \"survey_response\",         domain = \"surveys\",         type = \"ordinal\"     ),     list(         data = city_df,         name = \"city\",         domain = \"location\",         type = \"categorical\"     ),     uid = \"patient_id\" )  # Compact loading data_list <- generate_data_list(     list(heart_rate_df, \"heart_rate\", \"clinical\", \"continuous\"),     list(personality_test_df, \"personality_test\", \"surveys\", \"continuous\"),     list(survey_response_df, \"survey_response\", \"surveys\", \"ordinal\"),     list(city_df, \"city\", \"location\", \"categorical\"),     uid = \"patient_id\" )  # Printing data_list summaries summarize_dl(data_list) #>               name        type   domain length width #> 1       heart_rate  continuous clinical      3     3 #> 2 personality_test  continuous  surveys      3     3 #> 3  survey_response     ordinal  surveys      3     3 #> 4             city categorical location      3     2  # Alternative loading: providing a single list of lists list_of_lists <- list(     list(heart_rate_df, \"data1\", \"domain1\", \"continuous\"),     list(personality_test_df, \"data2\", \"domain2\", \"continuous\") )  dl <- generate_data_list(     list_of_lists,     uid = \"patient_id\" )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of distance metrics — generate_distance_metrics_list","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"function can used specify custom distance metrics","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"","code":"generate_distance_metrics_list(   continuous_distances = NULL,   discrete_distances = NULL,   ordinal_distances = NULL,   categorical_distances = NULL,   mixed_distances = NULL,   keep_defaults = TRUE )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"continuous_distances named list distance metric functions discrete_distances named list distance metric functions ordinal_distances named list distance metric functions categorical_distances named list distance metric functions mixed_distances named list distance metric functions keep_defaults TRUE (default), prepend base distance metrics (euclidean standard normalized euclidean)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"distance_metrics_list well-formatted list distance metrics","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_distance_metrics_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a list of distance metrics — generate_distance_metrics_list","text":"","code":"# Using just the base distance metrics  ------------------------------------ distance_metrics_list <- generate_distance_metrics_list()  # Adding your own metrics -------------------------------------------------- # This will contain the base and user-provided clustering algorithms my_distance_metric <- function(df) {     # your code that converts a dataframe to a distance metric here...     # return(distance_metric) }  distance_metrics_list <- generate_distance_metrics_list(     continuous_distances = list(          \"my_distance_metric\" = my_distance_metric     ) )  # Suppress the base metrics------------------------------------------------- # This will contain only user-provided clustering algorithms  distance_metrics_list <- generate_distance_metrics_list(     continuous_distances = list(          \"my_distance_metric\" = my_distance_metric     ),     discrete_distances = list(          \"my_distance_metric\" = my_distance_metric     ),     ordinal_distances = list(          \"my_distance_metric\" = my_distance_metric     ),     categorical_distances = list(          \"my_distance_metric\" = my_distance_metric     ),     mixed_distances = list(          \"my_distance_metric\" = my_distance_metric     ),     keep_defaults = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_settings_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a settings matrix — generate_settings_matrix","title":"Build a settings matrix — generate_settings_matrix","text":"settings_matrix dataframe whose rows completely specify hyperparameters decisions required transform individual input dataframes (found data_list, see ?generate_data_list) single similarity matrix SNF. format settings matrix follows: column named \"row_id\": column used keep track rows integer values . column named \"alpha\": column contains value alpha hyperparameter used run SNF pipeline. column named \"k\": Like , K (nearest neighbours) hyperparameter. column named \"t\": Like , t (number iterations) hyperparameter. column named \"clust_alg\": Specification clustering algorithm applied final similarity matrix identify patient subtypes. default, column can take integer values 1 2, correspond spectral clustering number clusters determined eigen-gap rotation cost heuristic respectively. can learn parameter : https://branchlab.github.io/metasnf/articles/clustering_algorithms.html. column named \"cont_dist\": Specification distance metric used dataframes purely continuous data. can learn metric defaults : https://branchlab.github.io/metasnf/articles/distance_metrics.html column named \"disc_dist\": Like , discrete dataframes. column named \"ord_dist\": Like , ordinal dataframes. column named \"cat_dist\": Like , categorical dataframes. column named \"mixed_dist\": Like , mixed-type (e.g., categorical discrete) dataframes. One column every input dataframe corresponding data_list can either value 0 1. name column formatted \"inc_[]\" square brackets replaced name (found dl_summary(data_list)$\"name\") dataframe. 0, dataframe excluded run SNF pipeline. 1, dataframe included.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_settings_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a settings matrix — generate_settings_matrix","text":"","code":"generate_settings_matrix(   data_list,   seed = NULL,   nrows = 0,   min_removed_inputs = 0,   max_removed_inputs = length(data_list) - 1,   dropout_dist = \"exponential\",   min_alpha = NULL,   max_alpha = NULL,   min_k = NULL,   max_k = NULL,   min_t = NULL,   max_t = NULL,   alpha_values = NULL,   k_values = NULL,   t_values = NULL,   possible_snf_schemes = c(1, 2, 3),   clustering_algorithms = NULL,   continuous_distances = NULL,   discrete_distances = NULL,   ordinal_distances = NULL,   categorical_distances = NULL,   mixed_distances = NULL,   distance_metrics_list = NULL,   snf_input_weights = NULL,   snf_domain_weights = NULL,   retry_limit = 10 )"},{"path":"https://branchlab.github.io/metasnf/reference/generate_settings_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a settings matrix — generate_settings_matrix","text":"data_list nested list input data generate_data_list(). seed set seed random matrix generation. Setting value change seed global environment. nrows Number rows generate settings matrix. min_removed_inputs smallest number input dataframes may randomly removed. default, 0. max_removed_inputs largest number input dataframes may randomly removed. default, 1 less provided input dataframes data_list. dropout_dist Parameter controlling random removal input dataframes occur. Can \"none\" (input dataframes randomly removed), \"uniform\" (uniformly sample min_removed_inputs max_removed_inputs determine number input dataframes remove), \"exponential\" (pick number input dataframes remove sampling min_removed_inputs max_removed_inputs exponential distribution; default). min_alpha minimum value alpha hyperparameter can . Random assigned value alpha row obtained uniformly sampling numbers min_alpha max_alpha intervals 0.1. used conjunction alpha_values parameter. max_alpha maximum value alpha hyperparameter can . See min_alpha parameter. used conjunction alpha_values parameter. min_k minimum value k hyperparameter can . Random assigned value k row obtained uniformly sampling numbers min_k max_k intervals 1. used conjunction k_values parameter. max_k maximum value k hyperparameter can . See min_k parameter. used conjunction k_values parameter. min_t minimum value t hyperparameter can . Random assigned value t row obtained uniformly sampling numbers min_t max_t intervals 1. used conjunction t_values parameter. max_t maximum value t hyperparameter can . See min_t parameter. used conjunction t_values parameter. alpha_values number numeric vector set possible values alpha can take . Value obtained uniformly sampling vector. used conjunction min_alpha max_alpha parameters. k_values number numeric vector set possible values k can take . Value obtained uniformly sampling vector. used conjunction min_k max_k parameters. t_values number numeric vector set possible values t can take . Value obtained uniformly sampling vector. used conjunction min_t max_t parameters. possible_snf_schemes vector containing possible snf_schemes uniformly randomly select . default, vector contains 3 possible schemes: c(1, 2, 3). 1 corresponds \"individual\" scheme, 2 corresponds \"domain\" scheme, 3 corresponds \"twostep\" scheme. clustering_algorithms list clustering algorithms uniformly randomly pick clustering. specified, randomly select spectral clustering using eigen-gap heuristic spectral clustering using rotation cost heuristic. See ?generate_clust_algs_list details running custom clustering algorithms. continuous_distances vector continuous distance metrics use custom distance_metrics_list provided. discrete_distances vector categorical distance metrics use custom distance_metrics_list provided. ordinal_distances vector categorical distance metrics use custom distance_metrics_list provided. categorical_distances vector categorical distance metrics use custom distance_metrics_list provided. mixed_distances vector mixed distance metrics use custom distance_metrics_list provided. distance_metrics_list List containing distance metrics vary . See ?generate_distance_metrics_list. snf_input_weights Nested list containing weights SNF used merge individual input measures (see ?generate_snf_weights) snf_domain_weights Nested list containing weights SNF used merge domains (see ?generate_snf_weights) retry_limit maximum number attempts generate novel row. function return matrices identical rows. range requested possible settings tightens number requested rows increases, risk randomly generating row already exists increases. new random row matched existing row retry_limit number times, function terminate.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_settings_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a settings matrix — generate_settings_matrix","text":"settings_matrix settings matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_target_list.html","id":null,"dir":"Reference","previous_headings":"","what":"(DEPRECATED) Generate target_list object — generate_target_list","title":"(DEPRECATED) Generate target_list object — generate_target_list","text":"(DEPRECATED) Generate target_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_target_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(DEPRECATED) Generate target_list object — generate_target_list","text":"","code":"generate_target_list(...)"},{"path":"https://branchlab.github.io/metasnf/reference/generate_target_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(DEPRECATED) Generate target_list object — generate_target_list","text":"... Function arguments","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_weights_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a matrix to store variable weights — generate_weights_matrix","title":"Generate a matrix to store variable weights — generate_weights_matrix","text":"Generate matrix store variable weights","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_weights_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a matrix to store variable weights — generate_weights_matrix","text":"","code":"generate_weights_matrix(data_list = NULL, nrow = 1, fill = \"ones\")"},{"path":"https://branchlab.github.io/metasnf/reference/generate_weights_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a matrix to store variable weights — generate_weights_matrix","text":"data_list nested list input data generate_data_list(). nrow Number rows generate template weights matrix . fill String indicating populate generate rows . Can \"ones\" (default; fill matrix 1), \"uniform\" (fill matrix uniformly distributed random values), \"exponential\" (fill matrix exponentially distributed random values).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/generate_weights_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a matrix to store variable weights — generate_weights_matrix","text":"weights_matrix properly formatted matrix containing columns variables require weights rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cluster membership information from one solutions matrix row — get_cluster_df","title":"Extract cluster membership information from one solutions matrix row — get_cluster_df","text":"function takes single row solutions matrix returns dataframe containing cluster assignments subjectkey. similar get_clusters(), takes one solutions matrix row returns vector cluster assignments' get_cluster_solutions(), takes solutions matrix number rows returns dataframe indicating cluster assignments rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cluster membership information from one solutions matrix row — get_cluster_df","text":"","code":"get_cluster_df(solutions_matrix_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cluster membership information from one solutions matrix row — get_cluster_df","text":"solutions_matrix_row One row solutions matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract cluster membership information from one solutions matrix row — get_cluster_df","text":"cluster_df dataframe cluster subjectkey.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"(DEPRECATED) Get p-value — get_cluster_pval","title":"(DEPRECATED) Get p-value — get_cluster_pval","text":"(DEPRECATED) Get p-value","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(DEPRECATED) Get p-value — get_cluster_pval","text":"","code":"get_cluster_pval(...)"},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(DEPRECATED) Get p-value — get_cluster_pval","text":"... Function arguments","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_solutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cluster membership information from a solutions_matrix — get_cluster_solutions","title":"Extract cluster membership information from a solutions_matrix — get_cluster_solutions","text":"function takes solutions matrix returns dataframe containing cluster assignments subjectkey. similar 'get_clusters(), takes one solutions matrix row returns vector cluster assignments' get_cluster_df(), takes solutions matrix one row returns dataframe two columns: \"cluster\" \"subjectkey\" (UID observation).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_solutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cluster membership information from a solutions_matrix — get_cluster_solutions","text":"","code":"get_cluster_solutions(solutions_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_solutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cluster membership information from a solutions_matrix — get_cluster_solutions","text":"solutions_matrix solutions_matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_cluster_solutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract cluster membership information from a solutions_matrix — get_cluster_solutions","text":"cluster_solutions dataframe row observation column (apart subjectkey column) indicates cluster observation assigned corresponding solutions matrix row.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cluster membership vector from one solutions matrix row — get_clusters","title":"Extract cluster membership vector from one solutions matrix row — get_clusters","text":"function takes single row solutions matrix returns vector containing cluster assignments observation. similar get_cluster_df(), takes solutions matrix one row returns dataframe two columns: \"cluster\" \"subjectkey\" '(UID observation) get_cluster_solutions(), takes solutions matrix number rows returns dataframe indicating cluster assignments rows.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cluster membership vector from one solutions matrix row — get_clusters","text":"","code":"get_clusters(solutions_matrix_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cluster membership vector from one solutions matrix row — get_clusters","text":"solutions_matrix_row Output matrix row","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract cluster membership vector from one solutions matrix row — get_clusters","text":"clusters list assigned clusters","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance matrices — get_dist_matrix","title":"Calculate distance matrices — get_dist_matrix","text":"Given dataframe numerical variables, return euclidean distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance matrices — get_dist_matrix","text":"","code":"get_dist_matrix(   df,   input_type,   cont_dist_fn,   disc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row )"},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance matrices — get_dist_matrix","text":"df Raw dataframe subject IDs column \"subjectkey\" input_type Either \"numeric\" (resulting euclidean distances), \"categorical\" (resulting binary distances), \"mixed\" (resulting gower distances) cont_dist_fn distance metric function continuous data disc_dist_fn distance metric function discrete data ord_dist_fn distance metric function ordinal data cat_dist_fn distance metric function categorical data mix_dist_fn distance metric function mixed data weights_row Single-row dataframe column names contain column names df row contains corresponding weights_row.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dist_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance matrices — get_dist_matrix","text":"dist_matrix Matrix inter-observation distances","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dl_subjects.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract subjects from a data_list — get_dl_subjects","title":"Extract subjects from a data_list — get_dl_subjects","text":"Extract subjects data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_dl_subjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract subjects from a data_list — get_dl_subjects","text":"","code":"get_dl_subjects(data_list, prefix = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/get_dl_subjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract subjects from a data_list — get_dl_subjects","text":"data_list nested list input data generate_data_list(). prefix TRUE, preserves \"subject_\" prefix added UIDs creating data_list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_heatmap_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the row or column ordering present in a heatmap — get_heatmap_order","title":"Return the row or column ordering present in a heatmap — get_heatmap_order","text":"Return row column ordering present heatmap","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_heatmap_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the row or column ordering present in a heatmap — get_heatmap_order","text":"","code":"get_heatmap_order(heatmap, type = \"rows\")"},{"path":"https://branchlab.github.io/metasnf/reference/get_heatmap_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the row or column ordering present in a heatmap — get_heatmap_order","text":"heatmap heatmap object collect ordering . type type ordering return. Either \"rows\" \"columns\".","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_matrix_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the hierarchical clustering order of a matrix — get_matrix_order","title":"Return the hierarchical clustering order of a matrix — get_matrix_order","text":"Return hierarchical clustering order matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_matrix_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the hierarchical clustering order of a matrix — get_matrix_order","text":"","code":"get_matrix_order(matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/get_matrix_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the hierarchical clustering order of a matrix — get_matrix_order","text":"matrix Matrix cluster.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mean p-value — get_mean_pval","title":"Get mean p-value — get_mean_pval","text":"Given solutions matrix row containing evaluated p-values, returns mean.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mean p-value — get_mean_pval","text":"","code":"get_mean_pval(solutions_matrix_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mean p-value — get_mean_pval","text":"solutions_matrix_row row solutions_matrix object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_mean_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mean p-value — get_mean_pval","text":"mean_pval mean p-value","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_min_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Get minimum p-value — get_min_pval","title":"Get minimum p-value — get_min_pval","text":"Given solutions matrix row containing evaluated p-values, returns min.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_min_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get minimum p-value — get_min_pval","text":"","code":"get_min_pval(solutions_matrix_row)"},{"path":"https://branchlab.github.io/metasnf/reference/get_min_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get minimum p-value — get_min_pval","text":"solutions_matrix_row row solutions_matrix object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_min_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get minimum p-value — get_min_pval","text":"min_pval minimum p-value","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_pvals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get p-values from an extended solutions matrix — get_pvals","title":"Get p-values from an extended solutions matrix — get_pvals","text":"function can used neatly format p-values associated extended solutions matrix. can also calculate negative logs p-values make easier interpret large-scale differences.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_pvals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get p-values from an extended solutions matrix — get_pvals","text":"","code":"get_pvals(   extended_solutions_matrix,   negative_log = FALSE,   keep_summaries = TRUE )"},{"path":"https://branchlab.github.io/metasnf/reference/get_pvals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get p-values from an extended solutions matrix — get_pvals","text":"extended_solutions_matrix output extend_solutions. dataframe contains least one p-value column ending \"_pval\". negative_log TRUE, replace p-values negative log p-values. keep_summaries FALSE, remove mean, min, max p-value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_representative_solutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract representative solutions from a matrix of ARIs — get_representative_solutions","title":"Extract representative solutions from a matrix of ARIs — get_representative_solutions","text":"Following clustering batch_snf, matrix pairwise ARIs show related cluster solution can generated calc_aris function. Partitioning ARI matrix can done visual inspection adjusted_rand_index_heatmap() shiny_annotator. Given indices meta cluster boundaries, function return single representative solution meta cluster based maximum average ARI solutions within meta cluster.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/get_representative_solutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract representative solutions from a matrix of ARIs — get_representative_solutions","text":"","code":"get_representative_solutions(   aris,   split_vector,   order,   solutions_matrix,   filter_fn = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/get_representative_solutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract representative solutions from a matrix of ARIs — get_representative_solutions","text":"aris Matrix adjusted rand indices calc_aris() split_vector vector partition indices. order Numeric vector indicating row ordering settings matrix. solutions_matrix Output batch_snf containing cluster solutions. filter_fn Optional function filter meta-cluster prior maximum average ARI determination. can useful explicitly trying select solution meets certain condition, picking 4 cluster solutions within meta cluster. example valid function fn <- function(x) x[x$\"nclust\" == 4, ].","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gower_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance metric: Gower distance — gower_distance","title":"Distance metric: Gower distance — gower_distance","text":"Distance metric: Gower distance","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gower_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance metric: Gower distance — gower_distance","text":"","code":"gower_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/gower_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance metric: Gower distance — gower_distance","text":"df Dataframe containing least 1 data column. weights_row compatibility - function accept weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/gower_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance metric: Gower distance — gower_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/hamming_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance metric: Hamming distance — hamming_distance","title":"Distance metric: Hamming distance — hamming_distance","text":"Distance metric: Hamming distance","code":""},{"path":"https://branchlab.github.io/metasnf/reference/hamming_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance metric: Hamming distance — hamming_distance","text":"","code":"hamming_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/hamming_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance metric: Hamming distance — hamming_distance","text":"df Dataframe containing one subjectkey column first column least 1 categorical data column. feature data categorical. weights_row Single-row dataframe column names contain column names df row contains corresponding weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/hamming_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance metric: Hamming distance — hamming_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/individual.html","id":null,"dir":"Reference","previous_headings":"","what":"SNF Scheme: Individual — individual","title":"SNF Scheme: Individual — individual","text":"\"vanilla\" scheme - distance matrix conversions input dataframe list ","code":""},{"path":"https://branchlab.github.io/metasnf/reference/individual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SNF Scheme: Individual — individual","text":"","code":"individual(   data_list,   cont_dist_fn,   disc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row,   k,   alpha,   t )"},{"path":"https://branchlab.github.io/metasnf/reference/individual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SNF Scheme: Individual — individual","text":"data_list nested list input data generate_data_list(). cont_dist_fn distance metric function continuous data disc_dist_fn distance metric function discrete data ord_dist_fn distance metric function ordinal data cat_dist_fn distance metric function categorical data mix_dist_fn distance metric function mixed data weights_row dataframe row containing variable weights k k hyperparameter alpha alpha/eta/sigma hyperparameter t SNF number iterations hyperparameter","code":""},{"path":"https://branchlab.github.io/metasnf/reference/individual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SNF Scheme: Individual — individual","text":"fused_network final fused network clustering","code":""},{"path":"https://branchlab.github.io/metasnf/reference/jitter_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Jitter plot separating a feature by cluster — jitter_plot","title":"Jitter plot separating a feature by cluster — jitter_plot","text":"Jitter plot separating feature cluster","code":""},{"path":"https://branchlab.github.io/metasnf/reference/jitter_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jitter plot separating a feature by cluster — jitter_plot","text":"","code":"jitter_plot(df, feature)"},{"path":"https://branchlab.github.io/metasnf/reference/jitter_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jitter plot separating a feature by cluster — jitter_plot","text":"df data.frame containing cluster column feature plot. feature feature plot.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Label propagation — label_prop","title":"Label propagation — label_prop","text":"Given full fused network (one containing pre-labeled training subjects unlabeled test-subjects) clusters pre-labeled subjects, return label propagated list clusters subjects. function derived SNFtool::groupPredict. Modifications made take full fused network input, rather taking input dataframes running SNF internally. ensures alternative approaches data normalization distance matrix calculations can chosen user.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label propagation — label_prop","text":"","code":"label_prop(full_fused_network, clusters)"},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label propagation — label_prop","text":"full_fused_network Network made running SNF training test subjects together clusters vector training subject assigned clusters matching order appear full_fused_network","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label propagation — label_prop","text":"new_clusters list cluster labels subjects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a vector of partition indices into meta cluster labels — label_splits","title":"Convert a vector of partition indices into meta cluster labels — label_splits","text":"Convert vector partition indices meta cluster labels","code":""},{"path":"https://branchlab.github.io/metasnf/reference/label_splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a vector of partition indices into meta cluster labels — label_splits","text":"","code":"label_splits(split_vector, nrow)"},{"path":"https://branchlab.github.io/metasnf/reference/label_splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a vector of partition indices into meta cluster labels — label_splits","text":"split_vector vector partition indices. nrow number rows data partitioned.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_adjust.html","id":null,"dir":"Reference","previous_headings":"","what":"Linearly correct data_list by variables with unwanted signal — linear_adjust","title":"Linearly correct data_list by variables with unwanted signal — linear_adjust","text":"Given data_list correct another data_list categorical variables linearly adjust , corrects first data_list based residuals linear model relating numeric variables first data_list unwanted signal variables second data list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_adjust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linearly correct data_list by variables with unwanted signal — linear_adjust","text":"","code":"linear_adjust(data_list, unwanted_signal_list, sig_digs = NULL)"},{"path":"https://branchlab.github.io/metasnf/reference/linear_adjust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linearly correct data_list by variables with unwanted signal — linear_adjust","text":"data_list nested list input data generate_data_list(). unwanted_signal_list data_list categorical variables mean differences removed first data_list. sig_digs Number significant digits round residuals .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_model_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear model p-value (generic) — linear_model_pval","title":"Linear model p-value (generic) — linear_model_pval","text":"Return p-value F-test linear model two variables","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_model_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear model p-value (generic) — linear_model_pval","text":"","code":"linear_model_pval(predictor, response)"},{"path":"https://branchlab.github.io/metasnf/reference/linear_model_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear model p-value (generic) — linear_model_pval","text":"predictor categorical numeric variable. response numeric variable.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/linear_model_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear model p-value (generic) — linear_model_pval","text":"pval p-value.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/list_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove items from a data_list — list_remove","title":"Remove items from a data_list — list_remove","text":"Removes specified elements provided data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/list_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove items from a data_list — list_remove","text":"","code":"list_remove(list_object, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/list_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove items from a data_list — list_remove","text":"list_object data_list containing components removed ... number components remove list object, passed strings","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lp_solutions_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Label propagate cluster solutions to unclustered subjects — lp_solutions_matrix","title":"Label propagate cluster solutions to unclustered subjects — lp_solutions_matrix","text":"Given solutions_matrix derived training subjects full_data_list containing training test subjects, re-run SNF generate total affinity matrix train subjects use label propagation algorithm assigned predicted clusters test subjects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lp_solutions_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label propagate cluster solutions to unclustered subjects — lp_solutions_matrix","text":"","code":"lp_solutions_matrix(   train_solutions_matrix,   full_data_list,   clust_algs_list = NULL,   distance_metrics_list = NULL,   weights_matrix = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/lp_solutions_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label propagate cluster solutions to unclustered subjects — lp_solutions_matrix","text":"train_solutions_matrix solutions_matrix derived training set. propagation algorithm slow used validating top top meaningful chosen clustering solutions. advisable use small subset rows original training solutions_matrix label propagation. full_data_list data_list containing subjects training testing sets. clust_algs_list custom clustering algorithm list used original batch_snf call, include clust_algs_list well. distance_metrics_list Like - distance_metrics_list () used original batch_snf call. weights_matrix Like .","code":""},{"path":"https://branchlab.github.io/metasnf/reference/lp_solutions_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label propagate cluster solutions to unclustered subjects — lp_solutions_matrix","text":"labeled_df dataframe containing column subjectkeys, column whether subject train (original) test (held ) set, one column per row solutions matrix indicating original propagated clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/manhattan_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"(DEPRECATED) Manhattan plot creation — manhattan_plot","title":"(DEPRECATED) Manhattan plot creation — manhattan_plot","text":"(DEPRECATED) Manhattan plot creation","code":""},{"path":"https://branchlab.github.io/metasnf/reference/manhattan_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(DEPRECATED) Manhattan plot creation — manhattan_plot","text":"","code":"manhattan_plot(...)"},{"path":"https://branchlab.github.io/metasnf/reference/manhattan_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(DEPRECATED) Manhattan plot creation — manhattan_plot","text":"... Function arguments","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mc_manhattan_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Manhattan plot of variable-meta cluster associaiton p-values — mc_manhattan_plot","title":"Manhattan plot of variable-meta cluster associaiton p-values — mc_manhattan_plot","text":"Given dataframe representative meta cluster solutions (see get_representative_solutions(), returns Manhattan plot showing variable separation across variables provided data/target_lists.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/mc_manhattan_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manhattan plot of variable-meta cluster associaiton p-values — mc_manhattan_plot","text":"","code":"mc_manhattan_plot(   rep_solution,   data_list = NULL,   target_list = NULL,   variable_order = NULL,   neg_log_pval_thresh = 5,   threshold = NULL,   point_size = 5,   text_size = 20,   plot_title = NULL,   xints = NULL,   hide_x_labels = FALSE,   domain_colours = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/mc_manhattan_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manhattan plot of variable-meta cluster associaiton p-values — mc_manhattan_plot","text":"rep_solution dataframe representative solutions get_representative_solutions() function. data_list List dataframes containing data information. target_list List dataframes containing target information. variable_order Order variables displayed plot. neg_log_pval_thresh Threshold negative log p-values. threshold p-value threshold plot horizontal dashed line . point_size Size points plot. text_size Size text plot. plot_title Title plot. xints Either \"outcomes\" vector numeric values plot vertical lines . hide_x_labels TRUE, hides x-axis labels. domain_colours Named vector colours domains.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge list of dataframes — merge_df_list","title":"Merge list of dataframes — merge_df_list","text":"Merge list dataframes","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge list of dataframes — merge_df_list","text":"","code":"merge_df_list(df_list, join = \"inner\", uid = \"subjectkey\", no_na = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge list of dataframes — merge_df_list","text":"df_list list dataframes join String indicating join \"inner\" \"full\" uid Column name join . Default \"subjectkey\" no_na Whether remove NA values merged dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/merge_df_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge list of dataframes — merge_df_list","text":"merged_df inner join dataframes list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/methylation_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Modification of SNFtool mock dataframe ","title":"Modification of SNFtool mock dataframe ","text":"Modification SNFtool mock dataframe \"Data2\"","code":""},{"path":"https://branchlab.github.io/metasnf/reference/methylation_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modification of SNFtool mock dataframe ","text":"","code":"methylation_df"},{"path":[]},{"path":"https://branchlab.github.io/metasnf/reference/methylation_df.html","id":"methylation-df","dir":"Reference","previous_headings":"","what":"methylation_df","title":"Modification of SNFtool mock dataframe ","text":"data frame 200 rows 3 columns: gene_1_expression Mock gene methylation variable gene_2_expression Mock gene methylation variable patient_id Random three-digit number uniquely identifying patient","code":""},{"path":"https://branchlab.github.io/metasnf/reference/methylation_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Modification of SNFtool mock dataframe ","text":"data came SNFtool package, slight modifications.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/no_subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","title":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","text":"Removes 'subject_' prefixed columns dataframe. Useful printing solutions_matrix structures console.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/no_subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","text":"","code":"no_subs(df)"},{"path":"https://branchlab.github.io/metasnf/reference/no_subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","text":"df dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/no_subs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select all columns of a dataframe not starting with the 'subject_' prefix. — no_subs","text":"df_no_subs Dataframe without subjects","code":""},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert dataframe columns to numeric type — numcol_to_numeric","title":"Convert dataframe columns to numeric type — numcol_to_numeric","text":"Converts columns dataframe can converted numeric type numeric type.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert dataframe columns to numeric type — numcol_to_numeric","text":"","code":"numcol_to_numeric(df)"},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert dataframe columns to numeric type — numcol_to_numeric","text":"df dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/numcol_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert dataframe columns to numeric type — numcol_to_numeric","text":"df dataframe possible columns converted type numeric","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordinal regression p-value — ord_reg_pval","title":"Ordinal regression p-value — ord_reg_pval","text":"Returns overall p-value ordinal regression categorical predictor response vetors. ordinal response","code":""},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordinal regression p-value — ord_reg_pval","text":"","code":"ord_reg_pval(predictor, response)"},{"path":"https://branchlab.github.io/metasnf/reference/ord_reg_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordinal regression p-value — ord_reg_pval","text":"predictor categorical numeric variable. response numeric variable.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/parallel_batch_snf.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel processing form of batch_snf — parallel_batch_snf","title":"Parallel processing form of batch_snf — parallel_batch_snf","text":"Parallel processing form batch_snf","code":""},{"path":"https://branchlab.github.io/metasnf/reference/parallel_batch_snf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel processing form of batch_snf — parallel_batch_snf","text":"","code":"parallel_batch_snf(   data_list,   distance_metrics_list,   clust_algs_list,   settings_matrix,   weights_matrix,   similarity_matrix_dir,   return_similarity_matrices,   processes )"},{"path":"https://branchlab.github.io/metasnf/reference/parallel_batch_snf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel processing form of batch_snf — parallel_batch_snf","text":"data_list nested list input data generate_data_list(). distance_metrics_list optional nested list containing distance metric function used various variable types (continuous, discrete, ordinal, categorical, mixed). See ?generate_distance_metrics_list details build . clust_algs_list List custom clustering algorithms apply final fused network. See ?generate_clust_algs_list. settings_matrix matrix indicating parameters iterate SNF . weights_matrix matrix containing variable weights use distance matrix calculation. See ?generate_weights_matrix details build . similarity_matrix_dir specified, directory used save generated similarity matrices. return_similarity_matrices TRUE, function return list first element solutions matrix second element list similarity matrices row solutions_matrix. Default FALSE. processes Number parallel processes used executing SNF.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pooled_cocluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a co-clustering heatmap across multiple settings_matrix rows — pooled_cocluster_heatmap","title":"Plot a co-clustering heatmap across multiple settings_matrix rows — pooled_cocluster_heatmap","text":"Generate heatmap using data multiple cocluster_data objects. See ?generate_cocluster_data information. resulting heatmap shows often two patients clustered together several resamplings data.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pooled_cocluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a co-clustering heatmap across multiple settings_matrix rows — pooled_cocluster_heatmap","text":"","code":"pooled_cocluster_heatmap(cocluster_list)"},{"path":"https://branchlab.github.io/metasnf/reference/pooled_cocluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a co-clustering heatmap across multiple settings_matrix rows — pooled_cocluster_heatmap","text":"cocluster_list list cocluster_data objects (?generate_cocluster_data) pool together heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dl_sk.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ","title":"Add ","text":"Add \"subject_\" prefix UID values subjectkey column","code":""},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dl_sk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ","text":"","code":"prefix_dl_sk(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dl_sk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ","text":"data_list nested list input data generate_data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/prefix_dl_sk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add ","text":"data_list data_list without NAs","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pval_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of p-values — pval_heatmap","title":"Heatmap of p-values — pval_heatmap","text":"Heatmap p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/pval_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of p-values — pval_heatmap","text":"","code":"pval_heatmap(   pvals,   order = NULL,   cluster_columns = TRUE,   cluster_rows = FALSE,   show_column_names = FALSE,   show_row_names = FALSE,   colour_breaks = c(0, 0.5, 1),   colours = c(\"red2\", \"lightyellow\", \"slateblue4\") )"},{"path":"https://branchlab.github.io/metasnf/reference/pval_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of p-values — pval_heatmap","text":"pvals matrix p-values. order Numeric vector containing row order heatmap. cluster_columns Whether columns sorted hierarchical clustering. cluster_rows Whether rows sorted hierarchical clustering. show_column_names Whether column names shown. show_row_names Whether row names shown. colour_breaks Numeric vector breaks legend. colours Vector colours use heatmap. match length colour_breaks.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random removal sequence — random_removal","title":"Generate random removal sequence — random_removal","text":"Helper function contribute rows within settings matrix. Number columns removed follows uniform exponential probability distribution.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random removal sequence — random_removal","text":"","code":"random_removal(   columns,   min_removed_inputs,   max_removed_inputs,   dropout_dist = \"exponential\" )"},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random removal sequence — random_removal","text":"columns Columns settings_matrix passed min_removed_inputs smallest number input dataframes may randomly removed. max_removed_inputs largest number input dataframes may randomly removed. dropout_dist Indication input dataframes dropped. can \"none\" (dropout), \"uniform\" (uniformly draw number min max removed inputs), \"exponential\" (like uniform, using exponential distribution; default).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/random_removal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random removal sequence — random_removal","text":"inclusions_df Dataframe can rbind'ed settings_matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/reduce_dl_to_common.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce data_list to common subjects — reduce_dl_to_common","title":"Reduce data_list to common subjects — reduce_dl_to_common","text":"Given data_list object, reduce nested dataframe contain set subjects shared nested dataframes","code":""},{"path":"https://branchlab.github.io/metasnf/reference/reduce_dl_to_common.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce data_list to common subjects — reduce_dl_to_common","text":"","code":"reduce_dl_to_common(data_list)"},{"path":"https://branchlab.github.io/metasnf/reference/reduce_dl_to_common.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce data_list to common subjects — reduce_dl_to_common","text":"data_list nested list input data generate_data_list().","code":""},{"path":"https://branchlab.github.io/metasnf/reference/reduce_dl_to_common.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce data_list to common subjects — reduce_dl_to_common","text":"reduced_data_list data_list object subsetted subjectssnf shared across nested dataframes","code":""},{"path":"https://branchlab.github.io/metasnf/reference/remove_dl_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NAs from a data_list object — remove_dl_na","title":"Remove NAs from a data_list object — remove_dl_na","text":"Remove NAs data_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/remove_dl_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NAs from a data_list object — remove_dl_na","text":"","code":"remove_dl_na(data_list, return_missing = FALSE)"},{"path":"https://branchlab.github.io/metasnf/reference/remove_dl_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NAs from a data_list object — remove_dl_na","text":"data_list nested list input data generate_data_list(). return_missing TRUE, function returns list first element data_list second element vector unique IDs patients removed complete data filtration step.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/remove_dl_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NAs from a data_list object — remove_dl_na","text":"data_list data_list without NAs","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rename_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename features in a data_list — rename_dl","title":"Rename features in a data_list — rename_dl","text":"Rename features data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rename_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename features in a data_list — rename_dl","text":"","code":"rename_dl(data_list, name_mapping)"},{"path":"https://branchlab.github.io/metasnf/reference/rename_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename features in a data_list — rename_dl","text":"data_list nested list input data generate_data_list(). name_mapping named vector values features renamed names new names features.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/rename_dl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename features in a data_list — rename_dl","text":"","code":"library(metasnf)  data_list <- generate_data_list(     list(abcd_pubertal, \"pubertal_status\", \"demographics\", \"continuous\"),     list(abcd_anxiety, \"anxiety\", \"behaviour\", \"ordinal\"),     list(abcd_depress, \"depressed\", \"behaviour\", \"ordinal\"),     uid = \"patient\" )  summarize_dl(data_list, \"feature\") #>              name       type       domain #> 1 pubertal_status continuous demographics #> 2  cbcl_anxiety_r    ordinal    behaviour #> 3  cbcl_depress_r    ordinal    behaviour  name_changes <- c(     \"anxiety_score\" = \"cbcl_anxiety_r\",     \"depression_score\" = \"cbcl_depress_r\" )  data_list <- rename_dl(data_list, name_changes)  summarize_dl(data_list, \"feature\") #>               name       type       domain #> 1  pubertal_status continuous demographics #> 2    anxiety_score    ordinal    behaviour #> 3 depression_score    ordinal    behaviour"},{"path":"https://branchlab.github.io/metasnf/reference/reorder_dl_subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder the subjects in a data_list — reorder_dl_subs","title":"Reorder the subjects in a data_list — reorder_dl_subs","text":"Reorder subjects data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/reorder_dl_subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder the subjects in a data_list — reorder_dl_subs","text":"","code":"reorder_dl_subs(data_list, ordered_subjects)"},{"path":"https://branchlab.github.io/metasnf/reference/reorder_dl_subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder the subjects in a data_list — reorder_dl_subs","text":"data_list nested list input data generate_data_list(). ordered_subjects vector subjectkey values data_list desired order sorted data_list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper resample function found in ?sample — resample","title":"Helper resample function found in ?sample — resample","text":"Like sample, given single value x, returns back single value instead random value 1 x.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper resample function found in ?sample — resample","text":"","code":"resample(x, ...)"},{"path":"https://branchlab.github.io/metasnf/reference/resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper resample function found in ?sample — resample","text":"x Vector single value sample ... Remaining arguments base::sample function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/save_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a heatmap object to a file — save_heatmap","title":"Save a heatmap object to a file — save_heatmap","text":"Save heatmap object file","code":""},{"path":"https://branchlab.github.io/metasnf/reference/save_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a heatmap object to a file — save_heatmap","text":"","code":"save_heatmap(heatmap, path, width = 480, height = 480, res = 100)"},{"path":"https://branchlab.github.io/metasnf/reference/save_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a heatmap object to a file — save_heatmap","text":"heatmap heatmap object save. path path save heatmap . width width heatmap. height height heatmap. res resolution heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/scale_diagonals.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust the diagonals of a matrix — scale_diagonals","title":"Adjust the diagonals of a matrix — scale_diagonals","text":"Adjust diagonals matrix reduce contrast -diagonals plotting.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/scale_diagonals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust the diagonals of a matrix — scale_diagonals","text":"","code":"scale_diagonals(matrix, method = \"mean\")"},{"path":"https://branchlab.github.io/metasnf/reference/scale_diagonals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust the diagonals of a matrix — scale_diagonals","text":"matrix Matrix rescale. method Method rescaling. Can : \"mean\" (replace diagonals average value -diagonals) \"zero\" (replace diagonals 0) \"min\" (replace diagonals min value -diagonals) \"max\" (replace diagonals max value -diagonals)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/settings_matrix_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap for visualizing a settings matrix — settings_matrix_heatmap","title":"Heatmap for visualizing a settings matrix — settings_matrix_heatmap","text":"Scales settings matrix values 0 1 plots heatmap. Rows can reordered match prior meta clustering results.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/settings_matrix_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap for visualizing a settings matrix — settings_matrix_heatmap","text":"","code":"settings_matrix_heatmap(   settings_matrix,   order = NULL,   remove_fixed_columns = TRUE,   show_column_names = TRUE,   show_row_names = TRUE,   colour_breaks = c(0, 1),   colours = c(\"black\", \"darkseagreen\") )"},{"path":"https://branchlab.github.io/metasnf/reference/settings_matrix_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap for visualizing a settings matrix — settings_matrix_heatmap","text":"settings_matrix Matrix indicating parameters iterate SNF . order Numeric vector indicating row ordering settings matrix. remove_fixed_columns Whether columns variation removed. show_column_names Whether column names shown. show_row_names Whether row names shown. colour_breaks Numeric vector breaks legend. colours Vector colours use heatmap. match length colour_breaks.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sew_euclidean_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Squared (excluding weights) Euclidean distance — sew_euclidean_distance","title":"Squared (excluding weights) Euclidean distance — sew_euclidean_distance","text":"Squared (excluding weights) Euclidean distance","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sew_euclidean_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squared (excluding weights) Euclidean distance — sew_euclidean_distance","text":"","code":"sew_euclidean_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/sew_euclidean_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squared (excluding weights) Euclidean distance — sew_euclidean_distance","text":"df Dataframe containing least 1 data column. weights_row Single-row dataframe column names contain column names df row contains corresponding weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sew_euclidean_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Squared (excluding weights) Euclidean distance — sew_euclidean_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/shiny_annotator.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch shiny app to identify meta cluster boundaries — shiny_annotator","title":"Launch shiny app to identify meta cluster boundaries — shiny_annotator","text":"Launch shiny app identify meta cluster boundaries","code":""},{"path":"https://branchlab.github.io/metasnf/reference/shiny_annotator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch shiny app to identify meta cluster boundaries — shiny_annotator","text":"","code":"shiny_annotator(ari_heatmap)"},{"path":"https://branchlab.github.io/metasnf/reference/shiny_annotator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch shiny app to identify meta cluster boundaries — shiny_annotator","text":"ari_heatmap Heatmap ARIs divide meta clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","title":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","text":"Plot heatmap similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","text":"","code":"similarity_matrix_heatmap(   similarity_matrix,   order = NULL,   cluster_solution = NULL,   scale_diag = \"mean\",   log_graph = TRUE,   cluster_rows = FALSE,   cluster_columns = FALSE,   show_row_names = FALSE,   show_column_names = FALSE,   data_list = NULL,   data = NULL,   left_bar = NULL,   right_bar = NULL,   top_bar = NULL,   bottom_bar = NULL,   left_hm = NULL,   right_hm = NULL,   top_hm = NULL,   bottom_hm = NULL,   annotation_colours = NULL,   min_colour = NULL,   max_colour = NULL,   split_vector = NULL,   ... )"},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap of similarity matrix — similarity_matrix_heatmap","text":"similarity_matrix similarity matrix order Vector numbers reorder similarity matrix (data provided). Overwrites ordering specified cluster_solution param. cluster_solution Vector containing cluster assignments. scale_diag Method rescaling matrix diagonals. Can \"none\" (change diagonals), \"mean\" (replace diagonals average value -diagonals), \"zero\" (replace diagonals 0). log_graph TRUE, log transforms graph. cluster_rows Parameter ComplexHeatmap::Heatmap. cluster_columns Parameter ComplexHeatmap::Heatmap. show_row_names Parameter ComplexHeatmap::Heatmap. show_column_names Parameter ComplexHeatmap::Heatmap. data_list nested list input data generate_data_list(). data dataframe containing elements requested annotation. left_bar Named list strings, strings variables df used barplot annotation left plot names names used caption plots legends. right_bar See left_bar. top_bar See left_bar. bottom_bar See left_bar. left_hm Like left_bar, heatmap annotation instead barplot annotation. right_hm See left_hm. top_hm See left_hm. bottom_hm See left_hm. annotation_colours Named list heatmap annotations colours. min_colour Colour used lowest value heatmap. max_colour Colour used highest value heatmap. split_vector vector partition indices. ... Additional parameters passed ComplexHeatmap::Heatmap.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","title":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","text":"Generate complete path filename store similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","text":"","code":"similarity_matrix_path(similarity_matrix_dir, i)"},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","text":"similarity_matrix_dir Directory store similarity matrices Corresponding settings matrix row","code":""},{"path":"https://branchlab.github.io/metasnf/reference/similarity_matrix_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a complete path and filename to store an similarity matrix — similarity_matrix_path","text":"path Complete path filename store similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/siw_euclidean_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Squared (including weights) Euclidean distance — siw_euclidean_distance","title":"Squared (including weights) Euclidean distance — siw_euclidean_distance","text":"Squared (including weights) Euclidean distance","code":""},{"path":"https://branchlab.github.io/metasnf/reference/siw_euclidean_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squared (including weights) Euclidean distance — siw_euclidean_distance","text":"","code":"siw_euclidean_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/siw_euclidean_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squared (including weights) Euclidean distance — siw_euclidean_distance","text":"df Dataframe containing least 1 data column. weights_row Single-row dataframe column names contain column names df row contains corresponding weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/siw_euclidean_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Squared (including weights) Euclidean distance — siw_euclidean_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sn_euclidean_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance metric: Standard normalization then Euclidean — sn_euclidean_distance","title":"Distance metric: Standard normalization then Euclidean — sn_euclidean_distance","text":"Distance metric: Standard normalization Euclidean","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sn_euclidean_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance metric: Standard normalization then Euclidean — sn_euclidean_distance","text":"","code":"sn_euclidean_distance(df, weights_row)"},{"path":"https://branchlab.github.io/metasnf/reference/sn_euclidean_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance metric: Standard normalization then Euclidean — sn_euclidean_distance","text":"df Dataframe containing least 1 data column. weights_row Single-row dataframe column names contain column names df row contains corresponding weights.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/sn_euclidean_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance metric: Standard normalization then Euclidean — sn_euclidean_distance","text":"distance_matrix distance matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data list to a similarity matrix through a variety of SNF schemes — snf_step","title":"Convert a data list to a similarity matrix through a variety of SNF schemes — snf_step","text":"Convert data list similarity matrix variety SNF schemes","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data list to a similarity matrix through a variety of SNF schemes — snf_step","text":"","code":"snf_step(   data_list,   scheme,   k = 20,   alpha = 0.5,   t = 20,   cont_dist_fn,   disc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row )"},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data list to a similarity matrix through a variety of SNF schemes — snf_step","text":"data_list nested list input data generate_data_list(). scheme SNF system use achieve final fused network k k hyperparameter alpha alpha/eta/sigma hyperparameter t SNF number iterations hyperparameter cont_dist_fn distance metric function continuous data disc_dist_fn distance metric function discrete data ord_dist_fn distance metric function ordinal data cat_dist_fn distance metric function categorical data mix_dist_fn distance metric function mixed data weights_row dataframe row containing variable weights","code":""},{"path":"https://branchlab.github.io/metasnf/reference/snf_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data list to a similarity matrix through a variety of SNF schemes — snf_step","text":"fused_network final fused network clustering","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eigen.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen","title":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen","text":"Applies spectral clustering similarity matrix. Number clusters based eigen-gap heuristic.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eigen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen","text":"","code":"spectral_eigen(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eigen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eigen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eigen_classic.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen_classic","title":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen_classic","text":"Applies spectral clustering similarity matrix. Number clusters based eigen-gap heuristic. Range possible cluster solutions fixed 2 5 inclusive.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eigen_classic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen_classic","text":"","code":"spectral_eigen_classic(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eigen_classic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen_classic","text":"similarity_matrix similarity matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eigen_classic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering with eigen-gap heuristic — spectral_eigen_classic","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eight.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a eight cluster solution — spectral_eight","title":"Clustering algorithm: Spectral clustering for a eight cluster solution — spectral_eight","text":"Applies spectral clustering similarity matrix. Seeks eight clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a eight cluster solution — spectral_eight","text":"","code":"spectral_eight(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a eight cluster solution — spectral_eight","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_eight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a eight cluster solution — spectral_eight","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_five.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a five cluster solution — spectral_five","title":"Clustering algorithm: Spectral clustering for a five cluster solution — spectral_five","text":"Applies spectral clustering similarity matrix. Seeks five clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_five.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a five cluster solution — spectral_five","text":"","code":"spectral_five(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_five.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a five cluster solution — spectral_five","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_five.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a five cluster solution — spectral_five","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_four.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a four cluster solution — spectral_four","title":"Clustering algorithm: Spectral clustering for a four cluster solution — spectral_four","text":"Applies spectral clustering similarity matrix. Seeks four clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_four.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a four cluster solution — spectral_four","text":"","code":"spectral_four(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_four.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a four cluster solution — spectral_four","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_four.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a four cluster solution — spectral_four","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_nine.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a nine cluster solution — spectral_nine","title":"Clustering algorithm: Spectral clustering for a nine cluster solution — spectral_nine","text":"Applies spectral clustering similarity matrix. Seeks nine clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_nine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a nine cluster solution — spectral_nine","text":"","code":"spectral_nine(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_nine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a nine cluster solution — spectral_nine","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_nine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a nine cluster solution — spectral_nine","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_rot.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot","title":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot","text":"Applies spectral clustering similarity matrix. Number clusters based rotation cost heuristic.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_rot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot","text":"","code":"spectral_rot(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_rot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_rot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_rot_classic.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot_classic","title":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot_classic","text":"Applies spectral clustering similarity matrix. Number clusters based rotation cost heuristic.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_rot_classic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot_classic","text":"","code":"spectral_rot_classic(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_rot_classic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot_classic","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_rot_classic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering with rotation cost heuristic — spectral_rot_classic","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_seven.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a seven cluster solution — spectral_seven","title":"Clustering algorithm: Spectral clustering for a seven cluster solution — spectral_seven","text":"Applies spectral clustering similarity matrix. Seeks seven clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_seven.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a seven cluster solution — spectral_seven","text":"","code":"spectral_seven(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_seven.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a seven cluster solution — spectral_seven","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_seven.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a seven cluster solution — spectral_seven","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_six.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a six cluster solution — spectral_six","title":"Clustering algorithm: Spectral clustering for a six cluster solution — spectral_six","text":"Applies spectral clustering similarity matrix. Seeks six clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_six.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a six cluster solution — spectral_six","text":"","code":"spectral_six(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_six.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a six cluster solution — spectral_six","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_six.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a six cluster solution — spectral_six","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_ten.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a ten cluster solution — spectral_ten","title":"Clustering algorithm: Spectral clustering for a ten cluster solution — spectral_ten","text":"Applies spectral clustering similarity matrix. Seeks ten clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_ten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a ten cluster solution — spectral_ten","text":"","code":"spectral_ten(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_ten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a ten cluster solution — spectral_ten","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_ten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a ten cluster solution — spectral_ten","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_three.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a three cluster solution — spectral_three","title":"Clustering algorithm: Spectral clustering for a three cluster solution — spectral_three","text":"Applies spectral clustering similarity matrix. Seeks three clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_three.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a three cluster solution — spectral_three","text":"","code":"spectral_three(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_three.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a three cluster solution — spectral_three","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_three.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a three cluster solution — spectral_three","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_two.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering algorithm: Spectral clustering for a two cluster solution — spectral_two","title":"Clustering algorithm: Spectral clustering for a two cluster solution — spectral_two","text":"Applies spectral clustering similarity matrix. Seeks two clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_two.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering algorithm: Spectral clustering for a two cluster solution — spectral_two","text":"","code":"spectral_two(similarity_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/spectral_two.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering algorithm: Spectral clustering for a two cluster solution — spectral_two","text":"similarity_matrix similarity matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/spectral_two.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustering algorithm: Spectral clustering for a two cluster solution — spectral_two","text":"solution_data list storing cluster assignments number clusters.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Select all columns of a dataframe starting with a given string prefix. — subs","title":"Select all columns of a dataframe starting with a given string prefix. — subs","text":"Removes columns prefixed 'subject_' prefixed columns dataframe. Useful intermediate step extracting subject UIDs solutions_matrix structure.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select all columns of a dataframe starting with a given string prefix. — subs","text":"","code":"subs(df)"},{"path":"https://branchlab.github.io/metasnf/reference/subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select all columns of a dataframe starting with a given string prefix. — subs","text":"df Dataframe","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select all columns of a dataframe starting with a given string prefix. — subs","text":"df_subs Dataframe 'subject_' prefixed columns","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create subsamples of a data_list — subsample_data_list","title":"Create subsamples of a data_list — subsample_data_list","text":"Create subsamples data_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create subsamples of a data_list — subsample_data_list","text":"","code":"subsample_data_list(   data_list,   n_subsamples,   subsample_fraction = NULL,   n_subjects = NULL )"},{"path":"https://branchlab.github.io/metasnf/reference/subsample_data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create subsamples of a data_list — subsample_data_list","text":"data_list nested list input data generate_data_list(). n_subsamples Number subsamples create. subsample_fraction Percentage patients include per subsample. n_subjects Number patients include per subsample.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_data_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create subsamples of a data_list — subsample_data_list","text":"data_list_subsamples list subsampled data_list objects.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"Calculate pairwise adjusted Rand indices across subsamples data","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"","code":"subsample_pairwise_aris(data_list_subsamples, settings_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"data_list_subsamples list subsets larger data_list. See ?subsample_data_list obtain object. settings_matrix settings_matrix.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/subsample_pairwise_aris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pairwise adjusted Rand indices across subsamples of data — subsample_pairwise_aris","text":"pairwise_ari_df Dataframe containing column row (row original settings_matrix rest information corresponds ), mean_ari (average adjusted Rand Index across subsamples), ari_sd (standard deviation adjusted Rand Indices).","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_clust_algs_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a clust_algs_list object — summarize_clust_algs_list","title":"Summarize a clust_algs_list object — summarize_clust_algs_list","text":"Summarize clust_algs_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_clust_algs_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a clust_algs_list object — summarize_clust_algs_list","text":"","code":"summarize_clust_algs_list(clust_algs_list)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_clust_algs_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a clust_algs_list object — summarize_clust_algs_list","text":"clust_algs_list clust_algs_list object","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_clust_algs_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a clust_algs_list object — summarize_clust_algs_list","text":"summary_df Dataframe containing name algorithm number algorithm (value settings_matrix used access algorithm)","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a data list — summarize_dl","title":"Summarize a data list — summarize_dl","text":"Summarize data list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a data list — summarize_dl","text":"","code":"summarize_dl(data_list, scope = \"component\")"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a data list — summarize_dl","text":"data_list nested list input data generate_data_list(). scope level detail summary. Options : \"component\" (default): One row per component (dataframe) data_list. \"feature\": One row feature data_list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dml.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize metrics contained in a distance_metrics_list — summarize_dml","title":"Summarize metrics contained in a distance_metrics_list — summarize_dml","text":"Summarize metrics contained distance_metrics_list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize metrics contained in a distance_metrics_list — summarize_dml","text":"","code":"summarize_dml(distance_metrics_list)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_dml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize metrics contained in a distance_metrics_list — summarize_dml","text":"distance_metrics_list distance_metrics_list.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_pvals.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize p-value columns of an extended solutions matrix — summarize_pvals","title":"Summarize p-value columns of an extended solutions matrix — summarize_pvals","text":"Summarize p-value columns extended solutions matrix","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_pvals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize p-value columns of an extended solutions matrix — summarize_pvals","text":"","code":"summarize_pvals(extended_solutions_matrix)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_pvals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize p-value columns of an extended solutions matrix — summarize_pvals","text":"extended_solutions_matrix Result extend_solutions","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_target_list.html","id":null,"dir":"Reference","previous_headings":"","what":"(DEPRECATED) Summarize target list — summarize_target_list","title":"(DEPRECATED) Summarize target list — summarize_target_list","text":"(DEPRECATED) Summarize target list","code":""},{"path":"https://branchlab.github.io/metasnf/reference/summarize_target_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(DEPRECATED) Summarize target list — summarize_target_list","text":"","code":"summarize_target_list(...)"},{"path":"https://branchlab.github.io/metasnf/reference/summarize_target_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(DEPRECATED) Summarize target list — summarize_target_list","text":"... Function arguments","code":""},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Training and testing split — train_test_assign","title":"Training and testing split — train_test_assign","text":"Given vector subject_id threshold, returns list members training set testing set. function relies whether absolute value Jenkins's one_at_a_time hash function exceeds maximum possible value (2147483647) multiplied threshold.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Training and testing split — train_test_assign","text":"","code":"train_test_assign(train_frac, subjects, seed = 42)"},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Training and testing split — train_test_assign","text":"train_frac fraction (0 1) subjects training subjects available subjects distribution seed Seed used Jenkins's one_at_a_time hash function","code":""},{"path":"https://branchlab.github.io/metasnf/reference/train_test_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Training and testing split — train_test_assign","text":"split named list containing training testing subject_ids","code":""},{"path":"https://branchlab.github.io/metasnf/reference/two_step_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Two step SNF — two_step_merge","title":"Two step SNF — two_step_merge","text":"Individual dataframes individual similarity matrices one fused network per domain one final fused network.","code":""},{"path":"https://branchlab.github.io/metasnf/reference/two_step_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two step SNF — two_step_merge","text":"","code":"two_step_merge(   data_list,   k = 20,   alpha = 0.5,   t = 20,   cont_dist_fn,   disc_dist_fn,   ord_dist_fn,   cat_dist_fn,   mix_dist_fn,   weights_row )"},{"path":"https://branchlab.github.io/metasnf/reference/two_step_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two step SNF — two_step_merge","text":"data_list nested list input data generate_data_list(). k k hyperparameter alpha alpha/eta/sigma hyperparameter t SNF number iterations hyperparameter cont_dist_fn distance metric function continuous data disc_dist_fn distance metric function discrete data ord_dist_fn distance metric function ordinal data cat_dist_fn distance metric function categorical data mix_dist_fn distance metric function mixed data weights_row dataframe row containing variable weights","code":""},{"path":"https://branchlab.github.io/metasnf/reference/two_step_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two step SNF — two_step_merge","text":"fused_network final fused network clustering","code":""},{"path":"https://branchlab.github.io/metasnf/reference/var_manhattan_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Manhattan plot of variable-variable associaiton p-values — var_manhattan_plot","title":"Manhattan plot of variable-variable associaiton p-values — var_manhattan_plot","text":"Manhattan plot variable-variable associaiton p-values","code":""},{"path":"https://branchlab.github.io/metasnf/reference/var_manhattan_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manhattan plot of variable-variable associaiton p-values — var_manhattan_plot","text":"","code":"var_manhattan_plot(   data_list,   key_var,   neg_log_pval_thresh = 5,   threshold = NULL,   point_size = 5,   text_size = 20,   plot_title = NULL,   hide_x_labels = FALSE,   bonferroni_line = FALSE )"},{"path":"https://branchlab.github.io/metasnf/reference/var_manhattan_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manhattan plot of variable-variable associaiton p-values — var_manhattan_plot","text":"data_list List dataframes containing data information. key_var Variable association p-values variables plotted. neg_log_pval_thresh Threshold negative log p-values. threshold p-value threshold plot dashed line . point_size Size points plot. text_size Size text plot. plot_title Title plot. hide_x_labels TRUE, hides x-axis labels. bonferroni_line TRUE, plots dashed black line Bonferroni-corrected equivalent p-value threshold.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-6-1","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.6.1","text":"auto_plot() automatically generate bar /jitter plots showing features data_list/target_list distributed across single cluster solution","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-6-0","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.6.0","text":"shiny_annotator() function can used identify indices meta clusters within adjusted_rand_index_heatmap adjusted_rand_index_heatmap() now split_vector parameter slice heatmap meta clusters rename_dl() can used rename features data_list manhattan_plot split var_manhattan_plot (key variable - variables), esm_manhattan_plot (cluster solutions extended solutions matrix variables), mc_manhattan_plot (like esm_manhattan_plot, meta-cluster level) get_representative_solutions extracts max-ARI solutions extended solutions matrix based split_vector containing meta cluster boundaries batch_nmi calculates NMI scores (see https://branchlab.github.io/metasnf/articles/nmi_scores.html) extend_solutions calculate p-value summary measures (min/max/mean) data_list passed target_list parameter, also accept calculate p-values data_list passed data_list parameter heatmap function adjusted_rand_index_heatmap assoc_pval_heatmap updated parameters improve ease use flexibility (including easier colour control)","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"deprecated-functions-0-6-0","dir":"Changelog","previous_headings":"","what":"Deprecated functions","title":"metasnf 0.6.0","text":"get_clustered_subs removed (thing get_cluster_df) get_cluster_pval deprecated calc_assoc_pval functions related target_lists specifically deprecated favour simply using generate_data_list() corresponding functions","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"name-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Name changes","title":"metasnf 0.6.0","text":"remove_signal renamed linear_adjust better reflect function summarize_distance_metrics_list shortened summarize_dml correlation_pval_heatmap renamed assoc_pval_heatmap calc_om_aris renamed calc_aris","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-vignettes-0-6-0","dir":"Changelog","previous_headings":"","what":"New vignettes","title":"metasnf 0.6.0","text":"NMI scores: https://branchlab.github.io/metasnf/articles/nmi_scores.html Imputations: https://branchlab.github.io/metasnf/articles/imputations.html","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"metasnf 0.6.0","text":"Vignettes updated Warnings raised spectral clustering generate cluster solution matching number clusters requested Chi-squared extend_solutions p-value calculation warnings now suppressed","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"breaking-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"metasnf 0.5.0","text":"variables values referencing p-values rephrased end _pval instead mix p_val, pval, p. Removal deprecated functions pval_select, p_val_select, top_oms_per_cluster, check_subj_orders_for_lp, get_p, chi_sq_pval, Function pval_summaries, calculate min/max/mean p-values, replaced summarize_pvals train_test_assign now provides results named list subject vectors instead data.frame. keep_split function removed accordingly.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"metasnf 0.5.0","text":"sort_subjects parameter added generate_data_list allow sorting subjects data_list","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-046","dir":"Changelog","previous_headings":"","what":"metasnf 0.4.6","title":"metasnf 0.4.6","text":"fix bug extend_solutions incorrectly assigns p-values variable columns grep (substring instead exact match)","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-045","dir":"Changelog","previous_headings":"","what":"metasnf 0.4.5","title":"metasnf 0.4.5","text":"extend_solutions can now also parallelized (see ?extend_solutions) remove_signal function sig_digs parameter can used restrict many significant figures returned resulting residuals","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-044","dir":"Changelog","previous_headings":"","what":"metasnf 0.4.4","title":"metasnf 0.4.4","text":"calc_om_aris now MUCH faster removing excessive calls .numeric enabling parallel processing future.apply. Thanks idea, Alper.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-043","dir":"Changelog","previous_headings":"","what":"metasnf 0.4.3","title":"metasnf 0.4.3","text":"Reformatting extend_solutions better handle extreme p-values (e.g. infinity) Replacement p_val_select pval_select can also return negative-log p-values","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-0-4-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 0.4.2","text":"generate_data_list correctly errors components partially named (resolves https://github.com/BRANCHlab/metasnf/issues/10)","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"breaking-changes-0-4-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"metasnf 0.4.1","text":"lp_row function replaced lp_solutions_matrix. new function order agnostic: full data lists can constructed without restriction training testing set subjects sorted. Subjects present provided solutions matrix propagate assumed training subjects.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-4-1","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.4.1","text":"calc_om_aris now progress parameter. set true used conjunction progressr::with_progress(), progress bar shown calculations. Learn ?calc_om_aris.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 0.4.1","text":"grepl instead grep used extend_solutions reduce errors chi-squared warning occurs","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-changes-0-4-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"metasnf 0.4.1","text":"vignette specifically label propagation added Full removal several previously deprecated functions Minor source code reformatting","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-4-0","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.4.0","text":"Parallel processing now available! Check vignette : https://branchlab.github.io/metasnf/articles/parallel_processing.html","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"breaking-changes-0-3-3","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"metasnf 0.3.3","text":"input_wt domain_wt removed settings_matrix rest package - weighting level longer planned. result altered settings matrices, superficially - columns “input_wt” “domain_wt” missing, effect SNF prior patch anyway.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"metasnf-032","dir":"Changelog","previous_headings":"","what":"metasnf 0.3.2","title":"metasnf 0.3.2","text":"keep_split preserve observations assigned split present dataframe split. Instead removed, observations NA values.","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"metasnf 0.3.1","text":"fixed fraction_clustered_together crashing cluster assigned single observation fixed fraction_clustered_together running due bracket typo evaluating length data_list","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-3-1","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.3.1","text":"correlation_pval_heatmap function can significance stars disabled significance_stars parameter","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-changes-0-3-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"metasnf 0.3.1","text":"pkgdown site now google site verification code","code":""},{"path":[]},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"metasnf 0.3.0","text":"original SNFtool function estimateNumberOfClustersGivenGraph used point without specifying parameter NUMC. Consequently, final similarity matrices clustered default methods (spectral clustering based eigen-gap rotation cost heuristics) capable resulting 5 clusters. default functions updated span 2 clusters 10 clusters. Users likely see different clustering results result change. replicate behaviour default spectral clustering prior v0.3.0, users copy following code prior batch_snf command: Added “workspace=2e7” parameter fisher_exact_pval function avoid “FEXACT” error (like https://github.com/Lagkouvardos/Rhea/issues/17). Impact results expected negligible.","code":"clust_algs_list <- generate_clust_algs_list(     \"spectral_eigen\" = spectral_eigen_classic,     \"spectral_rot\" = spectral_rot_classic )  # Adapt below as necessary solutions_matrix <- batch_snf(     data_list,     settings_matrix,     clust_algs_list = clust_algs_list )"},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"new-functionality-0-3-0","dir":"Changelog","previous_headings":"","what":"New functionality","title":"metasnf 0.3.0","text":"Function remove_signal() enables correcting data_list linearly confounders / unwanted signal. Vignette available: https://branchlab.github.io/metasnf/articles/confounders.html. batch_snf() new parameter automatic_standard_normalize switch default numeric distance measures (euclidean) standard normalized variants.","code":""},{"path":"https://branchlab.github.io/metasnf/news/index.html","id":"other-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"metasnf 0.3.0","text":"Added NEWS.md file track changes package.","code":""}]
